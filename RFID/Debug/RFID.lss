
RFID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000f58  00000fec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006c  0080006c  00000ff8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001054  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00001090  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d11  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000968  00000000  00000000  00002ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ad7  00000000  00000000  00003831  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a0  00000000  00000000  00004308  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000076b  00000000  00000000  000046a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000136f  00000000  00000000  00004e13  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00006182  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
   4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
   6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
   8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
   a:	33 c0       	rjmp	.+102    	; 0x72 <__bad_interrupt>
   c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
   e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
  10:	30 c0       	rjmp	.+96     	; 0x72 <__bad_interrupt>
  12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
  14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
  16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
  18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
  1a:	2b c0       	rjmp	.+86     	; 0x72 <__bad_interrupt>
  1c:	2a c0       	rjmp	.+84     	; 0x72 <__bad_interrupt>
  1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
  20:	28 c0       	rjmp	.+80     	; 0x72 <__bad_interrupt>
  22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
  24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>

00000026 <__ctors_start>:
  26:	31 01       	movw	r6, r2

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf e5       	ldi	r28, 0x5F	; 95
  2e:	d4 e0       	ldi	r29, 0x04	; 4
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	10 e0       	ldi	r17, 0x00	; 0
  36:	a0 e6       	ldi	r26, 0x60	; 96
  38:	b0 e0       	ldi	r27, 0x00	; 0
  3a:	e8 e5       	ldi	r30, 0x58	; 88
  3c:	ff e0       	ldi	r31, 0x0F	; 15
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	ac 36       	cpi	r26, 0x6C	; 108
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	20 e0       	ldi	r18, 0x00	; 0
  4c:	ac e6       	ldi	r26, 0x6C	; 108
  4e:	b0 e0       	ldi	r27, 0x00	; 0
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	a0 37       	cpi	r26, 0x70	; 112
  56:	b2 07       	cpc	r27, r18
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>

0000005a <__do_global_ctors>:
  5a:	10 e0       	ldi	r17, 0x00	; 0
  5c:	c4 e1       	ldi	r28, 0x14	; 20
  5e:	d0 e0       	ldi	r29, 0x00	; 0
  60:	03 c0       	rjmp	.+6      	; 0x68 <__do_global_ctors+0xe>
  62:	21 97       	sbiw	r28, 0x01	; 1
  64:	fe 01       	movw	r30, r28
  66:	83 d4       	rcall	.+2310   	; 0x96e <__tablejump2__>
  68:	c3 31       	cpi	r28, 0x13	; 19
  6a:	d1 07       	cpc	r29, r17
  6c:	d1 f7       	brne	.-12     	; 0x62 <__do_global_ctors+0x8>
  6e:	88 d0       	rcall	.+272    	; 0x180 <main>
  70:	71 c7       	rjmp	.+3810   	; 0xf54 <_exit>

00000072 <__bad_interrupt>:
  72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <_Z9uart_initv>:
unsigned char USART_Receive( void ){
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) );
	/* Get and return received data from buffer */
	return UDR;
}
  74:	10 bc       	out	0x20, r1	; 32
  76:	8c e0       	ldi	r24, 0x0C	; 12
  78:	89 b9       	out	0x09, r24	; 9
  7a:	88 e1       	ldi	r24, 0x18	; 24
  7c:	8a b9       	out	0x0a, r24	; 10
  7e:	86 e8       	ldi	r24, 0x86	; 134
  80:	80 bd       	out	0x20, r24	; 32
  82:	08 95       	ret

00000084 <_Z14USART_Transmith>:
  84:	5d 9b       	sbis	0x0b, 5	; 11
  86:	fe cf       	rjmp	.-4      	; 0x84 <_Z14USART_Transmith>
  88:	8c b9       	out	0x0c, r24	; 12
  8a:	08 95       	ret

0000008c <_Z14SPI_MasterInitv>:
void SPI_MasterInit(void)
{
	DDRB |= (1<<SCK_PIN)|(1<<MOSI_PIN)|(1<<SS);
  8c:	87 b3       	in	r24, 0x17	; 23
  8e:	8c 62       	ori	r24, 0x2C	; 44
  90:	87 bb       	out	0x17, r24	; 23
	SPCR |=	(1<<SPE)|(1<<MSTR)|(1<<SPR0);
  92:	8d b1       	in	r24, 0x0d	; 13
  94:	81 65       	ori	r24, 0x51	; 81
  96:	8d b9       	out	0x0d, r24	; 13
	sbi(PORTB,SS);
  98:	c2 9a       	sbi	0x18, 2	; 24
  9a:	08 95       	ret

0000009c <_Z11_SendStringPc>:
}

void _SendString(char str[])
{
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	ec 01       	movw	r28, r24
	int i =0;
	
	while (str[i] != 0x00)
  a2:	88 81       	ld	r24, Y
  a4:	88 23       	and	r24, r24
  a6:	29 f0       	breq	.+10     	; 0xb2 <_Z11_SendStringPc+0x16>
  a8:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_Transmit(str[i]);
  aa:	ec df       	rcall	.-40     	; 0x84 <_Z14USART_Transmith>

void _SendString(char str[])
{
	int i =0;
	
	while (str[i] != 0x00)
  ac:	89 91       	ld	r24, Y+
  ae:	81 11       	cpse	r24, r1
  b0:	fc cf       	rjmp	.-8      	; 0xaa <_Z11_SendStringPc+0xe>
	{
		USART_Transmit(str[i]);
		i++;
	}
}
  b2:	df 91       	pop	r29
  b4:	cf 91       	pop	r28
  b6:	08 95       	ret

000000b8 <_Z10send_to_pcv>:

void send_to_pc(){
  b8:	af 92       	push	r10
  ba:	bf 92       	push	r11
  bc:	cf 92       	push	r12
  be:	df 92       	push	r13
  c0:	ef 92       	push	r14
  c2:	ff 92       	push	r15
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	00 d0       	rcall	.+0      	; 0xce <_Z10send_to_pcv+0x16>
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
	char temp[2];
	uint8_t c;
	for(int j = 0;j<MAX_EEPROM;j++){
		c=eeprom_read_byte((const uint8_t*)j);
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	f2 d6       	rcall	.+3556   	; 0xebc <eeprom_read_byte>
		sprintf(temp,"%02X", c);
  d8:	1f 92       	push	r1
  da:	8f 93       	push	r24
  dc:	80 e6       	ldi	r24, 0x60	; 96
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	9f 93       	push	r25
  e2:	8f 93       	push	r24
  e4:	ce 01       	movw	r24, r28
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	9f 93       	push	r25
  ea:	8f 93       	push	r24
  ec:	46 d4       	rcall	.+2188   	; 0x97a <sprintf>
		USART_Transmit(temp[0]);
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	c9 df       	rcall	.-110    	; 0x84 <_Z14USART_Transmith>
		USART_Transmit(temp[1]);
  f2:	8a 81       	ldd	r24, Y+2	; 0x02
  f4:	c7 df       	rcall	.-114    	; 0x84 <_Z14USART_Transmith>
  f6:	0f 90       	pop	r0
  f8:	0f 90       	pop	r0
  fa:	0f 90       	pop	r0
  fc:	0f 90       	pop	r0
  fe:	0f 90       	pop	r0
 100:	0f 90       	pop	r0
}

void send_to_pc(){
	char temp[2];
	uint8_t c;
	for(int j = 0;j<MAX_EEPROM;j++){
 102:	00 e0       	ldi	r16, 0x00	; 0
 104:	10 e0       	ldi	r17, 0x00	; 0
		c=eeprom_read_byte((const uint8_t*)j);
		sprintf(temp,"%02X", c);
 106:	0f 2e       	mov	r0, r31
 108:	f0 e6       	ldi	r31, 0x60	; 96
 10a:	ef 2e       	mov	r14, r31
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	ff 2e       	mov	r15, r31
 110:	f0 2d       	mov	r31, r0
 112:	ce 01       	movw	r24, r28
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	5c 01       	movw	r10, r24
		USART_Transmit(temp[0]);
		USART_Transmit(temp[1]);
		if(j % 5==4) USART_Transmit('\n');
 118:	0f 2e       	mov	r0, r31
 11a:	f5 e0       	ldi	r31, 0x05	; 5
 11c:	cf 2e       	mov	r12, r31
 11e:	d1 2c       	mov	r13, r1
 120:	f0 2d       	mov	r31, r0
 122:	1a c0       	rjmp	.+52     	; 0x158 <_Z10send_to_pcv+0xa0>

void send_to_pc(){
	char temp[2];
	uint8_t c;
	for(int j = 0;j<MAX_EEPROM;j++){
		c=eeprom_read_byte((const uint8_t*)j);
 124:	c8 01       	movw	r24, r16
 126:	ca d6       	rcall	.+3476   	; 0xebc <eeprom_read_byte>
		sprintf(temp,"%02X", c);
 128:	1f 92       	push	r1
 12a:	8f 93       	push	r24
 12c:	ff 92       	push	r15
 12e:	ef 92       	push	r14
 130:	bf 92       	push	r11
 132:	af 92       	push	r10
 134:	22 d4       	rcall	.+2116   	; 0x97a <sprintf>
		USART_Transmit(temp[0]);
 136:	89 81       	ldd	r24, Y+1	; 0x01
 138:	a5 df       	rcall	.-182    	; 0x84 <_Z14USART_Transmith>
		USART_Transmit(temp[1]);
 13a:	8a 81       	ldd	r24, Y+2	; 0x02
 13c:	a3 df       	rcall	.-186    	; 0x84 <_Z14USART_Transmith>
		if(j % 5==4) USART_Transmit('\n');
 13e:	c8 01       	movw	r24, r16
 140:	b6 01       	movw	r22, r12
 142:	ee d3       	rcall	.+2012   	; 0x920 <__divmodhi4>
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
 148:	0f 90       	pop	r0
 14a:	0f 90       	pop	r0
 14c:	0f 90       	pop	r0
 14e:	0f 90       	pop	r0
 150:	04 97       	sbiw	r24, 0x04	; 4
 152:	11 f4       	brne	.+4      	; 0x158 <_Z10send_to_pcv+0xa0>
 154:	8a e0       	ldi	r24, 0x0A	; 10
 156:	96 df       	rcall	.-212    	; 0x84 <_Z14USART_Transmith>
}

void send_to_pc(){
	char temp[2];
	uint8_t c;
	for(int j = 0;j<MAX_EEPROM;j++){
 158:	0f 5f       	subi	r16, 0xFF	; 255
 15a:	1f 4f       	sbci	r17, 0xFF	; 255
 15c:	04 31       	cpi	r16, 0x14	; 20
 15e:	11 05       	cpc	r17, r1
 160:	09 f7       	brne	.-62     	; 0x124 <_Z10send_to_pcv+0x6c>
		sprintf(temp,"%02X", c);
		USART_Transmit(temp[0]);
		USART_Transmit(temp[1]);
		if(j % 5==4) USART_Transmit('\n');
	}
	USART_Transmit('\n');
 162:	8a e0       	ldi	r24, 0x0A	; 10
 164:	8f df       	rcall	.-226    	; 0x84 <_Z14USART_Transmith>
}
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	1f 91       	pop	r17
 170:	0f 91       	pop	r16
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	df 90       	pop	r13
 178:	cf 90       	pop	r12
 17a:	bf 90       	pop	r11
 17c:	af 90       	pop	r10
 17e:	08 95       	ret

00000180 <main>:

MFRC522 rfid(2,6);
int main(void)
{
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
 188:	62 97       	sbiw	r28, 0x12	; 18
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	f8 94       	cli
 18e:	de bf       	out	0x3e, r29	; 62
 190:	0f be       	out	0x3f, r0	; 63
 192:	cd bf       	out	0x3d, r28	; 61
	
	SPI_MasterInit();
 194:	7b df       	rcall	.-266    	; 0x8c <_Z14SPI_MasterInitv>
	uart_init();
 196:	6e df       	rcall	.-292    	; 0x74 <_Z9uart_initv>
	DDRD = 0x80;
 198:	80 e8       	ldi	r24, 0x80	; 128
 19a:	81 bb       	out	0x11, r24	; 17
	rfid.begin();
 19c:	8c e6       	ldi	r24, 0x6C	; 108
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	19 d1       	rcall	.+562    	; 0x3d4 <_ZN7MFRC5225beginEv>
	_SendString("START");
 1a2:	85 e6       	ldi	r24, 0x65	; 101
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	7a df       	rcall	.-268    	; 0x9c <_Z11_SendStringPc>
	uint8_t status;
	uint8_t data[MAX_LEN];
	uint8_t indexEEPROM =0;
	bool check =true;
 1a8:	77 24       	eor	r7, r7
 1aa:	73 94       	inc	r7
	DDRD = 0x80;
	rfid.begin();
	_SendString("START");
	uint8_t status;
	uint8_t data[MAX_LEN];
	uint8_t indexEEPROM =0;
 1ac:	10 e0       	ldi	r17, 0x00	; 0
	bool check =true;
	char temp[2];
	while(1)
	{
		
		memset( data, '\0', sizeof(char)*MAX_LEN );
 1ae:	00 e1       	ldi	r16, 0x10	; 16
 1b0:	9e 01       	movw	r18, r28
 1b2:	2f 5f       	subi	r18, 0xFF	; 255
 1b4:	3f 4f       	sbci	r19, 0xFF	; 255
 1b6:	49 01       	movw	r8, r18
		if (status == MI_OK && indexEEPROM <MAX_EEPROM) {
			status = rfid.antiCollision(data);
			int i=0;
			while(data[i] != '\0')
			{
				sprintf(temp,"%02X", data[i]);
 1b8:	0f 2e       	mov	r0, r31
 1ba:	f0 e6       	ldi	r31, 0x60	; 96
 1bc:	af 2e       	mov	r10, r31
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	bf 2e       	mov	r11, r31
 1c2:	f0 2d       	mov	r31, r0
 1c4:	6e 01       	movw	r12, r28
 1c6:	31 e1       	ldi	r19, 0x11	; 17
 1c8:	c3 0e       	add	r12, r19
 1ca:	d1 1c       	adc	r13, r1
			rfid.haltTag();
			cbi(PORTD,7);
		}
		if(indexEEPROM ==MAX_EEPROM && check){
			send_to_pc();
			check =false;
 1cc:	61 2c       	mov	r6, r1
	bool check =true;
	char temp[2];
	while(1)
	{
		
		memset( data, '\0', sizeof(char)*MAX_LEN );
 1ce:	f4 01       	movw	r30, r8
 1d0:	20 2f       	mov	r18, r16
 1d2:	11 92       	st	Z+, r1
 1d4:	2a 95       	dec	r18
 1d6:	e9 f7       	brne	.-6      	; 0x1d2 <main+0x52>
		status = rfid.requestTag(MF1_REQIDL, data);
 1d8:	a4 01       	movw	r20, r8
 1da:	66 e2       	ldi	r22, 0x26	; 38
 1dc:	8c e6       	ldi	r24, 0x6C	; 108
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	37 d2       	rcall	.+1134   	; 0x650 <_ZN7MFRC52210requestTagEhPh>
		
		if (status == MI_OK && indexEEPROM <MAX_EEPROM) {
 1e2:	81 11       	cpse	r24, r1
 1e4:	35 c0       	rjmp	.+106    	; 0x250 <main+0xd0>
 1e6:	14 31       	cpi	r17, 0x14	; 20
 1e8:	98 f5       	brcc	.+102    	; 0x250 <main+0xd0>
			status = rfid.antiCollision(data);
 1ea:	b4 01       	movw	r22, r8
 1ec:	8c e6       	ldi	r24, 0x6C	; 108
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	67 d2       	rcall	.+1230   	; 0x6c0 <_ZN7MFRC52213antiCollisionEPh>
			int i=0;
			while(data[i] != '\0')
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	88 23       	and	r24, r24
 1f6:	09 f1       	breq	.+66     	; 0x23a <main+0xba>
 1f8:	fe 01       	movw	r30, r28
 1fa:	31 96       	adiw	r30, 0x01	; 1
 1fc:	7f 01       	movw	r14, r30
			{
				sprintf(temp,"%02X", data[i]);
 1fe:	1f 92       	push	r1
 200:	8f 93       	push	r24
 202:	bf 92       	push	r11
 204:	af 92       	push	r10
 206:	df 92       	push	r13
 208:	cf 92       	push	r12
 20a:	b7 d3       	rcall	.+1902   	; 0x97a <sprintf>
				USART_Transmit(temp[0]);
 20c:	89 89       	ldd	r24, Y+17	; 0x11
 20e:	3a df       	rcall	.-396    	; 0x84 <_Z14USART_Transmith>
				USART_Transmit(temp[1]);
 210:	8a 89       	ldd	r24, Y+18	; 0x12
 212:	38 df       	rcall	.-400    	; 0x84 <_Z14USART_Transmith>
				if(indexEEPROM >MAX_EEPROM) break;
 214:	0f 90       	pop	r0
 216:	0f 90       	pop	r0
 218:	0f 90       	pop	r0
 21a:	0f 90       	pop	r0
 21c:	0f 90       	pop	r0
 21e:	0f 90       	pop	r0
 220:	15 31       	cpi	r17, 0x15	; 21
 222:	59 f0       	breq	.+22     	; 0x23a <main+0xba>
				eeprom_write_byte((uint8_t*)indexEEPROM,data[i]);
 224:	f7 01       	movw	r30, r14
 226:	61 91       	ld	r22, Z+
 228:	7f 01       	movw	r14, r30
 22a:	81 2f       	mov	r24, r17
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	4e d6       	rcall	.+3228   	; 0xecc <eeprom_write_byte>
				indexEEPROM++;
 230:	1f 5f       	subi	r17, 0xFF	; 255
		status = rfid.requestTag(MF1_REQIDL, data);
		
		if (status == MI_OK && indexEEPROM <MAX_EEPROM) {
			status = rfid.antiCollision(data);
			int i=0;
			while(data[i] != '\0')
 232:	f7 01       	movw	r30, r14
 234:	80 81       	ld	r24, Z
 236:	81 11       	cpse	r24, r1
 238:	e2 cf       	rjmp	.-60     	; 0x1fe <main+0x7e>
				eeprom_write_byte((uint8_t*)indexEEPROM,data[i]);
				indexEEPROM++;
				i++;
				
			}
			USART_Transmit('\n');
 23a:	8a e0       	ldi	r24, 0x0A	; 10
 23c:	23 df       	rcall	.-442    	; 0x84 <_Z14USART_Transmith>
			sbi(PORTD,7);
 23e:	97 9a       	sbi	0x12, 7	; 18
			rfid.selectTag(data);
 240:	b4 01       	movw	r22, r8
 242:	8c e6       	ldi	r24, 0x6C	; 108
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	df d2       	rcall	.+1470   	; 0x806 <_ZN7MFRC5229selectTagEPh>
			// Stop the tag and get ready for reading a new tag.
			rfid.haltTag();
 248:	8c e6       	ldi	r24, 0x6C	; 108
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	2d d3       	rcall	.+1626   	; 0x8a8 <_ZN7MFRC5227haltTagEv>
			cbi(PORTD,7);
 24e:	97 98       	cbi	0x12, 7	; 18
		}
		if(indexEEPROM ==MAX_EEPROM && check){
 250:	14 31       	cpi	r17, 0x14	; 20
 252:	09 f0       	breq	.+2      	; 0x256 <main+0xd6>
 254:	bc cf       	rjmp	.-136    	; 0x1ce <main+0x4e>
 256:	77 20       	and	r7, r7
 258:	09 f4       	brne	.+2      	; 0x25c <main+0xdc>
 25a:	b9 cf       	rjmp	.-142    	; 0x1ce <main+0x4e>
			send_to_pc();
 25c:	2d df       	rcall	.-422    	; 0xb8 <_Z10send_to_pcv>
			check =false;
 25e:	76 2c       	mov	r7, r6
 260:	b6 cf       	rjmp	.-148    	; 0x1ce <main+0x4e>

00000262 <_GLOBAL__sub_I__Z9uart_initv>:
		if(j % 5==4) USART_Transmit('\n');
	}
	USART_Transmit('\n');
}

MFRC522 rfid(2,6);
 262:	46 e0       	ldi	r20, 0x06	; 6
 264:	50 e0       	ldi	r21, 0x00	; 0
 266:	62 e0       	ldi	r22, 0x02	; 2
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	8c e6       	ldi	r24, 0x6C	; 108
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	06 d0       	rcall	.+12     	; 0x27c <_ZN7MFRC522C1Eii>
 270:	08 95       	ret

00000272 <_Z18SPI_MasterTransmith>:

uint8_t MFRC522::getFirmwareVersion() {
	uint8_t response;
	response = readFromRegister(0x37);
	return response;
}
 272:	8f b9       	out	0x0f, r24	; 15
 274:	77 9b       	sbis	0x0e, 7	; 14
 276:	fe cf       	rjmp	.-4      	; 0x274 <_Z18SPI_MasterTransmith+0x2>
 278:	8f b1       	in	r24, 0x0f	; 15
 27a:	08 95       	ret

0000027c <_ZN7MFRC522C1Eii>:
 27c:	fc 01       	movw	r30, r24
 27e:	60 83       	st	Z, r22
 280:	71 83       	std	Z+1, r23	; 0x01
 282:	77 b3       	in	r23, 0x17	; 23
 284:	21 e0       	ldi	r18, 0x01	; 1
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	c9 01       	movw	r24, r18
 28a:	02 c0       	rjmp	.+4      	; 0x290 <_ZN7MFRC522C1Eii+0x14>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <_ZN7MFRC522C1Eii+0x10>
 294:	87 2b       	or	r24, r23
 296:	87 bb       	out	0x17, r24	; 23
 298:	68 b3       	in	r22, 0x18	; 24
 29a:	c9 01       	movw	r24, r18
 29c:	00 80       	ld	r0, Z
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <_ZN7MFRC522C1Eii+0x28>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	0a 94       	dec	r0
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <_ZN7MFRC522C1Eii+0x24>
 2a8:	86 2b       	or	r24, r22
 2aa:	88 bb       	out	0x18, r24	; 24
 2ac:	42 83       	std	Z+2, r20	; 0x02
 2ae:	53 83       	std	Z+3, r21	; 0x03
 2b0:	54 b3       	in	r21, 0x14	; 20
 2b2:	c9 01       	movw	r24, r18
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <_ZN7MFRC522C1Eii+0x3e>
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	4a 95       	dec	r20
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <_ZN7MFRC522C1Eii+0x3a>
 2be:	85 2b       	or	r24, r21
 2c0:	84 bb       	out	0x14, r24	; 20
 2c2:	85 b3       	in	r24, 0x15	; 21
 2c4:	02 80       	ldd	r0, Z+2	; 0x02
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <_ZN7MFRC522C1Eii+0x50>
 2c8:	22 0f       	add	r18, r18
 2ca:	33 1f       	adc	r19, r19
 2cc:	0a 94       	dec	r0
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <_ZN7MFRC522C1Eii+0x4c>
 2d0:	28 2b       	or	r18, r24
 2d2:	25 bb       	out	0x15, r18	; 21
 2d4:	08 95       	ret

000002d6 <_ZN7MFRC52215writeToRegisterEhh>:
 2d6:	ff 92       	push	r15
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	8c 01       	movw	r16, r24
 2e2:	f4 2e       	mov	r15, r20
 2e4:	98 b3       	in	r25, 0x18	; 24
 2e6:	c1 e0       	ldi	r28, 0x01	; 1
 2e8:	d0 e0       	ldi	r29, 0x00	; 0
 2ea:	9e 01       	movw	r18, r28
 2ec:	f8 01       	movw	r30, r16
 2ee:	00 80       	ld	r0, Z
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <_ZN7MFRC52215writeToRegisterEhh+0x20>
 2f2:	22 0f       	add	r18, r18
 2f4:	33 1f       	adc	r19, r19
 2f6:	0a 94       	dec	r0
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <_ZN7MFRC52215writeToRegisterEhh+0x1c>
 2fa:	82 2f       	mov	r24, r18
 2fc:	80 95       	com	r24
 2fe:	89 23       	and	r24, r25
 300:	88 bb       	out	0x18, r24	; 24
 302:	86 2f       	mov	r24, r22
 304:	88 0f       	add	r24, r24
 306:	8e 77       	andi	r24, 0x7E	; 126
 308:	b4 df       	rcall	.-152    	; 0x272 <_Z18SPI_MasterTransmith>
 30a:	8f 2d       	mov	r24, r15
 30c:	b2 df       	rcall	.-156    	; 0x272 <_Z18SPI_MasterTransmith>
 30e:	88 b3       	in	r24, 0x18	; 24
 310:	f8 01       	movw	r30, r16
 312:	00 80       	ld	r0, Z
 314:	02 c0       	rjmp	.+4      	; 0x31a <_ZN7MFRC52215writeToRegisterEhh+0x44>
 316:	cc 0f       	add	r28, r28
 318:	dd 1f       	adc	r29, r29
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <_ZN7MFRC52215writeToRegisterEhh+0x40>
 31e:	c8 2b       	or	r28, r24
 320:	c8 bb       	out	0x18, r28	; 24
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	1f 91       	pop	r17
 328:	0f 91       	pop	r16
 32a:	ff 90       	pop	r15
 32c:	08 95       	ret

0000032e <_ZN7MFRC52216readFromRegisterEh>:
 32e:	0f 93       	push	r16
 330:	1f 93       	push	r17
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	8c 01       	movw	r16, r24
 338:	28 b3       	in	r18, 0x18	; 24
 33a:	c1 e0       	ldi	r28, 0x01	; 1
 33c:	d0 e0       	ldi	r29, 0x00	; 0
 33e:	ae 01       	movw	r20, r28
 340:	fc 01       	movw	r30, r24
 342:	00 80       	ld	r0, Z
 344:	02 c0       	rjmp	.+4      	; 0x34a <_ZN7MFRC52216readFromRegisterEh+0x1c>
 346:	44 0f       	add	r20, r20
 348:	55 1f       	adc	r21, r21
 34a:	0a 94       	dec	r0
 34c:	e2 f7       	brpl	.-8      	; 0x346 <_ZN7MFRC52216readFromRegisterEh+0x18>
 34e:	94 2f       	mov	r25, r20
 350:	90 95       	com	r25
 352:	92 23       	and	r25, r18
 354:	98 bb       	out	0x18, r25	; 24
 356:	86 2f       	mov	r24, r22
 358:	88 0f       	add	r24, r24
 35a:	8e 77       	andi	r24, 0x7E	; 126
 35c:	80 68       	ori	r24, 0x80	; 128
 35e:	89 df       	rcall	.-238    	; 0x272 <_Z18SPI_MasterTransmith>
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	87 df       	rcall	.-242    	; 0x272 <_Z18SPI_MasterTransmith>
 364:	98 b3       	in	r25, 0x18	; 24
 366:	f8 01       	movw	r30, r16
 368:	00 80       	ld	r0, Z
 36a:	02 c0       	rjmp	.+4      	; 0x370 <_ZN7MFRC52216readFromRegisterEh+0x42>
 36c:	cc 0f       	add	r28, r28
 36e:	dd 1f       	adc	r29, r29
 370:	0a 94       	dec	r0
 372:	e2 f7       	brpl	.-8      	; 0x36c <_ZN7MFRC52216readFromRegisterEh+0x3e>
 374:	c9 2b       	or	r28, r25
 376:	c8 bb       	out	0x18, r28	; 24
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	1f 91       	pop	r17
 37e:	0f 91       	pop	r16
 380:	08 95       	ret

00000382 <_ZN7MFRC5225resetEv>:
	sbi(PORTB,_sad);
	return val;
}

void MFRC522::reset() {
	writeToRegister(CommandReg, MFRC522_SOFTRESET);
 382:	4f e0       	ldi	r20, 0x0F	; 15
 384:	61 e0       	ldi	r22, 0x01	; 1
 386:	a7 df       	rcall	.-178    	; 0x2d6 <_ZN7MFRC52215writeToRegisterEhh>
 388:	08 95       	ret

0000038a <_ZN7MFRC52210setBitMaskEhh>:
}

void MFRC522::setBitMask(uint8_t addr, uint8_t mask) {
 38a:	0f 93       	push	r16
 38c:	1f 93       	push	r17
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	8c 01       	movw	r16, r24
 394:	d6 2f       	mov	r29, r22
 396:	c4 2f       	mov	r28, r20
	uint8_t current;
	current = readFromRegister(addr);
 398:	ca df       	rcall	.-108    	; 0x32e <_ZN7MFRC52216readFromRegisterEh>
	writeToRegister(addr, current | mask);
 39a:	48 2f       	mov	r20, r24
 39c:	4c 2b       	or	r20, r28
 39e:	6d 2f       	mov	r22, r29
 3a0:	c8 01       	movw	r24, r16
 3a2:	99 df       	rcall	.-206    	; 0x2d6 <_ZN7MFRC52215writeToRegisterEhh>
}
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	1f 91       	pop	r17
 3aa:	0f 91       	pop	r16
 3ac:	08 95       	ret

000003ae <_ZN7MFRC52212clearBitMaskEhh>:

void MFRC522::clearBitMask(uint8_t addr, uint8_t mask) {
 3ae:	0f 93       	push	r16
 3b0:	1f 93       	push	r17
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	8c 01       	movw	r16, r24
 3b8:	d6 2f       	mov	r29, r22
 3ba:	c4 2f       	mov	r28, r20
	uint8_t current;
	current = readFromRegister(addr);
 3bc:	b8 df       	rcall	.-144    	; 0x32e <_ZN7MFRC52216readFromRegisterEh>
	writeToRegister(addr, current & (~mask));
 3be:	c0 95       	com	r28
 3c0:	4c 2f       	mov	r20, r28
 3c2:	48 23       	and	r20, r24
 3c4:	6d 2f       	mov	r22, r29
 3c6:	c8 01       	movw	r24, r16
 3c8:	86 df       	rcall	.-244    	; 0x2d6 <_ZN7MFRC52215writeToRegisterEhh>
}
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	1f 91       	pop	r17
 3d0:	0f 91       	pop	r16
 3d2:	08 95       	ret

000003d4 <_ZN7MFRC5225beginEv>:

void MFRC522::begin() {
 3d4:	cf 93       	push	r28
 3d6:	df 93       	push	r29
 3d8:	ec 01       	movw	r28, r24
	sbi(PORTB,_sad);
 3da:	28 b3       	in	r18, 0x18	; 24
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	08 80       	ld	r0, Y
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <_ZN7MFRC5225beginEv+0x14>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	0a 94       	dec	r0
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <_ZN7MFRC5225beginEv+0x10>
 3ec:	82 2b       	or	r24, r18
 3ee:	88 bb       	out	0x18, r24	; 24

	reset();
 3f0:	ce 01       	movw	r24, r28
 3f2:	c7 df       	rcall	.-114    	; 0x382 <_ZN7MFRC5225resetEv>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms == 3390 * 48 / 6.78
	writeToRegister(TModeReg, 0x8D);       // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 3f4:	4d e8       	ldi	r20, 0x8D	; 141
 3f6:	6a e2       	ldi	r22, 0x2A	; 42
 3f8:	ce 01       	movw	r24, r28
 3fa:	6d df       	rcall	.-294    	; 0x2d6 <_ZN7MFRC52215writeToRegisterEhh>
	writeToRegister(TPrescalerReg, 0x3E);  // TModeReg[3..0] + TPrescalerReg
 3fc:	4e e3       	ldi	r20, 0x3E	; 62
 3fe:	6b e2       	ldi	r22, 0x2B	; 43
 400:	ce 01       	movw	r24, r28
 402:	69 df       	rcall	.-302    	; 0x2d6 <_ZN7MFRC52215writeToRegisterEhh>
	writeToRegister(TReloadRegL, 30);		//48
 404:	4e e1       	ldi	r20, 0x1E	; 30
 406:	6d e2       	ldi	r22, 0x2D	; 45
 408:	ce 01       	movw	r24, r28
 40a:	65 df       	rcall	.-310    	; 0x2d6 <_ZN7MFRC52215writeToRegisterEhh>
	writeToRegister(TReloadRegH, 0);
 40c:	40 e0       	ldi	r20, 0x00	; 0
 40e:	6c e2       	ldi	r22, 0x2C	; 44
 410:	ce 01       	movw	r24, r28
 412:	61 df       	rcall	.-318    	; 0x2d6 <_ZN7MFRC52215writeToRegisterEhh>

	writeToRegister(TxAutoReg, 0x40);      // 100%ASK
 414:	40 e4       	ldi	r20, 0x40	; 64
 416:	65 e1       	ldi	r22, 0x15	; 21
 418:	ce 01       	movw	r24, r28
 41a:	5d df       	rcall	.-326    	; 0x2d6 <_ZN7MFRC52215writeToRegisterEhh>
	writeToRegister(ModeReg, 0x3D);        // CRC initial value 0x6363
 41c:	4d e3       	ldi	r20, 0x3D	; 61
 41e:	61 e1       	ldi	r22, 0x11	; 17
 420:	ce 01       	movw	r24, r28
 422:	59 df       	rcall	.-334    	; 0x2d6 <_ZN7MFRC52215writeToRegisterEhh>

	setBitMask(TxControlReg, 0x03);        // Turn antenna on.
 424:	43 e0       	ldi	r20, 0x03	; 3
 426:	64 e1       	ldi	r22, 0x14	; 20
 428:	ce 01       	movw	r24, r28
 42a:	af df       	rcall	.-162    	; 0x38a <_ZN7MFRC52210setBitMaskEhh>
}
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	08 95       	ret

00000432 <_ZN7MFRC52210commandTagEhPhiS0_Pi>:

int MFRC522::commandTag(uint8_t cmd, uint8_t *data, int dlen, uint8_t *result, int *rlen) {
 432:	5f 92       	push	r5
 434:	6f 92       	push	r6
 436:	7f 92       	push	r7
 438:	8f 92       	push	r8
 43a:	9f 92       	push	r9
 43c:	af 92       	push	r10
 43e:	bf 92       	push	r11
 440:	cf 92       	push	r12
 442:	df 92       	push	r13
 444:	ef 92       	push	r14
 446:	ff 92       	push	r15
 448:	0f 93       	push	r16
 44a:	1f 93       	push	r17
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	6c 01       	movw	r12, r24
 452:	56 2e       	mov	r5, r22
 454:	c4 2f       	mov	r28, r20
 456:	d5 2f       	mov	r29, r21
 458:	49 01       	movw	r8, r18
 45a:	37 01       	movw	r6, r14
	uint8_t irqEn = 0x00;
	uint8_t waitIRq = 0x00;
	uint8_t lastBits, n;
	int i;

	switch (cmd) {
 45c:	8c e0       	ldi	r24, 0x0C	; 12
 45e:	68 17       	cp	r22, r24
 460:	09 f4       	brne	.+2      	; 0x464 <__stack+0x5>
 462:	b5 c0       	rjmp	.+362    	; 0x5ce <__stack+0x16f>
 464:	9e e0       	ldi	r25, 0x0E	; 14
 466:	69 13       	cpse	r22, r25
 468:	08 c0       	rjmp	.+16     	; 0x47a <__stack+0x1b>
		case MFRC522_AUTHENT:
		irqEn = 0x12;
		waitIRq = 0x10;
 46a:	68 94       	set
 46c:	ff 24       	eor	r15, r15
 46e:	f4 f8       	bld	r15, 4
	uint8_t lastBits, n;
	int i;

	switch (cmd) {
		case MFRC522_AUTHENT:
		irqEn = 0x12;
 470:	0f 2e       	mov	r0, r31
 472:	f2 e1       	ldi	r31, 0x12	; 18
 474:	ef 2e       	mov	r14, r31
 476:	f0 2d       	mov	r31, r0
 478:	02 c0       	rjmp	.+4      	; 0x47e <__stack+0x1f>
}

int MFRC522::commandTag(uint8_t cmd, uint8_t *data, int dlen, uint8_t *result, int *rlen) {
	int status = MI_ERR;
	uint8_t irqEn = 0x00;
	uint8_t waitIRq = 0x00;
 47a:	f1 2c       	mov	r15, r1
	setBitMask(TxControlReg, 0x03);        // Turn antenna on.
}

int MFRC522::commandTag(uint8_t cmd, uint8_t *data, int dlen, uint8_t *result, int *rlen) {
	int status = MI_ERR;
	uint8_t irqEn = 0x00;
 47c:	e1 2c       	mov	r14, r1
		break;
		default:
		break;
	}

	writeToRegister(CommIEnReg, irqEn|0x80);    // interrupt request
 47e:	4e 2d       	mov	r20, r14
 480:	40 68       	ori	r20, 0x80	; 128
 482:	62 e0       	ldi	r22, 0x02	; 2
 484:	c6 01       	movw	r24, r12
 486:	27 df       	rcall	.-434    	; 0x2d6 <_ZN7MFRC52215writeToRegisterEhh>
	clearBitMask(CommIrqReg, 0x80);             // Clear all interrupt requests bits.
 488:	40 e8       	ldi	r20, 0x80	; 128
 48a:	64 e0       	ldi	r22, 0x04	; 4
 48c:	c6 01       	movw	r24, r12
 48e:	8f df       	rcall	.-226    	; 0x3ae <_ZN7MFRC52212clearBitMaskEhh>
	setBitMask(FIFOLevelReg, 0x80);             // FlushBuffer=1, FIFO initialization.
 490:	40 e8       	ldi	r20, 0x80	; 128
 492:	6a e0       	ldi	r22, 0x0A	; 10
 494:	c6 01       	movw	r24, r12
 496:	79 df       	rcall	.-270    	; 0x38a <_ZN7MFRC52210setBitMaskEhh>

	writeToRegister(CommandReg, MFRC522_IDLE);  // No action, cancel the current command.
 498:	40 e0       	ldi	r20, 0x00	; 0
 49a:	61 e0       	ldi	r22, 0x01	; 1
 49c:	c6 01       	movw	r24, r12
 49e:	1b df       	rcall	.-458    	; 0x2d6 <_ZN7MFRC52215writeToRegisterEhh>

	// Write to FIFO
	for (i=0; i < dlen; i++) {
 4a0:	18 14       	cp	r1, r8
 4a2:	19 04       	cpc	r1, r9
 4a4:	74 f4       	brge	.+28     	; 0x4c2 <__stack+0x63>
 4a6:	ac 2e       	mov	r10, r28
 4a8:	bd 2e       	mov	r11, r29
		case MFRC522_AUTHENT:
		irqEn = 0x12;
		waitIRq = 0x10;
		break;
		case MFRC522_TRANSCEIVE:
		irqEn = 0x77;
 4aa:	c0 e0       	ldi	r28, 0x00	; 0
 4ac:	d0 e0       	ldi	r29, 0x00	; 0

	writeToRegister(CommandReg, MFRC522_IDLE);  // No action, cancel the current command.

	// Write to FIFO
	for (i=0; i < dlen; i++) {
		writeToRegister(FIFODataReg, data[i]);
 4ae:	f5 01       	movw	r30, r10
 4b0:	41 91       	ld	r20, Z+
 4b2:	5f 01       	movw	r10, r30
 4b4:	69 e0       	ldi	r22, 0x09	; 9
 4b6:	c6 01       	movw	r24, r12
 4b8:	0e df       	rcall	.-484    	; 0x2d6 <_ZN7MFRC52215writeToRegisterEhh>
	setBitMask(FIFOLevelReg, 0x80);             // FlushBuffer=1, FIFO initialization.

	writeToRegister(CommandReg, MFRC522_IDLE);  // No action, cancel the current command.

	// Write to FIFO
	for (i=0; i < dlen; i++) {
 4ba:	21 96       	adiw	r28, 0x01	; 1
 4bc:	c8 15       	cp	r28, r8
 4be:	d9 05       	cpc	r29, r9
 4c0:	b4 f3       	brlt	.-20     	; 0x4ae <__stack+0x4f>
		writeToRegister(FIFODataReg, data[i]);
	}

	// Execute the command.
	writeToRegister(CommandReg, cmd);
 4c2:	45 2d       	mov	r20, r5
 4c4:	61 e0       	ldi	r22, 0x01	; 1
 4c6:	c6 01       	movw	r24, r12
 4c8:	06 df       	rcall	.-500    	; 0x2d6 <_ZN7MFRC52215writeToRegisterEhh>
	if (cmd == MFRC522_TRANSCEIVE) {
 4ca:	fc e0       	ldi	r31, 0x0C	; 12
 4cc:	5f 12       	cpse	r5, r31
 4ce:	04 c0       	rjmp	.+8      	; 0x4d8 <__stack+0x79>
		setBitMask(BitFramingReg, 0x80);  // StartSend=1, transmission of data starts
 4d0:	40 e8       	ldi	r20, 0x80	; 128
 4d2:	6d e0       	ldi	r22, 0x0D	; 13
 4d4:	c6 01       	movw	r24, r12
 4d6:	59 df       	rcall	.-334    	; 0x38a <_ZN7MFRC52210setBitMaskEhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4d8:	81 ee       	ldi	r24, 0xE1	; 225
 4da:	94 e0       	ldi	r25, 0x04	; 4
 4dc:	01 97       	sbiw	r24, 0x01	; 1
 4de:	f1 f7       	brne	.-4      	; 0x4dc <__stack+0x7d>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <__stack+0x83>
 4e2:	00 00       	nop
	i = 25; // Max wait time is 25ms.
	do {
		_delay_ms(5);
		// CommIRqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = readFromRegister(CommIrqReg);
 4e4:	64 e0       	ldi	r22, 0x04	; 4
 4e6:	c6 01       	movw	r24, r12
 4e8:	22 df       	rcall	.-444    	; 0x32e <_ZN7MFRC52216readFromRegisterEh>
 4ea:	b8 2e       	mov	r11, r24
 4ec:	c8 e1       	ldi	r28, 0x18	; 24
 4ee:	d0 e0       	ldi	r29, 0x00	; 0
		i--;
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 4f0:	9f 2d       	mov	r25, r15
 4f2:	91 60       	ori	r25, 0x01	; 1
 4f4:	f9 2e       	mov	r15, r25
 4f6:	0d c0       	rjmp	.+26     	; 0x512 <__stack+0xb3>
 4f8:	e1 ee       	ldi	r30, 0xE1	; 225
 4fa:	f4 e0       	ldi	r31, 0x04	; 4
 4fc:	31 97       	sbiw	r30, 0x01	; 1
 4fe:	f1 f7       	brne	.-4      	; 0x4fc <__stack+0x9d>
 500:	00 c0       	rjmp	.+0      	; 0x502 <__stack+0xa3>
 502:	00 00       	nop
	i = 25; // Max wait time is 25ms.
	do {
		_delay_ms(5);
		// CommIRqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = readFromRegister(CommIrqReg);
 504:	64 e0       	ldi	r22, 0x04	; 4
 506:	c6 01       	movw	r24, r12
 508:	12 df       	rcall	.-476    	; 0x32e <_ZN7MFRC52216readFromRegisterEh>
 50a:	b8 2e       	mov	r11, r24
 50c:	21 97       	sbiw	r28, 0x01	; 1
		i--;
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 50e:	09 f4       	brne	.+2      	; 0x512 <__stack+0xb3>
 510:	7a c0       	rjmp	.+244    	; 0x606 <__stack+0x1a7>
 512:	8f 2d       	mov	r24, r15
 514:	8b 21       	and	r24, r11
 516:	81 f3       	breq	.-32     	; 0x4f8 <__stack+0x99>
 518:	7d c0       	rjmp	.+250    	; 0x614 <__stack+0x1b5>

	clearBitMask(BitFramingReg, 0x80);  // StartSend=0

	if (i != 0) { // Request did not time out.
		if(!(readFromRegister(ErrorReg) & 0x1D)) {  // BufferOvfl Collerr CRCErr ProtocolErr
			status = MI_OK;
 51a:	8e 2d       	mov	r24, r14
 51c:	81 70       	andi	r24, 0x01	; 1
 51e:	b8 22       	and	r11, r24
 520:	d1 e0       	ldi	r29, 0x01	; 1
 522:	c0 e0       	ldi	r28, 0x00	; 0
 524:	09 f4       	brne	.+2      	; 0x528 <__stack+0xc9>
 526:	d0 e0       	ldi	r29, 0x00	; 0
			if (n & irqEn & 0x01) {
				status = MI_NOTAGERR;
			}

			if (cmd == MFRC522_TRANSCEIVE) {
 528:	fc e0       	ldi	r31, 0x0C	; 12
 52a:	5f 12       	cpse	r5, r31
 52c:	7f c0       	rjmp	.+254    	; 0x62c <__stack+0x1cd>
				n = readFromRegister(FIFOLevelReg);
 52e:	6a e0       	ldi	r22, 0x0A	; 10
 530:	c6 01       	movw	r24, r12
 532:	fd de       	rcall	.-518    	; 0x32e <_ZN7MFRC52216readFromRegisterEh>
 534:	f8 2e       	mov	r15, r24
				lastBits = readFromRegister(ControlReg) & 0x07;
 536:	6c e0       	ldi	r22, 0x0C	; 12
 538:	c6 01       	movw	r24, r12
 53a:	f9 de       	rcall	.-526    	; 0x32e <_ZN7MFRC52216readFromRegisterEh>
 53c:	28 2f       	mov	r18, r24
 53e:	27 70       	andi	r18, 0x07	; 7
				if (lastBits) {
 540:	79 f0       	breq	.+30     	; 0x560 <__stack+0x101>
					*rlen = (n-1)*8 + lastBits;
 542:	8f 2d       	mov	r24, r15
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	01 97       	sbiw	r24, 0x01	; 1
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	82 0f       	add	r24, r18
 556:	91 1d       	adc	r25, r1
 558:	f3 01       	movw	r30, r6
 55a:	91 83       	std	Z+1, r25	; 0x01
 55c:	80 83       	st	Z, r24
 55e:	0b c0       	rjmp	.+22     	; 0x576 <__stack+0x117>
					} else {
					*rlen = n*8;
 560:	8f 2d       	mov	r24, r15
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	88 0f       	add	r24, r24
 566:	99 1f       	adc	r25, r25
 568:	88 0f       	add	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	88 0f       	add	r24, r24
 56e:	99 1f       	adc	r25, r25
 570:	f3 01       	movw	r30, r6
 572:	91 83       	std	Z+1, r25	; 0x01
 574:	80 83       	st	Z, r24
				}

				if (n == 0) {
 576:	ff 20       	and	r15, r15
 578:	51 f0       	breq	.+20     	; 0x58e <__stack+0x12f>
				if (n > MAX_LEN) {
					n = MAX_LEN;
				}

				// Reading the recieved data from FIFO.
				for (i=0; i<n; i++) {
 57a:	8f 2d       	mov	r24, r15
 57c:	81 31       	cpi	r24, 0x11	; 17
 57e:	08 f0       	brcs	.+2      	; 0x582 <__stack+0x123>
 580:	80 e1       	ldi	r24, 0x10	; 16
 582:	a8 2e       	mov	r10, r24
 584:	b1 2c       	mov	r11, r1
 586:	1a 14       	cp	r1, r10
 588:	1b 04       	cpc	r1, r11
 58a:	24 f0       	brlt	.+8      	; 0x594 <__stack+0x135>
 58c:	4f c0       	rjmp	.+158    	; 0x62c <__stack+0x1cd>
 58e:	aa 24       	eor	r10, r10
 590:	a3 94       	inc	r10
 592:	b1 2c       	mov	r11, r1
 594:	e0 2e       	mov	r14, r16
 596:	f1 2e       	mov	r15, r17
 598:	00 e0       	ldi	r16, 0x00	; 0
 59a:	10 e0       	ldi	r17, 0x00	; 0
					result[i] = readFromRegister(FIFODataReg);
 59c:	69 e0       	ldi	r22, 0x09	; 9
 59e:	c6 01       	movw	r24, r12
 5a0:	c6 de       	rcall	.-628    	; 0x32e <_ZN7MFRC52216readFromRegisterEh>
 5a2:	f7 01       	movw	r30, r14
 5a4:	81 93       	st	Z+, r24
 5a6:	7f 01       	movw	r14, r30
				if (n > MAX_LEN) {
					n = MAX_LEN;
				}

				// Reading the recieved data from FIFO.
				for (i=0; i<n; i++) {
 5a8:	0f 5f       	subi	r16, 0xFF	; 255
 5aa:	1f 4f       	sbci	r17, 0xFF	; 255
 5ac:	0a 15       	cp	r16, r10
 5ae:	1b 05       	cpc	r17, r11
 5b0:	ac f3       	brlt	.-22     	; 0x59c <__stack+0x13d>
 5b2:	3c c0       	rjmp	.+120    	; 0x62c <__stack+0x1cd>
	for (i=0; i < dlen; i++) {
		writeToRegister(FIFODataReg, data[i]);
	}

	// Execute the command.
	writeToRegister(CommandReg, cmd);
 5b4:	4c e0       	ldi	r20, 0x0C	; 12
 5b6:	61 e0       	ldi	r22, 0x01	; 1
 5b8:	c6 01       	movw	r24, r12
 5ba:	8d de       	rcall	.-742    	; 0x2d6 <_ZN7MFRC52215writeToRegisterEhh>
		irqEn = 0x12;
		waitIRq = 0x10;
		break;
		case MFRC522_TRANSCEIVE:
		irqEn = 0x77;
		waitIRq = 0x30;
 5bc:	0f 2e       	mov	r0, r31
 5be:	f0 e3       	ldi	r31, 0x30	; 48
 5c0:	ff 2e       	mov	r15, r31
 5c2:	f0 2d       	mov	r31, r0
		case MFRC522_AUTHENT:
		irqEn = 0x12;
		waitIRq = 0x10;
		break;
		case MFRC522_TRANSCEIVE:
		irqEn = 0x77;
 5c4:	0f 2e       	mov	r0, r31
 5c6:	f7 e7       	ldi	r31, 0x77	; 119
 5c8:	ef 2e       	mov	r14, r31
 5ca:	f0 2d       	mov	r31, r0
 5cc:	81 cf       	rjmp	.-254    	; 0x4d0 <__stack+0x71>
		break;
		default:
		break;
	}

	writeToRegister(CommIEnReg, irqEn|0x80);    // interrupt request
 5ce:	47 ef       	ldi	r20, 0xF7	; 247
 5d0:	62 e0       	ldi	r22, 0x02	; 2
 5d2:	c6 01       	movw	r24, r12
 5d4:	80 de       	rcall	.-768    	; 0x2d6 <_ZN7MFRC52215writeToRegisterEhh>
	clearBitMask(CommIrqReg, 0x80);             // Clear all interrupt requests bits.
 5d6:	40 e8       	ldi	r20, 0x80	; 128
 5d8:	64 e0       	ldi	r22, 0x04	; 4
 5da:	c6 01       	movw	r24, r12
 5dc:	e8 de       	rcall	.-560    	; 0x3ae <_ZN7MFRC52212clearBitMaskEhh>
	setBitMask(FIFOLevelReg, 0x80);             // FlushBuffer=1, FIFO initialization.
 5de:	40 e8       	ldi	r20, 0x80	; 128
 5e0:	6a e0       	ldi	r22, 0x0A	; 10
 5e2:	c6 01       	movw	r24, r12
 5e4:	d2 de       	rcall	.-604    	; 0x38a <_ZN7MFRC52210setBitMaskEhh>

	writeToRegister(CommandReg, MFRC522_IDLE);  // No action, cancel the current command.
 5e6:	40 e0       	ldi	r20, 0x00	; 0
 5e8:	61 e0       	ldi	r22, 0x01	; 1
 5ea:	c6 01       	movw	r24, r12
 5ec:	74 de       	rcall	.-792    	; 0x2d6 <_ZN7MFRC52215writeToRegisterEhh>

	// Write to FIFO
	for (i=0; i < dlen; i++) {
 5ee:	18 14       	cp	r1, r8
 5f0:	19 04       	cpc	r1, r9
 5f2:	04 f7       	brge	.-64     	; 0x5b4 <__stack+0x155>
		irqEn = 0x12;
		waitIRq = 0x10;
		break;
		case MFRC522_TRANSCEIVE:
		irqEn = 0x77;
		waitIRq = 0x30;
 5f4:	0f 2e       	mov	r0, r31
 5f6:	f0 e3       	ldi	r31, 0x30	; 48
 5f8:	ff 2e       	mov	r15, r31
 5fa:	f0 2d       	mov	r31, r0
		case MFRC522_AUTHENT:
		irqEn = 0x12;
		waitIRq = 0x10;
		break;
		case MFRC522_TRANSCEIVE:
		irqEn = 0x77;
 5fc:	0f 2e       	mov	r0, r31
 5fe:	f7 e7       	ldi	r31, 0x77	; 119
 600:	ef 2e       	mov	r14, r31
 602:	f0 2d       	mov	r31, r0
 604:	50 cf       	rjmp	.-352    	; 0x4a6 <__stack+0x47>
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = readFromRegister(CommIrqReg);
		i--;
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	clearBitMask(BitFramingReg, 0x80);  // StartSend=0
 606:	40 e8       	ldi	r20, 0x80	; 128
 608:	6d e0       	ldi	r22, 0x0D	; 13
 60a:	c6 01       	movw	r24, r12
 60c:	d0 de       	rcall	.-608    	; 0x3ae <_ZN7MFRC52212clearBitMaskEhh>

	setBitMask(TxControlReg, 0x03);        // Turn antenna on.
}

int MFRC522::commandTag(uint8_t cmd, uint8_t *data, int dlen, uint8_t *result, int *rlen) {
	int status = MI_ERR;
 60e:	d2 e0       	ldi	r29, 0x02	; 2
 610:	c0 e0       	ldi	r28, 0x00	; 0
 612:	0c c0       	rjmp	.+24     	; 0x62c <__stack+0x1cd>
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = readFromRegister(CommIrqReg);
		i--;
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	clearBitMask(BitFramingReg, 0x80);  // StartSend=0
 614:	40 e8       	ldi	r20, 0x80	; 128
 616:	6d e0       	ldi	r22, 0x0D	; 13
 618:	c6 01       	movw	r24, r12
 61a:	c9 de       	rcall	.-622    	; 0x3ae <_ZN7MFRC52212clearBitMaskEhh>

	if (i != 0) { // Request did not time out.
		if(!(readFromRegister(ErrorReg) & 0x1D)) {  // BufferOvfl Collerr CRCErr ProtocolErr
 61c:	66 e0       	ldi	r22, 0x06	; 6
 61e:	c6 01       	movw	r24, r12
 620:	86 de       	rcall	.-756    	; 0x32e <_ZN7MFRC52216readFromRegisterEh>
 622:	8d 71       	andi	r24, 0x1D	; 29
 624:	09 f4       	brne	.+2      	; 0x628 <__stack+0x1c9>
 626:	79 cf       	rjmp	.-270    	; 0x51a <__stack+0xbb>
				for (i=0; i<n; i++) {
					result[i] = readFromRegister(FIFODataReg);
				}
			}
			} else {
			status = MI_ERR;
 628:	d2 e0       	ldi	r29, 0x02	; 2
 62a:	c0 e0       	ldi	r28, 0x00	; 0
		}
	}
	return status;
}
 62c:	8d 2f       	mov	r24, r29
 62e:	9c 2f       	mov	r25, r28
 630:	df 91       	pop	r29
 632:	cf 91       	pop	r28
 634:	1f 91       	pop	r17
 636:	0f 91       	pop	r16
 638:	ff 90       	pop	r15
 63a:	ef 90       	pop	r14
 63c:	df 90       	pop	r13
 63e:	cf 90       	pop	r12
 640:	bf 90       	pop	r11
 642:	af 90       	pop	r10
 644:	9f 90       	pop	r9
 646:	8f 90       	pop	r8
 648:	7f 90       	pop	r7
 64a:	6f 90       	pop	r6
 64c:	5f 90       	pop	r5
 64e:	08 95       	ret

00000650 <_ZN7MFRC52210requestTagEhPh>:

int MFRC522::requestTag(uint8_t mode, uint8_t *data) {
 650:	af 92       	push	r10
 652:	bf 92       	push	r11
 654:	cf 92       	push	r12
 656:	df 92       	push	r13
 658:	ef 92       	push	r14
 65a:	ff 92       	push	r15
 65c:	0f 93       	push	r16
 65e:	1f 93       	push	r17
 660:	cf 93       	push	r28
 662:	df 93       	push	r29
 664:	00 d0       	rcall	.+0      	; 0x666 <_ZN7MFRC52210requestTagEhPh+0x16>
 666:	cd b7       	in	r28, 0x3d	; 61
 668:	de b7       	in	r29, 0x3e	; 62
 66a:	5c 01       	movw	r10, r24
 66c:	16 2f       	mov	r17, r22
 66e:	6a 01       	movw	r12, r20
	int status, len;
	writeToRegister(BitFramingReg, 0x07);  // TxLastBists = BitFramingReg[2..0]
 670:	47 e0       	ldi	r20, 0x07	; 7
 672:	6d e0       	ldi	r22, 0x0D	; 13
 674:	30 de       	rcall	.-928    	; 0x2d6 <_ZN7MFRC52215writeToRegisterEhh>

	data[0] = mode;
 676:	f6 01       	movw	r30, r12
 678:	10 83       	st	Z, r17
	status = commandTag(MFRC522_TRANSCEIVE, data, 1, data, &len);
 67a:	ce 01       	movw	r24, r28
 67c:	01 96       	adiw	r24, 0x01	; 1
 67e:	7c 01       	movw	r14, r24
 680:	86 01       	movw	r16, r12
 682:	21 e0       	ldi	r18, 0x01	; 1
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	a6 01       	movw	r20, r12
 688:	6c e0       	ldi	r22, 0x0C	; 12
 68a:	c5 01       	movw	r24, r10
 68c:	d2 de       	rcall	.-604    	; 0x432 <_ZN7MFRC52210commandTagEhPhiS0_Pi>

	if ((status != MI_OK) || (len != 0x10)) {
 68e:	00 97       	sbiw	r24, 0x00	; 0
 690:	41 f4       	brne	.+16     	; 0x6a2 <_ZN7MFRC52210requestTagEhPh+0x52>
 692:	29 81       	ldd	r18, Y+1	; 0x01
 694:	3a 81       	ldd	r19, Y+2	; 0x02
 696:	20 31       	cpi	r18, 0x10	; 16
 698:	31 05       	cpc	r19, r1
 69a:	29 f0       	breq	.+10     	; 0x6a6 <_ZN7MFRC52210requestTagEhPh+0x56>
		status = MI_ERR;
 69c:	82 e0       	ldi	r24, 0x02	; 2
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <_ZN7MFRC52210requestTagEhPh+0x56>
 6a2:	82 e0       	ldi	r24, 0x02	; 2
 6a4:	90 e0       	ldi	r25, 0x00	; 0
	}

	return status;
}
 6a6:	0f 90       	pop	r0
 6a8:	0f 90       	pop	r0
 6aa:	df 91       	pop	r29
 6ac:	cf 91       	pop	r28
 6ae:	1f 91       	pop	r17
 6b0:	0f 91       	pop	r16
 6b2:	ff 90       	pop	r15
 6b4:	ef 90       	pop	r14
 6b6:	df 90       	pop	r13
 6b8:	cf 90       	pop	r12
 6ba:	bf 90       	pop	r11
 6bc:	af 90       	pop	r10
 6be:	08 95       	ret

000006c0 <_ZN7MFRC52213antiCollisionEPh>:

int MFRC522::antiCollision(uint8_t *serial) {
 6c0:	af 92       	push	r10
 6c2:	bf 92       	push	r11
 6c4:	cf 92       	push	r12
 6c6:	df 92       	push	r13
 6c8:	ef 92       	push	r14
 6ca:	ff 92       	push	r15
 6cc:	0f 93       	push	r16
 6ce:	1f 93       	push	r17
 6d0:	cf 93       	push	r28
 6d2:	df 93       	push	r29
 6d4:	00 d0       	rcall	.+0      	; 0x6d6 <_ZN7MFRC52213antiCollisionEPh+0x16>
 6d6:	cd b7       	in	r28, 0x3d	; 61
 6d8:	de b7       	in	r29, 0x3e	; 62
 6da:	5c 01       	movw	r10, r24
 6dc:	6b 01       	movw	r12, r22
	int status, i, len;
	uint8_t check = 0x00;

	writeToRegister(BitFramingReg, 0x00);  // TxLastBits = BitFramingReg[2..0]
 6de:	40 e0       	ldi	r20, 0x00	; 0
 6e0:	6d e0       	ldi	r22, 0x0D	; 13
 6e2:	f9 dd       	rcall	.-1038   	; 0x2d6 <_ZN7MFRC52215writeToRegisterEhh>

	serial[0] = MF1_ANTICOLL;
 6e4:	83 e9       	ldi	r24, 0x93	; 147
 6e6:	f6 01       	movw	r30, r12
 6e8:	80 83       	st	Z, r24
	serial[1] = 0x20;
 6ea:	80 e2       	ldi	r24, 0x20	; 32
 6ec:	81 83       	std	Z+1, r24	; 0x01
	status = commandTag(MFRC522_TRANSCEIVE, serial, 2, serial, &len);
 6ee:	ce 01       	movw	r24, r28
 6f0:	01 96       	adiw	r24, 0x01	; 1
 6f2:	7c 01       	movw	r14, r24
 6f4:	86 01       	movw	r16, r12
 6f6:	22 e0       	ldi	r18, 0x02	; 2
 6f8:	30 e0       	ldi	r19, 0x00	; 0
 6fa:	a6 01       	movw	r20, r12
 6fc:	6c e0       	ldi	r22, 0x0C	; 12
 6fe:	c5 01       	movw	r24, r10
 700:	98 de       	rcall	.-720    	; 0x432 <_ZN7MFRC52210commandTagEhPhiS0_Pi>
 702:	bc 01       	movw	r22, r24
	len = len / 8; // len is in bits, and we want each byte.
	if (status == MI_OK) {
 704:	89 2b       	or	r24, r25
 706:	49 f5       	brne	.+82     	; 0x75a <_ZN7MFRC52213antiCollisionEPh+0x9a>
	writeToRegister(BitFramingReg, 0x00);  // TxLastBits = BitFramingReg[2..0]

	serial[0] = MF1_ANTICOLL;
	serial[1] = 0x20;
	status = commandTag(MFRC522_TRANSCEIVE, serial, 2, serial, &len);
	len = len / 8; // len is in bits, and we want each byte.
 708:	29 81       	ldd	r18, Y+1	; 0x01
 70a:	3a 81       	ldd	r19, Y+2	; 0x02
 70c:	33 23       	and	r19, r19
 70e:	14 f4       	brge	.+4      	; 0x714 <_ZN7MFRC52213antiCollisionEPh+0x54>
 710:	29 5f       	subi	r18, 0xF9	; 249
 712:	3f 4f       	sbci	r19, 0xFF	; 255
 714:	35 95       	asr	r19
 716:	27 95       	ror	r18
 718:	35 95       	asr	r19
 71a:	27 95       	ror	r18
 71c:	35 95       	asr	r19
 71e:	27 95       	ror	r18
	if (status == MI_OK) {
		// The checksum of the tag is the ^ of all the values.
		for (i = 0; i < len-1; i++) {
 720:	c9 01       	movw	r24, r18
 722:	01 97       	sbiw	r24, 0x01	; 1
 724:	18 16       	cp	r1, r24
 726:	19 06       	cpc	r1, r25
 728:	6c f4       	brge	.+26     	; 0x744 <_ZN7MFRC52213antiCollisionEPh+0x84>
 72a:	f6 01       	movw	r30, r12
 72c:	ac 01       	movw	r20, r24
 72e:	d6 01       	movw	r26, r12
 730:	a8 0f       	add	r26, r24
 732:	b9 1f       	adc	r27, r25
 734:	90 e0       	ldi	r25, 0x00	; 0
			check ^= serial[i];
 736:	21 91       	ld	r18, Z+
 738:	92 27       	eor	r25, r18
	serial[1] = 0x20;
	status = commandTag(MFRC522_TRANSCEIVE, serial, 2, serial, &len);
	len = len / 8; // len is in bits, and we want each byte.
	if (status == MI_OK) {
		// The checksum of the tag is the ^ of all the values.
		for (i = 0; i < len-1; i++) {
 73a:	ea 17       	cp	r30, r26
 73c:	fb 07       	cpc	r31, r27
 73e:	d9 f7       	brne	.-10     	; 0x736 <_ZN7MFRC52213antiCollisionEPh+0x76>
 740:	9a 01       	movw	r18, r20
 742:	03 c0       	rjmp	.+6      	; 0x74a <_ZN7MFRC52213antiCollisionEPh+0x8a>
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	20 e0       	ldi	r18, 0x00	; 0
 748:	30 e0       	ldi	r19, 0x00	; 0
			check ^= serial[i];
		}
		// The checksum should be the same as the one provided from the
		// tag (serial[4]).
		if (check != serial[i]) {
 74a:	f6 01       	movw	r30, r12
 74c:	e2 0f       	add	r30, r18
 74e:	f3 1f       	adc	r31, r19
 750:	80 81       	ld	r24, Z
 752:	89 17       	cp	r24, r25
 754:	11 f0       	breq	.+4      	; 0x75a <_ZN7MFRC52213antiCollisionEPh+0x9a>
			status = MI_ERR;
 756:	62 e0       	ldi	r22, 0x02	; 2
 758:	70 e0       	ldi	r23, 0x00	; 0
		}
	}

	return status;
}
 75a:	cb 01       	movw	r24, r22
 75c:	0f 90       	pop	r0
 75e:	0f 90       	pop	r0
 760:	df 91       	pop	r29
 762:	cf 91       	pop	r28
 764:	1f 91       	pop	r17
 766:	0f 91       	pop	r16
 768:	ff 90       	pop	r15
 76a:	ef 90       	pop	r14
 76c:	df 90       	pop	r13
 76e:	cf 90       	pop	r12
 770:	bf 90       	pop	r11
 772:	af 90       	pop	r10
 774:	08 95       	ret

00000776 <_ZN7MFRC52212calculateCRCEPhiS0_>:

void MFRC522::calculateCRC(uint8_t *data, int len, uint8_t *result) {
 776:	af 92       	push	r10
 778:	bf 92       	push	r11
 77a:	cf 92       	push	r12
 77c:	df 92       	push	r13
 77e:	ef 92       	push	r14
 780:	ff 92       	push	r15
 782:	0f 93       	push	r16
 784:	1f 93       	push	r17
 786:	cf 93       	push	r28
 788:	df 93       	push	r29
 78a:	8c 01       	movw	r16, r24
 78c:	5b 01       	movw	r10, r22
 78e:	6a 01       	movw	r12, r20
 790:	79 01       	movw	r14, r18
	int i;
	uint8_t n;

	clearBitMask(DivIrqReg, 0x04);   // CRCIrq = 0
 792:	44 e0       	ldi	r20, 0x04	; 4
 794:	65 e0       	ldi	r22, 0x05	; 5
 796:	0b de       	rcall	.-1002   	; 0x3ae <_ZN7MFRC52212clearBitMaskEhh>
	setBitMask(FIFOLevelReg, 0x80);  // Clear the FIFO pointer
 798:	40 e8       	ldi	r20, 0x80	; 128
 79a:	6a e0       	ldi	r22, 0x0A	; 10
 79c:	c8 01       	movw	r24, r16
 79e:	f5 dd       	rcall	.-1046   	; 0x38a <_ZN7MFRC52210setBitMaskEhh>

	//Writing data to the FIFO.
	for (i = 0; i < len; i++) {
 7a0:	1c 14       	cp	r1, r12
 7a2:	1d 04       	cpc	r1, r13
 7a4:	54 f4       	brge	.+20     	; 0x7ba <_ZN7MFRC52212calculateCRCEPhiS0_+0x44>
 7a6:	e5 01       	movw	r28, r10
 7a8:	ca 0c       	add	r12, r10
 7aa:	db 1c       	adc	r13, r11
		writeToRegister(FIFODataReg, data[i]);
 7ac:	49 91       	ld	r20, Y+
 7ae:	69 e0       	ldi	r22, 0x09	; 9
 7b0:	c8 01       	movw	r24, r16
 7b2:	91 dd       	rcall	.-1246   	; 0x2d6 <_ZN7MFRC52215writeToRegisterEhh>

	clearBitMask(DivIrqReg, 0x04);   // CRCIrq = 0
	setBitMask(FIFOLevelReg, 0x80);  // Clear the FIFO pointer

	//Writing data to the FIFO.
	for (i = 0; i < len; i++) {
 7b4:	cc 15       	cp	r28, r12
 7b6:	dd 05       	cpc	r29, r13
 7b8:	c9 f7       	brne	.-14     	; 0x7ac <_ZN7MFRC52212calculateCRCEPhiS0_+0x36>
		writeToRegister(FIFODataReg, data[i]);
	}
	writeToRegister(CommandReg, MFRC522_CALCCRC);
 7ba:	43 e0       	ldi	r20, 0x03	; 3
 7bc:	61 e0       	ldi	r22, 0x01	; 1
 7be:	c8 01       	movw	r24, r16
 7c0:	8a dd       	rcall	.-1260   	; 0x2d6 <_ZN7MFRC52215writeToRegisterEhh>

	// Wait for the CRC calculation to complete.
	i = 0xFF;
	do {
		n = readFromRegister(DivIrqReg);
 7c2:	65 e0       	ldi	r22, 0x05	; 5
 7c4:	c8 01       	movw	r24, r16
 7c6:	b3 dd       	rcall	.-1178   	; 0x32e <_ZN7MFRC52216readFromRegisterEh>
 7c8:	ce ef       	ldi	r28, 0xFE	; 254
 7ca:	d0 e0       	ldi	r29, 0x00	; 0
 7cc:	05 c0       	rjmp	.+10     	; 0x7d8 <_ZN7MFRC52212calculateCRCEPhiS0_+0x62>
 7ce:	65 e0       	ldi	r22, 0x05	; 5
 7d0:	c8 01       	movw	r24, r16
 7d2:	ad dd       	rcall	.-1190   	; 0x32e <_ZN7MFRC52216readFromRegisterEh>
 7d4:	21 97       	sbiw	r28, 0x01	; 1
		i--;
	} while ((i != 0) && !(n & 0x04));  //CRCIrq = 1
 7d6:	11 f0       	breq	.+4      	; 0x7dc <_ZN7MFRC52212calculateCRCEPhiS0_+0x66>
 7d8:	82 ff       	sbrs	r24, 2
 7da:	f9 cf       	rjmp	.-14     	; 0x7ce <_ZN7MFRC52212calculateCRCEPhiS0_+0x58>

	// Read the result from the CRC calculation.
	result[0] = readFromRegister(CRCResultRegL);
 7dc:	62 e2       	ldi	r22, 0x22	; 34
 7de:	c8 01       	movw	r24, r16
 7e0:	a6 dd       	rcall	.-1204   	; 0x32e <_ZN7MFRC52216readFromRegisterEh>
 7e2:	f7 01       	movw	r30, r14
 7e4:	80 83       	st	Z, r24
	result[1] = readFromRegister(CRCResultRegM);
 7e6:	61 e2       	ldi	r22, 0x21	; 33
 7e8:	c8 01       	movw	r24, r16
 7ea:	a1 dd       	rcall	.-1214   	; 0x32e <_ZN7MFRC52216readFromRegisterEh>
 7ec:	f7 01       	movw	r30, r14
 7ee:	81 83       	std	Z+1, r24	; 0x01
}
 7f0:	df 91       	pop	r29
 7f2:	cf 91       	pop	r28
 7f4:	1f 91       	pop	r17
 7f6:	0f 91       	pop	r16
 7f8:	ff 90       	pop	r15
 7fa:	ef 90       	pop	r14
 7fc:	df 90       	pop	r13
 7fe:	cf 90       	pop	r12
 800:	bf 90       	pop	r11
 802:	af 90       	pop	r10
 804:	08 95       	ret

00000806 <_ZN7MFRC5229selectTagEPh>:

uint8_t MFRC522::selectTag(uint8_t *serial) {
 806:	cf 92       	push	r12
 808:	df 92       	push	r13
 80a:	ef 92       	push	r14
 80c:	ff 92       	push	r15
 80e:	0f 93       	push	r16
 810:	1f 93       	push	r17
 812:	cf 93       	push	r28
 814:	df 93       	push	r29
 816:	cd b7       	in	r28, 0x3d	; 61
 818:	de b7       	in	r29, 0x3e	; 62
 81a:	2b 97       	sbiw	r28, 0x0b	; 11
 81c:	0f b6       	in	r0, 0x3f	; 63
 81e:	f8 94       	cli
 820:	de bf       	out	0x3e, r29	; 62
 822:	0f be       	out	0x3f, r0	; 63
 824:	cd bf       	out	0x3d, r28	; 61
 826:	6c 01       	movw	r12, r24
	int i, status, len;
	uint8_t sak;
	uint8_t buffer[9];

	buffer[0] = MF1_SELECTTAG;
 828:	83 e9       	ldi	r24, 0x93	; 147
 82a:	8b 83       	std	Y+3, r24	; 0x03
	buffer[1] = 0x70;
 82c:	80 e7       	ldi	r24, 0x70	; 112
 82e:	8c 83       	std	Y+4, r24	; 0x04
 830:	a6 2f       	mov	r26, r22
 832:	b7 2f       	mov	r27, r23
 834:	fe 01       	movw	r30, r28
 836:	35 96       	adiw	r30, 0x05	; 5
 838:	9e 01       	movw	r18, r28
 83a:	26 5f       	subi	r18, 0xF6	; 246
 83c:	3f 4f       	sbci	r19, 0xFF	; 255
	for (i = 0; i < 5; i++) {
		buffer[i+2] = serial[i];
 83e:	8d 91       	ld	r24, X+
 840:	81 93       	st	Z+, r24
	uint8_t sak;
	uint8_t buffer[9];

	buffer[0] = MF1_SELECTTAG;
	buffer[1] = 0x70;
	for (i = 0; i < 5; i++) {
 842:	e2 17       	cp	r30, r18
 844:	f3 07       	cpc	r31, r19
 846:	d9 f7       	brne	.-10     	; 0x83e <_ZN7MFRC5229selectTagEPh+0x38>
		buffer[i+2] = serial[i];
	}
	calculateCRC(buffer, 7, &buffer[7]);
 848:	9e 01       	movw	r18, r28
 84a:	26 5f       	subi	r18, 0xF6	; 246
 84c:	3f 4f       	sbci	r19, 0xFF	; 255
 84e:	47 e0       	ldi	r20, 0x07	; 7
 850:	50 e0       	ldi	r21, 0x00	; 0
 852:	be 01       	movw	r22, r28
 854:	6d 5f       	subi	r22, 0xFD	; 253
 856:	7f 4f       	sbci	r23, 0xFF	; 255
 858:	c6 01       	movw	r24, r12
 85a:	8d df       	rcall	.-230    	; 0x776 <_ZN7MFRC52212calculateCRCEPhiS0_>

	status = commandTag(MFRC522_TRANSCEIVE, buffer, 9, buffer, &len);
 85c:	ce 01       	movw	r24, r28
 85e:	01 96       	adiw	r24, 0x01	; 1
 860:	7c 01       	movw	r14, r24
 862:	8e 01       	movw	r16, r28
 864:	0d 5f       	subi	r16, 0xFD	; 253
 866:	1f 4f       	sbci	r17, 0xFF	; 255
 868:	29 e0       	ldi	r18, 0x09	; 9
 86a:	30 e0       	ldi	r19, 0x00	; 0
 86c:	a8 01       	movw	r20, r16
 86e:	6c e0       	ldi	r22, 0x0C	; 12
 870:	c6 01       	movw	r24, r12
 872:	df dd       	rcall	.-1090   	; 0x432 <_ZN7MFRC52210commandTagEhPhiS0_Pi>

	if ((status == MI_OK) && (len == 0x18)) {
 874:	89 2b       	or	r24, r25
 876:	31 f4       	brne	.+12     	; 0x884 <_ZN7MFRC5229selectTagEPh+0x7e>
 878:	89 81       	ldd	r24, Y+1	; 0x01
 87a:	9a 81       	ldd	r25, Y+2	; 0x02
 87c:	48 97       	sbiw	r24, 0x18	; 24
 87e:	21 f4       	brne	.+8      	; 0x888 <_ZN7MFRC5229selectTagEPh+0x82>
		sak = buffer[0];
 880:	8b 81       	ldd	r24, Y+3	; 0x03
 882:	03 c0       	rjmp	.+6      	; 0x88a <_ZN7MFRC5229selectTagEPh+0x84>
	}
	else {
		sak = 0;
 884:	80 e0       	ldi	r24, 0x00	; 0
 886:	01 c0       	rjmp	.+2      	; 0x88a <_ZN7MFRC5229selectTagEPh+0x84>
 888:	80 e0       	ldi	r24, 0x00	; 0
	}

	return sak;
}
 88a:	2b 96       	adiw	r28, 0x0b	; 11
 88c:	0f b6       	in	r0, 0x3f	; 63
 88e:	f8 94       	cli
 890:	de bf       	out	0x3e, r29	; 62
 892:	0f be       	out	0x3f, r0	; 63
 894:	cd bf       	out	0x3d, r28	; 61
 896:	df 91       	pop	r29
 898:	cf 91       	pop	r28
 89a:	1f 91       	pop	r17
 89c:	0f 91       	pop	r16
 89e:	ff 90       	pop	r15
 8a0:	ef 90       	pop	r14
 8a2:	df 90       	pop	r13
 8a4:	cf 90       	pop	r12
 8a6:	08 95       	ret

000008a8 <_ZN7MFRC5227haltTagEv>:

int MFRC522::haltTag() {
 8a8:	cf 92       	push	r12
 8aa:	df 92       	push	r13
 8ac:	ef 92       	push	r14
 8ae:	ff 92       	push	r15
 8b0:	0f 93       	push	r16
 8b2:	1f 93       	push	r17
 8b4:	cf 93       	push	r28
 8b6:	df 93       	push	r29
 8b8:	00 d0       	rcall	.+0      	; 0x8ba <_ZN7MFRC5227haltTagEv+0x12>
 8ba:	00 d0       	rcall	.+0      	; 0x8bc <_ZN7MFRC5227haltTagEv+0x14>
 8bc:	00 d0       	rcall	.+0      	; 0x8be <_ZN7MFRC5227haltTagEv+0x16>
 8be:	cd b7       	in	r28, 0x3d	; 61
 8c0:	de b7       	in	r29, 0x3e	; 62
 8c2:	6c 01       	movw	r12, r24
	int status, len;
	uint8_t buffer[4];

	buffer[0] = MF1_HALT;
 8c4:	80 e5       	ldi	r24, 0x50	; 80
 8c6:	8b 83       	std	Y+3, r24	; 0x03
	buffer[1] = 0;
 8c8:	1c 82       	std	Y+4, r1	; 0x04
	calculateCRC(buffer, 2, &buffer[2]);
 8ca:	9e 01       	movw	r18, r28
 8cc:	2b 5f       	subi	r18, 0xFB	; 251
 8ce:	3f 4f       	sbci	r19, 0xFF	; 255
 8d0:	42 e0       	ldi	r20, 0x02	; 2
 8d2:	50 e0       	ldi	r21, 0x00	; 0
 8d4:	be 01       	movw	r22, r28
 8d6:	6d 5f       	subi	r22, 0xFD	; 253
 8d8:	7f 4f       	sbci	r23, 0xFF	; 255
 8da:	c6 01       	movw	r24, r12
 8dc:	4c df       	rcall	.-360    	; 0x776 <_ZN7MFRC52212calculateCRCEPhiS0_>
	status = commandTag(MFRC522_TRANSCEIVE, buffer, 4, buffer, &len);
 8de:	ce 01       	movw	r24, r28
 8e0:	01 96       	adiw	r24, 0x01	; 1
 8e2:	7c 01       	movw	r14, r24
 8e4:	8e 01       	movw	r16, r28
 8e6:	0d 5f       	subi	r16, 0xFD	; 253
 8e8:	1f 4f       	sbci	r17, 0xFF	; 255
 8ea:	24 e0       	ldi	r18, 0x04	; 4
 8ec:	30 e0       	ldi	r19, 0x00	; 0
 8ee:	a8 01       	movw	r20, r16
 8f0:	6c e0       	ldi	r22, 0x0C	; 12
 8f2:	c6 01       	movw	r24, r12
 8f4:	9e dd       	rcall	.-1220   	; 0x432 <_ZN7MFRC52210commandTagEhPhiS0_Pi>
 8f6:	8c 01       	movw	r16, r24
	clearBitMask(Status2Reg, 0x08);  // turn off encryption
 8f8:	48 e0       	ldi	r20, 0x08	; 8
 8fa:	68 e0       	ldi	r22, 0x08	; 8
 8fc:	c6 01       	movw	r24, r12
 8fe:	57 dd       	rcall	.-1362   	; 0x3ae <_ZN7MFRC52212clearBitMaskEhh>
	return status;
 900:	c8 01       	movw	r24, r16
 902:	26 96       	adiw	r28, 0x06	; 6
 904:	0f b6       	in	r0, 0x3f	; 63
 906:	f8 94       	cli
 908:	de bf       	out	0x3e, r29	; 62
 90a:	0f be       	out	0x3f, r0	; 63
 90c:	cd bf       	out	0x3d, r28	; 61
 90e:	df 91       	pop	r29
 910:	cf 91       	pop	r28
 912:	1f 91       	pop	r17
 914:	0f 91       	pop	r16
 916:	ff 90       	pop	r15
 918:	ef 90       	pop	r14
 91a:	df 90       	pop	r13
 91c:	cf 90       	pop	r12
 91e:	08 95       	ret

00000920 <__divmodhi4>:
 920:	97 fb       	bst	r25, 7
 922:	07 2e       	mov	r0, r23
 924:	16 f4       	brtc	.+4      	; 0x92a <__divmodhi4+0xa>
 926:	00 94       	com	r0
 928:	06 d0       	rcall	.+12     	; 0x936 <__divmodhi4_neg1>
 92a:	77 fd       	sbrc	r23, 7
 92c:	08 d0       	rcall	.+16     	; 0x93e <__divmodhi4_neg2>
 92e:	0b d0       	rcall	.+22     	; 0x946 <__udivmodhi4>
 930:	07 fc       	sbrc	r0, 7
 932:	05 d0       	rcall	.+10     	; 0x93e <__divmodhi4_neg2>
 934:	3e f4       	brtc	.+14     	; 0x944 <__divmodhi4_exit>

00000936 <__divmodhi4_neg1>:
 936:	90 95       	com	r25
 938:	81 95       	neg	r24
 93a:	9f 4f       	sbci	r25, 0xFF	; 255
 93c:	08 95       	ret

0000093e <__divmodhi4_neg2>:
 93e:	70 95       	com	r23
 940:	61 95       	neg	r22
 942:	7f 4f       	sbci	r23, 0xFF	; 255

00000944 <__divmodhi4_exit>:
 944:	08 95       	ret

00000946 <__udivmodhi4>:
 946:	aa 1b       	sub	r26, r26
 948:	bb 1b       	sub	r27, r27
 94a:	51 e1       	ldi	r21, 0x11	; 17
 94c:	07 c0       	rjmp	.+14     	; 0x95c <__udivmodhi4_ep>

0000094e <__udivmodhi4_loop>:
 94e:	aa 1f       	adc	r26, r26
 950:	bb 1f       	adc	r27, r27
 952:	a6 17       	cp	r26, r22
 954:	b7 07       	cpc	r27, r23
 956:	10 f0       	brcs	.+4      	; 0x95c <__udivmodhi4_ep>
 958:	a6 1b       	sub	r26, r22
 95a:	b7 0b       	sbc	r27, r23

0000095c <__udivmodhi4_ep>:
 95c:	88 1f       	adc	r24, r24
 95e:	99 1f       	adc	r25, r25
 960:	5a 95       	dec	r21
 962:	a9 f7       	brne	.-22     	; 0x94e <__udivmodhi4_loop>
 964:	80 95       	com	r24
 966:	90 95       	com	r25
 968:	bc 01       	movw	r22, r24
 96a:	cd 01       	movw	r24, r26
 96c:	08 95       	ret

0000096e <__tablejump2__>:
 96e:	ee 0f       	add	r30, r30
 970:	ff 1f       	adc	r31, r31
 972:	05 90       	lpm	r0, Z+
 974:	f4 91       	lpm	r31, Z
 976:	e0 2d       	mov	r30, r0
 978:	09 94       	ijmp

0000097a <sprintf>:
 97a:	ae e0       	ldi	r26, 0x0E	; 14
 97c:	b0 e0       	ldi	r27, 0x00	; 0
 97e:	e2 ec       	ldi	r30, 0xC2	; 194
 980:	f4 e0       	ldi	r31, 0x04	; 4
 982:	bf c2       	rjmp	.+1406   	; 0xf02 <__prologue_saves__+0x1c>
 984:	0d 89       	ldd	r16, Y+21	; 0x15
 986:	1e 89       	ldd	r17, Y+22	; 0x16
 988:	86 e0       	ldi	r24, 0x06	; 6
 98a:	8c 83       	std	Y+4, r24	; 0x04
 98c:	1a 83       	std	Y+2, r17	; 0x02
 98e:	09 83       	std	Y+1, r16	; 0x01
 990:	8f ef       	ldi	r24, 0xFF	; 255
 992:	9f e7       	ldi	r25, 0x7F	; 127
 994:	9e 83       	std	Y+6, r25	; 0x06
 996:	8d 83       	std	Y+5, r24	; 0x05
 998:	ae 01       	movw	r20, r28
 99a:	47 5e       	subi	r20, 0xE7	; 231
 99c:	5f 4f       	sbci	r21, 0xFF	; 255
 99e:	6f 89       	ldd	r22, Y+23	; 0x17
 9a0:	78 8d       	ldd	r23, Y+24	; 0x18
 9a2:	ce 01       	movw	r24, r28
 9a4:	01 96       	adiw	r24, 0x01	; 1
 9a6:	08 d0       	rcall	.+16     	; 0x9b8 <vfprintf>
 9a8:	ef 81       	ldd	r30, Y+7	; 0x07
 9aa:	f8 85       	ldd	r31, Y+8	; 0x08
 9ac:	e0 0f       	add	r30, r16
 9ae:	f1 1f       	adc	r31, r17
 9b0:	10 82       	st	Z, r1
 9b2:	2e 96       	adiw	r28, 0x0e	; 14
 9b4:	e4 e0       	ldi	r30, 0x04	; 4
 9b6:	c1 c2       	rjmp	.+1410   	; 0xf3a <__epilogue_restores__+0x1c>

000009b8 <vfprintf>:
 9b8:	ab e0       	ldi	r26, 0x0B	; 11
 9ba:	b0 e0       	ldi	r27, 0x00	; 0
 9bc:	e1 ee       	ldi	r30, 0xE1	; 225
 9be:	f4 e0       	ldi	r31, 0x04	; 4
 9c0:	92 c2       	rjmp	.+1316   	; 0xee6 <__prologue_saves__>
 9c2:	6c 01       	movw	r12, r24
 9c4:	7b 01       	movw	r14, r22
 9c6:	8a 01       	movw	r16, r20
 9c8:	fc 01       	movw	r30, r24
 9ca:	17 82       	std	Z+7, r1	; 0x07
 9cc:	16 82       	std	Z+6, r1	; 0x06
 9ce:	83 81       	ldd	r24, Z+3	; 0x03
 9d0:	81 ff       	sbrs	r24, 1
 9d2:	bf c1       	rjmp	.+894    	; 0xd52 <vfprintf+0x39a>
 9d4:	ce 01       	movw	r24, r28
 9d6:	01 96       	adiw	r24, 0x01	; 1
 9d8:	3c 01       	movw	r6, r24
 9da:	f6 01       	movw	r30, r12
 9dc:	93 81       	ldd	r25, Z+3	; 0x03
 9de:	f7 01       	movw	r30, r14
 9e0:	93 fd       	sbrc	r25, 3
 9e2:	85 91       	lpm	r24, Z+
 9e4:	93 ff       	sbrs	r25, 3
 9e6:	81 91       	ld	r24, Z+
 9e8:	7f 01       	movw	r14, r30
 9ea:	88 23       	and	r24, r24
 9ec:	09 f4       	brne	.+2      	; 0x9f0 <vfprintf+0x38>
 9ee:	ad c1       	rjmp	.+858    	; 0xd4a <vfprintf+0x392>
 9f0:	85 32       	cpi	r24, 0x25	; 37
 9f2:	39 f4       	brne	.+14     	; 0xa02 <vfprintf+0x4a>
 9f4:	93 fd       	sbrc	r25, 3
 9f6:	85 91       	lpm	r24, Z+
 9f8:	93 ff       	sbrs	r25, 3
 9fa:	81 91       	ld	r24, Z+
 9fc:	7f 01       	movw	r14, r30
 9fe:	85 32       	cpi	r24, 0x25	; 37
 a00:	21 f4       	brne	.+8      	; 0xa0a <vfprintf+0x52>
 a02:	b6 01       	movw	r22, r12
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	c0 d1       	rcall	.+896    	; 0xd88 <fputc>
 a08:	e8 cf       	rjmp	.-48     	; 0x9da <vfprintf+0x22>
 a0a:	91 2c       	mov	r9, r1
 a0c:	21 2c       	mov	r2, r1
 a0e:	31 2c       	mov	r3, r1
 a10:	ff e1       	ldi	r31, 0x1F	; 31
 a12:	f3 15       	cp	r31, r3
 a14:	d8 f0       	brcs	.+54     	; 0xa4c <vfprintf+0x94>
 a16:	8b 32       	cpi	r24, 0x2B	; 43
 a18:	79 f0       	breq	.+30     	; 0xa38 <vfprintf+0x80>
 a1a:	38 f4       	brcc	.+14     	; 0xa2a <vfprintf+0x72>
 a1c:	80 32       	cpi	r24, 0x20	; 32
 a1e:	79 f0       	breq	.+30     	; 0xa3e <vfprintf+0x86>
 a20:	83 32       	cpi	r24, 0x23	; 35
 a22:	a1 f4       	brne	.+40     	; 0xa4c <vfprintf+0x94>
 a24:	23 2d       	mov	r18, r3
 a26:	20 61       	ori	r18, 0x10	; 16
 a28:	1d c0       	rjmp	.+58     	; 0xa64 <vfprintf+0xac>
 a2a:	8d 32       	cpi	r24, 0x2D	; 45
 a2c:	61 f0       	breq	.+24     	; 0xa46 <vfprintf+0x8e>
 a2e:	80 33       	cpi	r24, 0x30	; 48
 a30:	69 f4       	brne	.+26     	; 0xa4c <vfprintf+0x94>
 a32:	23 2d       	mov	r18, r3
 a34:	21 60       	ori	r18, 0x01	; 1
 a36:	16 c0       	rjmp	.+44     	; 0xa64 <vfprintf+0xac>
 a38:	83 2d       	mov	r24, r3
 a3a:	82 60       	ori	r24, 0x02	; 2
 a3c:	38 2e       	mov	r3, r24
 a3e:	e3 2d       	mov	r30, r3
 a40:	e4 60       	ori	r30, 0x04	; 4
 a42:	3e 2e       	mov	r3, r30
 a44:	2a c0       	rjmp	.+84     	; 0xa9a <vfprintf+0xe2>
 a46:	f3 2d       	mov	r31, r3
 a48:	f8 60       	ori	r31, 0x08	; 8
 a4a:	1d c0       	rjmp	.+58     	; 0xa86 <vfprintf+0xce>
 a4c:	37 fc       	sbrc	r3, 7
 a4e:	2d c0       	rjmp	.+90     	; 0xaaa <vfprintf+0xf2>
 a50:	20 ed       	ldi	r18, 0xD0	; 208
 a52:	28 0f       	add	r18, r24
 a54:	2a 30       	cpi	r18, 0x0A	; 10
 a56:	40 f0       	brcs	.+16     	; 0xa68 <vfprintf+0xb0>
 a58:	8e 32       	cpi	r24, 0x2E	; 46
 a5a:	b9 f4       	brne	.+46     	; 0xa8a <vfprintf+0xd2>
 a5c:	36 fc       	sbrc	r3, 6
 a5e:	75 c1       	rjmp	.+746    	; 0xd4a <vfprintf+0x392>
 a60:	23 2d       	mov	r18, r3
 a62:	20 64       	ori	r18, 0x40	; 64
 a64:	32 2e       	mov	r3, r18
 a66:	19 c0       	rjmp	.+50     	; 0xa9a <vfprintf+0xe2>
 a68:	36 fe       	sbrs	r3, 6
 a6a:	06 c0       	rjmp	.+12     	; 0xa78 <vfprintf+0xc0>
 a6c:	8a e0       	ldi	r24, 0x0A	; 10
 a6e:	98 9e       	mul	r9, r24
 a70:	20 0d       	add	r18, r0
 a72:	11 24       	eor	r1, r1
 a74:	92 2e       	mov	r9, r18
 a76:	11 c0       	rjmp	.+34     	; 0xa9a <vfprintf+0xe2>
 a78:	ea e0       	ldi	r30, 0x0A	; 10
 a7a:	2e 9e       	mul	r2, r30
 a7c:	20 0d       	add	r18, r0
 a7e:	11 24       	eor	r1, r1
 a80:	22 2e       	mov	r2, r18
 a82:	f3 2d       	mov	r31, r3
 a84:	f0 62       	ori	r31, 0x20	; 32
 a86:	3f 2e       	mov	r3, r31
 a88:	08 c0       	rjmp	.+16     	; 0xa9a <vfprintf+0xe2>
 a8a:	8c 36       	cpi	r24, 0x6C	; 108
 a8c:	21 f4       	brne	.+8      	; 0xa96 <vfprintf+0xde>
 a8e:	83 2d       	mov	r24, r3
 a90:	80 68       	ori	r24, 0x80	; 128
 a92:	38 2e       	mov	r3, r24
 a94:	02 c0       	rjmp	.+4      	; 0xa9a <vfprintf+0xe2>
 a96:	88 36       	cpi	r24, 0x68	; 104
 a98:	41 f4       	brne	.+16     	; 0xaaa <vfprintf+0xf2>
 a9a:	f7 01       	movw	r30, r14
 a9c:	93 fd       	sbrc	r25, 3
 a9e:	85 91       	lpm	r24, Z+
 aa0:	93 ff       	sbrs	r25, 3
 aa2:	81 91       	ld	r24, Z+
 aa4:	7f 01       	movw	r14, r30
 aa6:	81 11       	cpse	r24, r1
 aa8:	b3 cf       	rjmp	.-154    	; 0xa10 <vfprintf+0x58>
 aaa:	98 2f       	mov	r25, r24
 aac:	9f 7d       	andi	r25, 0xDF	; 223
 aae:	95 54       	subi	r25, 0x45	; 69
 ab0:	93 30       	cpi	r25, 0x03	; 3
 ab2:	28 f4       	brcc	.+10     	; 0xabe <vfprintf+0x106>
 ab4:	0c 5f       	subi	r16, 0xFC	; 252
 ab6:	1f 4f       	sbci	r17, 0xFF	; 255
 ab8:	9f e3       	ldi	r25, 0x3F	; 63
 aba:	99 83       	std	Y+1, r25	; 0x01
 abc:	0d c0       	rjmp	.+26     	; 0xad8 <vfprintf+0x120>
 abe:	83 36       	cpi	r24, 0x63	; 99
 ac0:	31 f0       	breq	.+12     	; 0xace <vfprintf+0x116>
 ac2:	83 37       	cpi	r24, 0x73	; 115
 ac4:	71 f0       	breq	.+28     	; 0xae2 <vfprintf+0x12a>
 ac6:	83 35       	cpi	r24, 0x53	; 83
 ac8:	09 f0       	breq	.+2      	; 0xacc <vfprintf+0x114>
 aca:	55 c0       	rjmp	.+170    	; 0xb76 <vfprintf+0x1be>
 acc:	20 c0       	rjmp	.+64     	; 0xb0e <vfprintf+0x156>
 ace:	f8 01       	movw	r30, r16
 ad0:	80 81       	ld	r24, Z
 ad2:	89 83       	std	Y+1, r24	; 0x01
 ad4:	0e 5f       	subi	r16, 0xFE	; 254
 ad6:	1f 4f       	sbci	r17, 0xFF	; 255
 ad8:	88 24       	eor	r8, r8
 ada:	83 94       	inc	r8
 adc:	91 2c       	mov	r9, r1
 ade:	53 01       	movw	r10, r6
 ae0:	12 c0       	rjmp	.+36     	; 0xb06 <vfprintf+0x14e>
 ae2:	28 01       	movw	r4, r16
 ae4:	f2 e0       	ldi	r31, 0x02	; 2
 ae6:	4f 0e       	add	r4, r31
 ae8:	51 1c       	adc	r5, r1
 aea:	f8 01       	movw	r30, r16
 aec:	a0 80       	ld	r10, Z
 aee:	b1 80       	ldd	r11, Z+1	; 0x01
 af0:	36 fe       	sbrs	r3, 6
 af2:	03 c0       	rjmp	.+6      	; 0xafa <vfprintf+0x142>
 af4:	69 2d       	mov	r22, r9
 af6:	70 e0       	ldi	r23, 0x00	; 0
 af8:	02 c0       	rjmp	.+4      	; 0xafe <vfprintf+0x146>
 afa:	6f ef       	ldi	r22, 0xFF	; 255
 afc:	7f ef       	ldi	r23, 0xFF	; 255
 afe:	c5 01       	movw	r24, r10
 b00:	38 d1       	rcall	.+624    	; 0xd72 <strnlen>
 b02:	4c 01       	movw	r8, r24
 b04:	82 01       	movw	r16, r4
 b06:	f3 2d       	mov	r31, r3
 b08:	ff 77       	andi	r31, 0x7F	; 127
 b0a:	3f 2e       	mov	r3, r31
 b0c:	15 c0       	rjmp	.+42     	; 0xb38 <vfprintf+0x180>
 b0e:	28 01       	movw	r4, r16
 b10:	22 e0       	ldi	r18, 0x02	; 2
 b12:	42 0e       	add	r4, r18
 b14:	51 1c       	adc	r5, r1
 b16:	f8 01       	movw	r30, r16
 b18:	a0 80       	ld	r10, Z
 b1a:	b1 80       	ldd	r11, Z+1	; 0x01
 b1c:	36 fe       	sbrs	r3, 6
 b1e:	03 c0       	rjmp	.+6      	; 0xb26 <vfprintf+0x16e>
 b20:	69 2d       	mov	r22, r9
 b22:	70 e0       	ldi	r23, 0x00	; 0
 b24:	02 c0       	rjmp	.+4      	; 0xb2a <vfprintf+0x172>
 b26:	6f ef       	ldi	r22, 0xFF	; 255
 b28:	7f ef       	ldi	r23, 0xFF	; 255
 b2a:	c5 01       	movw	r24, r10
 b2c:	17 d1       	rcall	.+558    	; 0xd5c <strnlen_P>
 b2e:	4c 01       	movw	r8, r24
 b30:	f3 2d       	mov	r31, r3
 b32:	f0 68       	ori	r31, 0x80	; 128
 b34:	3f 2e       	mov	r3, r31
 b36:	82 01       	movw	r16, r4
 b38:	33 fc       	sbrc	r3, 3
 b3a:	19 c0       	rjmp	.+50     	; 0xb6e <vfprintf+0x1b6>
 b3c:	82 2d       	mov	r24, r2
 b3e:	90 e0       	ldi	r25, 0x00	; 0
 b40:	88 16       	cp	r8, r24
 b42:	99 06       	cpc	r9, r25
 b44:	a0 f4       	brcc	.+40     	; 0xb6e <vfprintf+0x1b6>
 b46:	b6 01       	movw	r22, r12
 b48:	80 e2       	ldi	r24, 0x20	; 32
 b4a:	90 e0       	ldi	r25, 0x00	; 0
 b4c:	1d d1       	rcall	.+570    	; 0xd88 <fputc>
 b4e:	2a 94       	dec	r2
 b50:	f5 cf       	rjmp	.-22     	; 0xb3c <vfprintf+0x184>
 b52:	f5 01       	movw	r30, r10
 b54:	37 fc       	sbrc	r3, 7
 b56:	85 91       	lpm	r24, Z+
 b58:	37 fe       	sbrs	r3, 7
 b5a:	81 91       	ld	r24, Z+
 b5c:	5f 01       	movw	r10, r30
 b5e:	b6 01       	movw	r22, r12
 b60:	90 e0       	ldi	r25, 0x00	; 0
 b62:	12 d1       	rcall	.+548    	; 0xd88 <fputc>
 b64:	21 10       	cpse	r2, r1
 b66:	2a 94       	dec	r2
 b68:	21 e0       	ldi	r18, 0x01	; 1
 b6a:	82 1a       	sub	r8, r18
 b6c:	91 08       	sbc	r9, r1
 b6e:	81 14       	cp	r8, r1
 b70:	91 04       	cpc	r9, r1
 b72:	79 f7       	brne	.-34     	; 0xb52 <vfprintf+0x19a>
 b74:	e1 c0       	rjmp	.+450    	; 0xd38 <vfprintf+0x380>
 b76:	84 36       	cpi	r24, 0x64	; 100
 b78:	11 f0       	breq	.+4      	; 0xb7e <vfprintf+0x1c6>
 b7a:	89 36       	cpi	r24, 0x69	; 105
 b7c:	39 f5       	brne	.+78     	; 0xbcc <vfprintf+0x214>
 b7e:	f8 01       	movw	r30, r16
 b80:	37 fe       	sbrs	r3, 7
 b82:	07 c0       	rjmp	.+14     	; 0xb92 <vfprintf+0x1da>
 b84:	60 81       	ld	r22, Z
 b86:	71 81       	ldd	r23, Z+1	; 0x01
 b88:	82 81       	ldd	r24, Z+2	; 0x02
 b8a:	93 81       	ldd	r25, Z+3	; 0x03
 b8c:	0c 5f       	subi	r16, 0xFC	; 252
 b8e:	1f 4f       	sbci	r17, 0xFF	; 255
 b90:	08 c0       	rjmp	.+16     	; 0xba2 <vfprintf+0x1ea>
 b92:	60 81       	ld	r22, Z
 b94:	71 81       	ldd	r23, Z+1	; 0x01
 b96:	07 2e       	mov	r0, r23
 b98:	00 0c       	add	r0, r0
 b9a:	88 0b       	sbc	r24, r24
 b9c:	99 0b       	sbc	r25, r25
 b9e:	0e 5f       	subi	r16, 0xFE	; 254
 ba0:	1f 4f       	sbci	r17, 0xFF	; 255
 ba2:	f3 2d       	mov	r31, r3
 ba4:	ff 76       	andi	r31, 0x6F	; 111
 ba6:	3f 2e       	mov	r3, r31
 ba8:	97 ff       	sbrs	r25, 7
 baa:	09 c0       	rjmp	.+18     	; 0xbbe <vfprintf+0x206>
 bac:	90 95       	com	r25
 bae:	80 95       	com	r24
 bb0:	70 95       	com	r23
 bb2:	61 95       	neg	r22
 bb4:	7f 4f       	sbci	r23, 0xFF	; 255
 bb6:	8f 4f       	sbci	r24, 0xFF	; 255
 bb8:	9f 4f       	sbci	r25, 0xFF	; 255
 bba:	f0 68       	ori	r31, 0x80	; 128
 bbc:	3f 2e       	mov	r3, r31
 bbe:	2a e0       	ldi	r18, 0x0A	; 10
 bc0:	30 e0       	ldi	r19, 0x00	; 0
 bc2:	a3 01       	movw	r20, r6
 bc4:	1d d1       	rcall	.+570    	; 0xe00 <__ultoa_invert>
 bc6:	88 2e       	mov	r8, r24
 bc8:	86 18       	sub	r8, r6
 bca:	44 c0       	rjmp	.+136    	; 0xc54 <vfprintf+0x29c>
 bcc:	85 37       	cpi	r24, 0x75	; 117
 bce:	31 f4       	brne	.+12     	; 0xbdc <vfprintf+0x224>
 bd0:	23 2d       	mov	r18, r3
 bd2:	2f 7e       	andi	r18, 0xEF	; 239
 bd4:	b2 2e       	mov	r11, r18
 bd6:	2a e0       	ldi	r18, 0x0A	; 10
 bd8:	30 e0       	ldi	r19, 0x00	; 0
 bda:	25 c0       	rjmp	.+74     	; 0xc26 <vfprintf+0x26e>
 bdc:	93 2d       	mov	r25, r3
 bde:	99 7f       	andi	r25, 0xF9	; 249
 be0:	b9 2e       	mov	r11, r25
 be2:	8f 36       	cpi	r24, 0x6F	; 111
 be4:	c1 f0       	breq	.+48     	; 0xc16 <vfprintf+0x25e>
 be6:	18 f4       	brcc	.+6      	; 0xbee <vfprintf+0x236>
 be8:	88 35       	cpi	r24, 0x58	; 88
 bea:	79 f0       	breq	.+30     	; 0xc0a <vfprintf+0x252>
 bec:	ae c0       	rjmp	.+348    	; 0xd4a <vfprintf+0x392>
 bee:	80 37       	cpi	r24, 0x70	; 112
 bf0:	19 f0       	breq	.+6      	; 0xbf8 <vfprintf+0x240>
 bf2:	88 37       	cpi	r24, 0x78	; 120
 bf4:	21 f0       	breq	.+8      	; 0xbfe <vfprintf+0x246>
 bf6:	a9 c0       	rjmp	.+338    	; 0xd4a <vfprintf+0x392>
 bf8:	e9 2f       	mov	r30, r25
 bfa:	e0 61       	ori	r30, 0x10	; 16
 bfc:	be 2e       	mov	r11, r30
 bfe:	b4 fe       	sbrs	r11, 4
 c00:	0d c0       	rjmp	.+26     	; 0xc1c <vfprintf+0x264>
 c02:	fb 2d       	mov	r31, r11
 c04:	f4 60       	ori	r31, 0x04	; 4
 c06:	bf 2e       	mov	r11, r31
 c08:	09 c0       	rjmp	.+18     	; 0xc1c <vfprintf+0x264>
 c0a:	34 fe       	sbrs	r3, 4
 c0c:	0a c0       	rjmp	.+20     	; 0xc22 <vfprintf+0x26a>
 c0e:	29 2f       	mov	r18, r25
 c10:	26 60       	ori	r18, 0x06	; 6
 c12:	b2 2e       	mov	r11, r18
 c14:	06 c0       	rjmp	.+12     	; 0xc22 <vfprintf+0x26a>
 c16:	28 e0       	ldi	r18, 0x08	; 8
 c18:	30 e0       	ldi	r19, 0x00	; 0
 c1a:	05 c0       	rjmp	.+10     	; 0xc26 <vfprintf+0x26e>
 c1c:	20 e1       	ldi	r18, 0x10	; 16
 c1e:	30 e0       	ldi	r19, 0x00	; 0
 c20:	02 c0       	rjmp	.+4      	; 0xc26 <vfprintf+0x26e>
 c22:	20 e1       	ldi	r18, 0x10	; 16
 c24:	32 e0       	ldi	r19, 0x02	; 2
 c26:	f8 01       	movw	r30, r16
 c28:	b7 fe       	sbrs	r11, 7
 c2a:	07 c0       	rjmp	.+14     	; 0xc3a <vfprintf+0x282>
 c2c:	60 81       	ld	r22, Z
 c2e:	71 81       	ldd	r23, Z+1	; 0x01
 c30:	82 81       	ldd	r24, Z+2	; 0x02
 c32:	93 81       	ldd	r25, Z+3	; 0x03
 c34:	0c 5f       	subi	r16, 0xFC	; 252
 c36:	1f 4f       	sbci	r17, 0xFF	; 255
 c38:	06 c0       	rjmp	.+12     	; 0xc46 <vfprintf+0x28e>
 c3a:	60 81       	ld	r22, Z
 c3c:	71 81       	ldd	r23, Z+1	; 0x01
 c3e:	80 e0       	ldi	r24, 0x00	; 0
 c40:	90 e0       	ldi	r25, 0x00	; 0
 c42:	0e 5f       	subi	r16, 0xFE	; 254
 c44:	1f 4f       	sbci	r17, 0xFF	; 255
 c46:	a3 01       	movw	r20, r6
 c48:	db d0       	rcall	.+438    	; 0xe00 <__ultoa_invert>
 c4a:	88 2e       	mov	r8, r24
 c4c:	86 18       	sub	r8, r6
 c4e:	fb 2d       	mov	r31, r11
 c50:	ff 77       	andi	r31, 0x7F	; 127
 c52:	3f 2e       	mov	r3, r31
 c54:	36 fe       	sbrs	r3, 6
 c56:	0d c0       	rjmp	.+26     	; 0xc72 <vfprintf+0x2ba>
 c58:	23 2d       	mov	r18, r3
 c5a:	2e 7f       	andi	r18, 0xFE	; 254
 c5c:	a2 2e       	mov	r10, r18
 c5e:	89 14       	cp	r8, r9
 c60:	58 f4       	brcc	.+22     	; 0xc78 <vfprintf+0x2c0>
 c62:	34 fe       	sbrs	r3, 4
 c64:	0b c0       	rjmp	.+22     	; 0xc7c <vfprintf+0x2c4>
 c66:	32 fc       	sbrc	r3, 2
 c68:	09 c0       	rjmp	.+18     	; 0xc7c <vfprintf+0x2c4>
 c6a:	83 2d       	mov	r24, r3
 c6c:	8e 7e       	andi	r24, 0xEE	; 238
 c6e:	a8 2e       	mov	r10, r24
 c70:	05 c0       	rjmp	.+10     	; 0xc7c <vfprintf+0x2c4>
 c72:	b8 2c       	mov	r11, r8
 c74:	a3 2c       	mov	r10, r3
 c76:	03 c0       	rjmp	.+6      	; 0xc7e <vfprintf+0x2c6>
 c78:	b8 2c       	mov	r11, r8
 c7a:	01 c0       	rjmp	.+2      	; 0xc7e <vfprintf+0x2c6>
 c7c:	b9 2c       	mov	r11, r9
 c7e:	a4 fe       	sbrs	r10, 4
 c80:	0f c0       	rjmp	.+30     	; 0xca0 <vfprintf+0x2e8>
 c82:	fe 01       	movw	r30, r28
 c84:	e8 0d       	add	r30, r8
 c86:	f1 1d       	adc	r31, r1
 c88:	80 81       	ld	r24, Z
 c8a:	80 33       	cpi	r24, 0x30	; 48
 c8c:	21 f4       	brne	.+8      	; 0xc96 <vfprintf+0x2de>
 c8e:	9a 2d       	mov	r25, r10
 c90:	99 7e       	andi	r25, 0xE9	; 233
 c92:	a9 2e       	mov	r10, r25
 c94:	09 c0       	rjmp	.+18     	; 0xca8 <vfprintf+0x2f0>
 c96:	a2 fe       	sbrs	r10, 2
 c98:	06 c0       	rjmp	.+12     	; 0xca6 <vfprintf+0x2ee>
 c9a:	b3 94       	inc	r11
 c9c:	b3 94       	inc	r11
 c9e:	04 c0       	rjmp	.+8      	; 0xca8 <vfprintf+0x2f0>
 ca0:	8a 2d       	mov	r24, r10
 ca2:	86 78       	andi	r24, 0x86	; 134
 ca4:	09 f0       	breq	.+2      	; 0xca8 <vfprintf+0x2f0>
 ca6:	b3 94       	inc	r11
 ca8:	a3 fc       	sbrc	r10, 3
 caa:	10 c0       	rjmp	.+32     	; 0xccc <vfprintf+0x314>
 cac:	a0 fe       	sbrs	r10, 0
 cae:	06 c0       	rjmp	.+12     	; 0xcbc <vfprintf+0x304>
 cb0:	b2 14       	cp	r11, r2
 cb2:	80 f4       	brcc	.+32     	; 0xcd4 <vfprintf+0x31c>
 cb4:	28 0c       	add	r2, r8
 cb6:	92 2c       	mov	r9, r2
 cb8:	9b 18       	sub	r9, r11
 cba:	0d c0       	rjmp	.+26     	; 0xcd6 <vfprintf+0x31e>
 cbc:	b2 14       	cp	r11, r2
 cbe:	58 f4       	brcc	.+22     	; 0xcd6 <vfprintf+0x31e>
 cc0:	b6 01       	movw	r22, r12
 cc2:	80 e2       	ldi	r24, 0x20	; 32
 cc4:	90 e0       	ldi	r25, 0x00	; 0
 cc6:	60 d0       	rcall	.+192    	; 0xd88 <fputc>
 cc8:	b3 94       	inc	r11
 cca:	f8 cf       	rjmp	.-16     	; 0xcbc <vfprintf+0x304>
 ccc:	b2 14       	cp	r11, r2
 cce:	18 f4       	brcc	.+6      	; 0xcd6 <vfprintf+0x31e>
 cd0:	2b 18       	sub	r2, r11
 cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <vfprintf+0x320>
 cd4:	98 2c       	mov	r9, r8
 cd6:	21 2c       	mov	r2, r1
 cd8:	a4 fe       	sbrs	r10, 4
 cda:	0f c0       	rjmp	.+30     	; 0xcfa <vfprintf+0x342>
 cdc:	b6 01       	movw	r22, r12
 cde:	80 e3       	ldi	r24, 0x30	; 48
 ce0:	90 e0       	ldi	r25, 0x00	; 0
 ce2:	52 d0       	rcall	.+164    	; 0xd88 <fputc>
 ce4:	a2 fe       	sbrs	r10, 2
 ce6:	16 c0       	rjmp	.+44     	; 0xd14 <vfprintf+0x35c>
 ce8:	a1 fc       	sbrc	r10, 1
 cea:	03 c0       	rjmp	.+6      	; 0xcf2 <vfprintf+0x33a>
 cec:	88 e7       	ldi	r24, 0x78	; 120
 cee:	90 e0       	ldi	r25, 0x00	; 0
 cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <vfprintf+0x33e>
 cf2:	88 e5       	ldi	r24, 0x58	; 88
 cf4:	90 e0       	ldi	r25, 0x00	; 0
 cf6:	b6 01       	movw	r22, r12
 cf8:	0c c0       	rjmp	.+24     	; 0xd12 <vfprintf+0x35a>
 cfa:	8a 2d       	mov	r24, r10
 cfc:	86 78       	andi	r24, 0x86	; 134
 cfe:	51 f0       	breq	.+20     	; 0xd14 <vfprintf+0x35c>
 d00:	a1 fe       	sbrs	r10, 1
 d02:	02 c0       	rjmp	.+4      	; 0xd08 <vfprintf+0x350>
 d04:	8b e2       	ldi	r24, 0x2B	; 43
 d06:	01 c0       	rjmp	.+2      	; 0xd0a <vfprintf+0x352>
 d08:	80 e2       	ldi	r24, 0x20	; 32
 d0a:	a7 fc       	sbrc	r10, 7
 d0c:	8d e2       	ldi	r24, 0x2D	; 45
 d0e:	b6 01       	movw	r22, r12
 d10:	90 e0       	ldi	r25, 0x00	; 0
 d12:	3a d0       	rcall	.+116    	; 0xd88 <fputc>
 d14:	89 14       	cp	r8, r9
 d16:	30 f4       	brcc	.+12     	; 0xd24 <vfprintf+0x36c>
 d18:	b6 01       	movw	r22, r12
 d1a:	80 e3       	ldi	r24, 0x30	; 48
 d1c:	90 e0       	ldi	r25, 0x00	; 0
 d1e:	34 d0       	rcall	.+104    	; 0xd88 <fputc>
 d20:	9a 94       	dec	r9
 d22:	f8 cf       	rjmp	.-16     	; 0xd14 <vfprintf+0x35c>
 d24:	8a 94       	dec	r8
 d26:	f3 01       	movw	r30, r6
 d28:	e8 0d       	add	r30, r8
 d2a:	f1 1d       	adc	r31, r1
 d2c:	80 81       	ld	r24, Z
 d2e:	b6 01       	movw	r22, r12
 d30:	90 e0       	ldi	r25, 0x00	; 0
 d32:	2a d0       	rcall	.+84     	; 0xd88 <fputc>
 d34:	81 10       	cpse	r8, r1
 d36:	f6 cf       	rjmp	.-20     	; 0xd24 <vfprintf+0x36c>
 d38:	22 20       	and	r2, r2
 d3a:	09 f4       	brne	.+2      	; 0xd3e <vfprintf+0x386>
 d3c:	4e ce       	rjmp	.-868    	; 0x9da <vfprintf+0x22>
 d3e:	b6 01       	movw	r22, r12
 d40:	80 e2       	ldi	r24, 0x20	; 32
 d42:	90 e0       	ldi	r25, 0x00	; 0
 d44:	21 d0       	rcall	.+66     	; 0xd88 <fputc>
 d46:	2a 94       	dec	r2
 d48:	f7 cf       	rjmp	.-18     	; 0xd38 <vfprintf+0x380>
 d4a:	f6 01       	movw	r30, r12
 d4c:	86 81       	ldd	r24, Z+6	; 0x06
 d4e:	97 81       	ldd	r25, Z+7	; 0x07
 d50:	02 c0       	rjmp	.+4      	; 0xd56 <vfprintf+0x39e>
 d52:	8f ef       	ldi	r24, 0xFF	; 255
 d54:	9f ef       	ldi	r25, 0xFF	; 255
 d56:	2b 96       	adiw	r28, 0x0b	; 11
 d58:	e2 e1       	ldi	r30, 0x12	; 18
 d5a:	e1 c0       	rjmp	.+450    	; 0xf1e <__epilogue_restores__>

00000d5c <strnlen_P>:
 d5c:	fc 01       	movw	r30, r24
 d5e:	05 90       	lpm	r0, Z+
 d60:	61 50       	subi	r22, 0x01	; 1
 d62:	70 40       	sbci	r23, 0x00	; 0
 d64:	01 10       	cpse	r0, r1
 d66:	d8 f7       	brcc	.-10     	; 0xd5e <strnlen_P+0x2>
 d68:	80 95       	com	r24
 d6a:	90 95       	com	r25
 d6c:	8e 0f       	add	r24, r30
 d6e:	9f 1f       	adc	r25, r31
 d70:	08 95       	ret

00000d72 <strnlen>:
 d72:	fc 01       	movw	r30, r24
 d74:	61 50       	subi	r22, 0x01	; 1
 d76:	70 40       	sbci	r23, 0x00	; 0
 d78:	01 90       	ld	r0, Z+
 d7a:	01 10       	cpse	r0, r1
 d7c:	d8 f7       	brcc	.-10     	; 0xd74 <strnlen+0x2>
 d7e:	80 95       	com	r24
 d80:	90 95       	com	r25
 d82:	8e 0f       	add	r24, r30
 d84:	9f 1f       	adc	r25, r31
 d86:	08 95       	ret

00000d88 <fputc>:
 d88:	0f 93       	push	r16
 d8a:	1f 93       	push	r17
 d8c:	cf 93       	push	r28
 d8e:	df 93       	push	r29
 d90:	fb 01       	movw	r30, r22
 d92:	23 81       	ldd	r18, Z+3	; 0x03
 d94:	21 fd       	sbrc	r18, 1
 d96:	03 c0       	rjmp	.+6      	; 0xd9e <fputc+0x16>
 d98:	8f ef       	ldi	r24, 0xFF	; 255
 d9a:	9f ef       	ldi	r25, 0xFF	; 255
 d9c:	2c c0       	rjmp	.+88     	; 0xdf6 <fputc+0x6e>
 d9e:	22 ff       	sbrs	r18, 2
 da0:	16 c0       	rjmp	.+44     	; 0xdce <fputc+0x46>
 da2:	46 81       	ldd	r20, Z+6	; 0x06
 da4:	57 81       	ldd	r21, Z+7	; 0x07
 da6:	24 81       	ldd	r18, Z+4	; 0x04
 da8:	35 81       	ldd	r19, Z+5	; 0x05
 daa:	42 17       	cp	r20, r18
 dac:	53 07       	cpc	r21, r19
 dae:	44 f4       	brge	.+16     	; 0xdc0 <fputc+0x38>
 db0:	a0 81       	ld	r26, Z
 db2:	b1 81       	ldd	r27, Z+1	; 0x01
 db4:	9d 01       	movw	r18, r26
 db6:	2f 5f       	subi	r18, 0xFF	; 255
 db8:	3f 4f       	sbci	r19, 0xFF	; 255
 dba:	31 83       	std	Z+1, r19	; 0x01
 dbc:	20 83       	st	Z, r18
 dbe:	8c 93       	st	X, r24
 dc0:	26 81       	ldd	r18, Z+6	; 0x06
 dc2:	37 81       	ldd	r19, Z+7	; 0x07
 dc4:	2f 5f       	subi	r18, 0xFF	; 255
 dc6:	3f 4f       	sbci	r19, 0xFF	; 255
 dc8:	37 83       	std	Z+7, r19	; 0x07
 dca:	26 83       	std	Z+6, r18	; 0x06
 dcc:	14 c0       	rjmp	.+40     	; 0xdf6 <fputc+0x6e>
 dce:	8b 01       	movw	r16, r22
 dd0:	ec 01       	movw	r28, r24
 dd2:	fb 01       	movw	r30, r22
 dd4:	00 84       	ldd	r0, Z+8	; 0x08
 dd6:	f1 85       	ldd	r31, Z+9	; 0x09
 dd8:	e0 2d       	mov	r30, r0
 dda:	09 95       	icall
 ddc:	89 2b       	or	r24, r25
 dde:	e1 f6       	brne	.-72     	; 0xd98 <fputc+0x10>
 de0:	d8 01       	movw	r26, r16
 de2:	16 96       	adiw	r26, 0x06	; 6
 de4:	8d 91       	ld	r24, X+
 de6:	9c 91       	ld	r25, X
 de8:	17 97       	sbiw	r26, 0x07	; 7
 dea:	01 96       	adiw	r24, 0x01	; 1
 dec:	17 96       	adiw	r26, 0x07	; 7
 dee:	9c 93       	st	X, r25
 df0:	8e 93       	st	-X, r24
 df2:	16 97       	sbiw	r26, 0x06	; 6
 df4:	ce 01       	movw	r24, r28
 df6:	df 91       	pop	r29
 df8:	cf 91       	pop	r28
 dfa:	1f 91       	pop	r17
 dfc:	0f 91       	pop	r16
 dfe:	08 95       	ret

00000e00 <__ultoa_invert>:
 e00:	fa 01       	movw	r30, r20
 e02:	aa 27       	eor	r26, r26
 e04:	28 30       	cpi	r18, 0x08	; 8
 e06:	51 f1       	breq	.+84     	; 0xe5c <__ultoa_invert+0x5c>
 e08:	20 31       	cpi	r18, 0x10	; 16
 e0a:	81 f1       	breq	.+96     	; 0xe6c <__ultoa_invert+0x6c>
 e0c:	e8 94       	clt
 e0e:	6f 93       	push	r22
 e10:	6e 7f       	andi	r22, 0xFE	; 254
 e12:	6e 5f       	subi	r22, 0xFE	; 254
 e14:	7f 4f       	sbci	r23, 0xFF	; 255
 e16:	8f 4f       	sbci	r24, 0xFF	; 255
 e18:	9f 4f       	sbci	r25, 0xFF	; 255
 e1a:	af 4f       	sbci	r26, 0xFF	; 255
 e1c:	b1 e0       	ldi	r27, 0x01	; 1
 e1e:	3e d0       	rcall	.+124    	; 0xe9c <__ultoa_invert+0x9c>
 e20:	b4 e0       	ldi	r27, 0x04	; 4
 e22:	3c d0       	rcall	.+120    	; 0xe9c <__ultoa_invert+0x9c>
 e24:	67 0f       	add	r22, r23
 e26:	78 1f       	adc	r23, r24
 e28:	89 1f       	adc	r24, r25
 e2a:	9a 1f       	adc	r25, r26
 e2c:	a1 1d       	adc	r26, r1
 e2e:	68 0f       	add	r22, r24
 e30:	79 1f       	adc	r23, r25
 e32:	8a 1f       	adc	r24, r26
 e34:	91 1d       	adc	r25, r1
 e36:	a1 1d       	adc	r26, r1
 e38:	6a 0f       	add	r22, r26
 e3a:	71 1d       	adc	r23, r1
 e3c:	81 1d       	adc	r24, r1
 e3e:	91 1d       	adc	r25, r1
 e40:	a1 1d       	adc	r26, r1
 e42:	20 d0       	rcall	.+64     	; 0xe84 <__ultoa_invert+0x84>
 e44:	09 f4       	brne	.+2      	; 0xe48 <__ultoa_invert+0x48>
 e46:	68 94       	set
 e48:	3f 91       	pop	r19
 e4a:	2a e0       	ldi	r18, 0x0A	; 10
 e4c:	26 9f       	mul	r18, r22
 e4e:	11 24       	eor	r1, r1
 e50:	30 19       	sub	r19, r0
 e52:	30 5d       	subi	r19, 0xD0	; 208
 e54:	31 93       	st	Z+, r19
 e56:	de f6       	brtc	.-74     	; 0xe0e <__ultoa_invert+0xe>
 e58:	cf 01       	movw	r24, r30
 e5a:	08 95       	ret
 e5c:	46 2f       	mov	r20, r22
 e5e:	47 70       	andi	r20, 0x07	; 7
 e60:	40 5d       	subi	r20, 0xD0	; 208
 e62:	41 93       	st	Z+, r20
 e64:	b3 e0       	ldi	r27, 0x03	; 3
 e66:	0f d0       	rcall	.+30     	; 0xe86 <__ultoa_invert+0x86>
 e68:	c9 f7       	brne	.-14     	; 0xe5c <__ultoa_invert+0x5c>
 e6a:	f6 cf       	rjmp	.-20     	; 0xe58 <__ultoa_invert+0x58>
 e6c:	46 2f       	mov	r20, r22
 e6e:	4f 70       	andi	r20, 0x0F	; 15
 e70:	40 5d       	subi	r20, 0xD0	; 208
 e72:	4a 33       	cpi	r20, 0x3A	; 58
 e74:	18 f0       	brcs	.+6      	; 0xe7c <__ultoa_invert+0x7c>
 e76:	49 5d       	subi	r20, 0xD9	; 217
 e78:	31 fd       	sbrc	r19, 1
 e7a:	40 52       	subi	r20, 0x20	; 32
 e7c:	41 93       	st	Z+, r20
 e7e:	02 d0       	rcall	.+4      	; 0xe84 <__ultoa_invert+0x84>
 e80:	a9 f7       	brne	.-22     	; 0xe6c <__ultoa_invert+0x6c>
 e82:	ea cf       	rjmp	.-44     	; 0xe58 <__ultoa_invert+0x58>
 e84:	b4 e0       	ldi	r27, 0x04	; 4
 e86:	a6 95       	lsr	r26
 e88:	97 95       	ror	r25
 e8a:	87 95       	ror	r24
 e8c:	77 95       	ror	r23
 e8e:	67 95       	ror	r22
 e90:	ba 95       	dec	r27
 e92:	c9 f7       	brne	.-14     	; 0xe86 <__ultoa_invert+0x86>
 e94:	00 97       	sbiw	r24, 0x00	; 0
 e96:	61 05       	cpc	r22, r1
 e98:	71 05       	cpc	r23, r1
 e9a:	08 95       	ret
 e9c:	9b 01       	movw	r18, r22
 e9e:	ac 01       	movw	r20, r24
 ea0:	0a 2e       	mov	r0, r26
 ea2:	06 94       	lsr	r0
 ea4:	57 95       	ror	r21
 ea6:	47 95       	ror	r20
 ea8:	37 95       	ror	r19
 eaa:	27 95       	ror	r18
 eac:	ba 95       	dec	r27
 eae:	c9 f7       	brne	.-14     	; 0xea2 <__ultoa_invert+0xa2>
 eb0:	62 0f       	add	r22, r18
 eb2:	73 1f       	adc	r23, r19
 eb4:	84 1f       	adc	r24, r20
 eb6:	95 1f       	adc	r25, r21
 eb8:	a0 1d       	adc	r26, r0
 eba:	08 95       	ret

00000ebc <eeprom_read_byte>:
 ebc:	e1 99       	sbic	0x1c, 1	; 28
 ebe:	fe cf       	rjmp	.-4      	; 0xebc <eeprom_read_byte>
 ec0:	9f bb       	out	0x1f, r25	; 31
 ec2:	8e bb       	out	0x1e, r24	; 30
 ec4:	e0 9a       	sbi	0x1c, 0	; 28
 ec6:	99 27       	eor	r25, r25
 ec8:	8d b3       	in	r24, 0x1d	; 29
 eca:	08 95       	ret

00000ecc <eeprom_write_byte>:
 ecc:	26 2f       	mov	r18, r22

00000ece <eeprom_write_r18>:
 ece:	e1 99       	sbic	0x1c, 1	; 28
 ed0:	fe cf       	rjmp	.-4      	; 0xece <eeprom_write_r18>
 ed2:	9f bb       	out	0x1f, r25	; 31
 ed4:	8e bb       	out	0x1e, r24	; 30
 ed6:	2d bb       	out	0x1d, r18	; 29
 ed8:	0f b6       	in	r0, 0x3f	; 63
 eda:	f8 94       	cli
 edc:	e2 9a       	sbi	0x1c, 2	; 28
 ede:	e1 9a       	sbi	0x1c, 1	; 28
 ee0:	0f be       	out	0x3f, r0	; 63
 ee2:	01 96       	adiw	r24, 0x01	; 1
 ee4:	08 95       	ret

00000ee6 <__prologue_saves__>:
 ee6:	2f 92       	push	r2
 ee8:	3f 92       	push	r3
 eea:	4f 92       	push	r4
 eec:	5f 92       	push	r5
 eee:	6f 92       	push	r6
 ef0:	7f 92       	push	r7
 ef2:	8f 92       	push	r8
 ef4:	9f 92       	push	r9
 ef6:	af 92       	push	r10
 ef8:	bf 92       	push	r11
 efa:	cf 92       	push	r12
 efc:	df 92       	push	r13
 efe:	ef 92       	push	r14
 f00:	ff 92       	push	r15
 f02:	0f 93       	push	r16
 f04:	1f 93       	push	r17
 f06:	cf 93       	push	r28
 f08:	df 93       	push	r29
 f0a:	cd b7       	in	r28, 0x3d	; 61
 f0c:	de b7       	in	r29, 0x3e	; 62
 f0e:	ca 1b       	sub	r28, r26
 f10:	db 0b       	sbc	r29, r27
 f12:	0f b6       	in	r0, 0x3f	; 63
 f14:	f8 94       	cli
 f16:	de bf       	out	0x3e, r29	; 62
 f18:	0f be       	out	0x3f, r0	; 63
 f1a:	cd bf       	out	0x3d, r28	; 61
 f1c:	09 94       	ijmp

00000f1e <__epilogue_restores__>:
 f1e:	2a 88       	ldd	r2, Y+18	; 0x12
 f20:	39 88       	ldd	r3, Y+17	; 0x11
 f22:	48 88       	ldd	r4, Y+16	; 0x10
 f24:	5f 84       	ldd	r5, Y+15	; 0x0f
 f26:	6e 84       	ldd	r6, Y+14	; 0x0e
 f28:	7d 84       	ldd	r7, Y+13	; 0x0d
 f2a:	8c 84       	ldd	r8, Y+12	; 0x0c
 f2c:	9b 84       	ldd	r9, Y+11	; 0x0b
 f2e:	aa 84       	ldd	r10, Y+10	; 0x0a
 f30:	b9 84       	ldd	r11, Y+9	; 0x09
 f32:	c8 84       	ldd	r12, Y+8	; 0x08
 f34:	df 80       	ldd	r13, Y+7	; 0x07
 f36:	ee 80       	ldd	r14, Y+6	; 0x06
 f38:	fd 80       	ldd	r15, Y+5	; 0x05
 f3a:	0c 81       	ldd	r16, Y+4	; 0x04
 f3c:	1b 81       	ldd	r17, Y+3	; 0x03
 f3e:	aa 81       	ldd	r26, Y+2	; 0x02
 f40:	b9 81       	ldd	r27, Y+1	; 0x01
 f42:	ce 0f       	add	r28, r30
 f44:	d1 1d       	adc	r29, r1
 f46:	0f b6       	in	r0, 0x3f	; 63
 f48:	f8 94       	cli
 f4a:	de bf       	out	0x3e, r29	; 62
 f4c:	0f be       	out	0x3f, r0	; 63
 f4e:	cd bf       	out	0x3d, r28	; 61
 f50:	ed 01       	movw	r28, r26
 f52:	08 95       	ret

00000f54 <_exit>:
 f54:	f8 94       	cli

00000f56 <__stop_program>:
 f56:	ff cf       	rjmp	.-2      	; 0xf56 <__stop_program>
