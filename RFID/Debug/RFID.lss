
RFID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000f5a  00000fee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006c  0080006c  00000ffa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ffa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001058  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00001098  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001df9  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b8  00000000  00000000  00002fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b4c  00000000  00000000  00003971  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a0  00000000  00000000  000044c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b4  00000000  00000000  00004860  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013fe  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00006412  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	13 c0       	rjmp	.+38     	; 0x28 <__ctors_end>
   2:	37 c0       	rjmp	.+110    	; 0x72 <__bad_interrupt>
   4:	36 c0       	rjmp	.+108    	; 0x72 <__bad_interrupt>
   6:	35 c0       	rjmp	.+106    	; 0x72 <__bad_interrupt>
   8:	34 c0       	rjmp	.+104    	; 0x72 <__bad_interrupt>
   a:	33 c0       	rjmp	.+102    	; 0x72 <__bad_interrupt>
   c:	32 c0       	rjmp	.+100    	; 0x72 <__bad_interrupt>
   e:	31 c0       	rjmp	.+98     	; 0x72 <__bad_interrupt>
  10:	30 c0       	rjmp	.+96     	; 0x72 <__bad_interrupt>
  12:	2f c0       	rjmp	.+94     	; 0x72 <__bad_interrupt>
  14:	2e c0       	rjmp	.+92     	; 0x72 <__bad_interrupt>
  16:	2d c0       	rjmp	.+90     	; 0x72 <__bad_interrupt>
  18:	2c c0       	rjmp	.+88     	; 0x72 <__bad_interrupt>
  1a:	2b c0       	rjmp	.+86     	; 0x72 <__bad_interrupt>
  1c:	2a c0       	rjmp	.+84     	; 0x72 <__bad_interrupt>
  1e:	29 c0       	rjmp	.+82     	; 0x72 <__bad_interrupt>
  20:	28 c0       	rjmp	.+80     	; 0x72 <__bad_interrupt>
  22:	27 c0       	rjmp	.+78     	; 0x72 <__bad_interrupt>
  24:	26 c0       	rjmp	.+76     	; 0x72 <__bad_interrupt>

00000026 <__ctors_start>:
  26:	32 01       	movw	r6, r4

00000028 <__ctors_end>:
  28:	11 24       	eor	r1, r1
  2a:	1f be       	out	0x3f, r1	; 63
  2c:	cf e5       	ldi	r28, 0x5F	; 95
  2e:	d4 e0       	ldi	r29, 0x04	; 4
  30:	de bf       	out	0x3e, r29	; 62
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	10 e0       	ldi	r17, 0x00	; 0
  36:	a0 e6       	ldi	r26, 0x60	; 96
  38:	b0 e0       	ldi	r27, 0x00	; 0
  3a:	ea e5       	ldi	r30, 0x5A	; 90
  3c:	ff e0       	ldi	r31, 0x0F	; 15
  3e:	02 c0       	rjmp	.+4      	; 0x44 <__SREG__+0x5>
  40:	05 90       	lpm	r0, Z+
  42:	0d 92       	st	X+, r0
  44:	ac 36       	cpi	r26, 0x6C	; 108
  46:	b1 07       	cpc	r27, r17
  48:	d9 f7       	brne	.-10     	; 0x40 <__SREG__+0x1>

0000004a <__do_clear_bss>:
  4a:	20 e0       	ldi	r18, 0x00	; 0
  4c:	ac e6       	ldi	r26, 0x6C	; 108
  4e:	b0 e0       	ldi	r27, 0x00	; 0
  50:	01 c0       	rjmp	.+2      	; 0x54 <.do_clear_bss_start>

00000052 <.do_clear_bss_loop>:
  52:	1d 92       	st	X+, r1

00000054 <.do_clear_bss_start>:
  54:	a0 37       	cpi	r26, 0x70	; 112
  56:	b2 07       	cpc	r27, r18
  58:	e1 f7       	brne	.-8      	; 0x52 <.do_clear_bss_loop>

0000005a <__do_global_ctors>:
  5a:	10 e0       	ldi	r17, 0x00	; 0
  5c:	c4 e1       	ldi	r28, 0x14	; 20
  5e:	d0 e0       	ldi	r29, 0x00	; 0
  60:	03 c0       	rjmp	.+6      	; 0x68 <__do_global_ctors+0xe>
  62:	21 97       	sbiw	r28, 0x01	; 1
  64:	fe 01       	movw	r30, r28
  66:	84 d4       	rcall	.+2312   	; 0x970 <__tablejump2__>
  68:	c3 31       	cpi	r28, 0x13	; 19
  6a:	d1 07       	cpc	r29, r17
  6c:	d1 f7       	brne	.-12     	; 0x62 <__do_global_ctors+0x8>
  6e:	88 d0       	rcall	.+272    	; 0x180 <main>
  70:	72 c7       	rjmp	.+3812   	; 0xf56 <_exit>

00000072 <__bad_interrupt>:
  72:	c6 cf       	rjmp	.-116    	; 0x0 <__vectors>

00000074 <_Z9uart_initv>:
unsigned char USART_Receive( void ){
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) );
	/* Get and return received data from buffer */
	return UDR;
}
  74:	10 bc       	out	0x20, r1	; 32
  76:	8c e0       	ldi	r24, 0x0C	; 12
  78:	89 b9       	out	0x09, r24	; 9
  7a:	88 e1       	ldi	r24, 0x18	; 24
  7c:	8a b9       	out	0x0a, r24	; 10
  7e:	86 e8       	ldi	r24, 0x86	; 134
  80:	80 bd       	out	0x20, r24	; 32
  82:	08 95       	ret

00000084 <_Z14USART_Transmith>:
  84:	5d 9b       	sbis	0x0b, 5	; 11
  86:	fe cf       	rjmp	.-4      	; 0x84 <_Z14USART_Transmith>
  88:	8c b9       	out	0x0c, r24	; 12
  8a:	08 95       	ret

0000008c <_Z14SPI_MasterInitv>:
void SPI_MasterInit(void)
{
	DDRB |= (1<<SCK_PIN)|(1<<MOSI_PIN)|(1<<SS);
  8c:	87 b3       	in	r24, 0x17	; 23
  8e:	8c 62       	ori	r24, 0x2C	; 44
  90:	87 bb       	out	0x17, r24	; 23
	SPCR |=	(1<<SPE)|(1<<MSTR)|(1<<SPR0);
  92:	8d b1       	in	r24, 0x0d	; 13
  94:	81 65       	ori	r24, 0x51	; 81
  96:	8d b9       	out	0x0d, r24	; 13
	sbi(PORTB,SS);
  98:	c2 9a       	sbi	0x18, 2	; 24
  9a:	08 95       	ret

0000009c <_Z11_SendStringPc>:
}

void _SendString(char str[])
{
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	ec 01       	movw	r28, r24
	int i =0;
	
	while (str[i] != 0x00)
  a2:	88 81       	ld	r24, Y
  a4:	88 23       	and	r24, r24
  a6:	29 f0       	breq	.+10     	; 0xb2 <_Z11_SendStringPc+0x16>
  a8:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_Transmit(str[i]);
  aa:	ec df       	rcall	.-40     	; 0x84 <_Z14USART_Transmith>

void _SendString(char str[])
{
	int i =0;
	
	while (str[i] != 0x00)
  ac:	89 91       	ld	r24, Y+
  ae:	81 11       	cpse	r24, r1
  b0:	fc cf       	rjmp	.-8      	; 0xaa <_Z11_SendStringPc+0xe>
	{
		USART_Transmit(str[i]);
		i++;
	}
}
  b2:	df 91       	pop	r29
  b4:	cf 91       	pop	r28
  b6:	08 95       	ret

000000b8 <_Z10send_to_pcv>:

void send_to_pc(){
  b8:	af 92       	push	r10
  ba:	bf 92       	push	r11
  bc:	cf 92       	push	r12
  be:	df 92       	push	r13
  c0:	ef 92       	push	r14
  c2:	ff 92       	push	r15
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	00 d0       	rcall	.+0      	; 0xce <_Z10send_to_pcv+0x16>
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
	char temp[2];
	uint8_t c;
	for(int j = 1;j<MAX_EEPROM;j++){
		c=eeprom_read_byte((const uint8_t*)j);
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	f3 d6       	rcall	.+3558   	; 0xebe <eeprom_read_byte>
		sprintf(temp,"%02X", c);
  d8:	1f 92       	push	r1
  da:	8f 93       	push	r24
  dc:	80 e6       	ldi	r24, 0x60	; 96
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	9f 93       	push	r25
  e2:	8f 93       	push	r24
  e4:	ce 01       	movw	r24, r28
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	9f 93       	push	r25
  ea:	8f 93       	push	r24
  ec:	47 d4       	rcall	.+2190   	; 0x97c <sprintf>
		USART_Transmit(temp[0]);
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	c9 df       	rcall	.-110    	; 0x84 <_Z14USART_Transmith>
		USART_Transmit(temp[1]);
  f2:	8a 81       	ldd	r24, Y+2	; 0x02
  f4:	c7 df       	rcall	.-114    	; 0x84 <_Z14USART_Transmith>
  f6:	0f 90       	pop	r0
  f8:	0f 90       	pop	r0
  fa:	0f 90       	pop	r0
  fc:	0f 90       	pop	r0
  fe:	0f 90       	pop	r0
 100:	0f 90       	pop	r0
}

void send_to_pc(){
	char temp[2];
	uint8_t c;
	for(int j = 1;j<MAX_EEPROM;j++){
 102:	01 e0       	ldi	r16, 0x01	; 1
 104:	10 e0       	ldi	r17, 0x00	; 0
		c=eeprom_read_byte((const uint8_t*)j);
		sprintf(temp,"%02X", c);
 106:	0f 2e       	mov	r0, r31
 108:	f0 e6       	ldi	r31, 0x60	; 96
 10a:	ef 2e       	mov	r14, r31
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	ff 2e       	mov	r15, r31
 110:	f0 2d       	mov	r31, r0
 112:	ce 01       	movw	r24, r28
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	5c 01       	movw	r10, r24
		USART_Transmit(temp[0]);
		USART_Transmit(temp[1]);
		if(j % 5==0) USART_Transmit('\n');
 118:	0f 2e       	mov	r0, r31
 11a:	f5 e0       	ldi	r31, 0x05	; 5
 11c:	cf 2e       	mov	r12, r31
 11e:	d1 2c       	mov	r13, r1
 120:	f0 2d       	mov	r31, r0
 122:	1a c0       	rjmp	.+52     	; 0x158 <_Z10send_to_pcv+0xa0>

void send_to_pc(){
	char temp[2];
	uint8_t c;
	for(int j = 1;j<MAX_EEPROM;j++){
		c=eeprom_read_byte((const uint8_t*)j);
 124:	c8 01       	movw	r24, r16
 126:	cb d6       	rcall	.+3478   	; 0xebe <eeprom_read_byte>
		sprintf(temp,"%02X", c);
 128:	1f 92       	push	r1
 12a:	8f 93       	push	r24
 12c:	ff 92       	push	r15
 12e:	ef 92       	push	r14
 130:	bf 92       	push	r11
 132:	af 92       	push	r10
 134:	23 d4       	rcall	.+2118   	; 0x97c <sprintf>
		USART_Transmit(temp[0]);
 136:	89 81       	ldd	r24, Y+1	; 0x01
 138:	a5 df       	rcall	.-182    	; 0x84 <_Z14USART_Transmith>
		USART_Transmit(temp[1]);
 13a:	8a 81       	ldd	r24, Y+2	; 0x02
 13c:	a3 df       	rcall	.-186    	; 0x84 <_Z14USART_Transmith>
		if(j % 5==0) USART_Transmit('\n');
 13e:	c8 01       	movw	r24, r16
 140:	b6 01       	movw	r22, r12
 142:	ef d3       	rcall	.+2014   	; 0x922 <__divmodhi4>
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
 148:	0f 90       	pop	r0
 14a:	0f 90       	pop	r0
 14c:	0f 90       	pop	r0
 14e:	0f 90       	pop	r0
 150:	89 2b       	or	r24, r25
 152:	11 f4       	brne	.+4      	; 0x158 <_Z10send_to_pcv+0xa0>
 154:	8a e0       	ldi	r24, 0x0A	; 10
 156:	96 df       	rcall	.-212    	; 0x84 <_Z14USART_Transmith>
}

void send_to_pc(){
	char temp[2];
	uint8_t c;
	for(int j = 1;j<MAX_EEPROM;j++){
 158:	0f 5f       	subi	r16, 0xFF	; 255
 15a:	1f 4f       	sbci	r17, 0xFF	; 255
 15c:	0b 3f       	cpi	r16, 0xFB	; 251
 15e:	11 05       	cpc	r17, r1
 160:	09 f7       	brne	.-62     	; 0x124 <_Z10send_to_pcv+0x6c>
		sprintf(temp,"%02X", c);
		USART_Transmit(temp[0]);
		USART_Transmit(temp[1]);
		if(j % 5==0) USART_Transmit('\n');
	}
	USART_Transmit('\n');
 162:	8a e0       	ldi	r24, 0x0A	; 10
 164:	8f df       	rcall	.-226    	; 0x84 <_Z14USART_Transmith>
}
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	1f 91       	pop	r17
 170:	0f 91       	pop	r16
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	df 90       	pop	r13
 178:	cf 90       	pop	r12
 17a:	bf 90       	pop	r11
 17c:	af 90       	pop	r10
 17e:	08 95       	ret

00000180 <main>:
MFRC522 rfid(2,6);
int main(void)
{
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
 188:	28 97       	sbiw	r28, 0x08	; 8
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	f8 94       	cli
 18e:	de bf       	out	0x3e, r29	; 62
 190:	0f be       	out	0x3f, r0	; 63
 192:	cd bf       	out	0x3d, r28	; 61
	
	SPI_MasterInit();
 194:	7b df       	rcall	.-266    	; 0x8c <_Z14SPI_MasterInitv>
	uart_init();
 196:	6e df       	rcall	.-292    	; 0x74 <_Z9uart_initv>
	DDRD = 0x80;
 198:	80 e8       	ldi	r24, 0x80	; 128
 19a:	81 bb       	out	0x11, r24	; 17
	rfid.begin();
 19c:	8c e6       	ldi	r24, 0x6C	; 108
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	1a d1       	rcall	.+564    	; 0x3d6 <_ZN7MFRC5225beginEv>
	_SendString("START");
 1a2:	85 e6       	ldi	r24, 0x65	; 101
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	7a df       	rcall	.-268    	; 0x9c <_Z11_SendStringPc>
	uint8_t data[MAX_LEN];
	uint8_t indexEEPROM =1;
	bool check =true;
	bool check_write =false;
	char temp[2];
	if(eeprom_read_byte(0)=='Y'){
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	88 d6       	rcall	.+3344   	; 0xebe <eeprom_read_byte>
 1ae:	89 35       	cpi	r24, 0x59	; 89
 1b0:	69 f4       	brne	.+26     	; 0x1cc <main+0x4c>
		while ( !(UCSRA & (1<<RXC)));
 1b2:	5f 9b       	sbis	0x0b, 7	; 11
 1b4:	fe cf       	rjmp	.-4      	; 0x1b2 <main+0x32>
		eeprom_write_byte(0,'N');
 1b6:	6e e4       	ldi	r22, 0x4E	; 78
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	88 d6       	rcall	.+3344   	; 0xece <eeprom_write_byte>
		send_to_pc();
 1be:	7c df       	rcall	.-264    	; 0xb8 <_Z10send_to_pcv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	87 ea       	ldi	r24, 0xA7	; 167
 1c2:	91 e6       	ldi	r25, 0x61	; 97
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <main+0x44>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <main+0x4a>
 1ca:	00 00       	nop
			rfid.haltTag();
			cbi(PORTD,7);
		}
		if(indexEEPROM ==MAX_EEPROM && check){
			eeprom_write_byte(0,'Y');
			check=false;
 1cc:	f1 2c       	mov	r15, r1
 1ce:	bb 24       	eor	r11, r11
 1d0:	b3 94       	inc	r11
 1d2:	11 e0       	ldi	r17, 0x01	; 1
		_delay_ms(100);
		
	}
	while(1)
	{
		memset( data, '\0', sizeof(char)*MAX_LEN );
 1d4:	08 e0       	ldi	r16, 0x08	; 8
 1d6:	fe 01       	movw	r30, r28
 1d8:	31 96       	adiw	r30, 0x01	; 1
 1da:	6f 01       	movw	r12, r30
 1dc:	aa 24       	eor	r10, r10
 1de:	a3 94       	inc	r10
			rfid.haltTag();
			cbi(PORTD,7);
		}
		if(indexEEPROM ==MAX_EEPROM && check){
			eeprom_write_byte(0,'Y');
			check=false;
 1e0:	91 2c       	mov	r9, r1
		_delay_ms(100);
		
	}
	while(1)
	{
		memset( data, '\0', sizeof(char)*MAX_LEN );
 1e2:	f6 01       	movw	r30, r12
 1e4:	80 2f       	mov	r24, r16
 1e6:	11 92       	st	Z+, r1
 1e8:	8a 95       	dec	r24
 1ea:	e9 f7       	brne	.-6      	; 0x1e6 <main+0x66>
		status = rfid.requestTag(MF1_REQIDL, data);
 1ec:	a6 01       	movw	r20, r12
 1ee:	66 e2       	ldi	r22, 0x26	; 38
 1f0:	8c e6       	ldi	r24, 0x6C	; 108
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	2e d2       	rcall	.+1116   	; 0x652 <_ZN7MFRC52210requestTagEhPh>
		
		if (status == MI_OK && indexEEPROM <MAX_EEPROM) {
 1f6:	81 11       	cpse	r24, r1
 1f8:	2b c0       	rjmp	.+86     	; 0x250 <main+0xd0>
 1fa:	1b 3f       	cpi	r17, 0xFB	; 251
 1fc:	48 f5       	brcc	.+82     	; 0x250 <main+0xd0>
			if(!check_write){
 1fe:	f1 10       	cpse	r15, r1
 200:	04 c0       	rjmp	.+8      	; 0x20a <main+0x8a>
				check_write =true;
				eeprom_write_byte(0,'Y');
 202:	69 e5       	ldi	r22, 0x59	; 89
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	62 d6       	rcall	.+3268   	; 0xece <eeprom_write_byte>
			}
				
			status = rfid.antiCollision(data);
 20a:	b6 01       	movw	r22, r12
 20c:	8c e6       	ldi	r24, 0x6C	; 108
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	58 d2       	rcall	.+1200   	; 0x6c2 <_ZN7MFRC52213antiCollisionEPh>
			int i=0;
			while(data[i] != '\0')
 212:	69 81       	ldd	r22, Y+1	; 0x01
 214:	66 23       	and	r22, r22
 216:	91 f0       	breq	.+36     	; 0x23c <main+0xbc>
			{
				//sprintf(temp,"%02X", data[i]);
				//USART_Transmit(temp[0]);
				//USART_Transmit(temp[1]);
				if(indexEEPROM >MAX_EEPROM) break;
 218:	1c 3f       	cpi	r17, 0xFC	; 252
 21a:	80 f4       	brcc	.+32     	; 0x23c <main+0xbc>
 21c:	7e 01       	movw	r14, r28
 21e:	92 e0       	ldi	r25, 0x02	; 2
 220:	e9 0e       	add	r14, r25
 222:	f1 1c       	adc	r15, r1
 224:	02 c0       	rjmp	.+4      	; 0x22a <main+0xaa>
 226:	1c 3f       	cpi	r17, 0xFC	; 252
 228:	49 f0       	breq	.+18     	; 0x23c <main+0xbc>
				eeprom_write_byte((uint8_t*)indexEEPROM,data[i]);
 22a:	81 2f       	mov	r24, r17
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	4f d6       	rcall	.+3230   	; 0xece <eeprom_write_byte>
				indexEEPROM++;
 230:	1f 5f       	subi	r17, 0xFF	; 255
				eeprom_write_byte(0,'Y');
			}
				
			status = rfid.antiCollision(data);
			int i=0;
			while(data[i] != '\0')
 232:	f7 01       	movw	r30, r14
 234:	61 91       	ld	r22, Z+
 236:	7f 01       	movw	r14, r30
 238:	61 11       	cpse	r22, r1
 23a:	f5 cf       	rjmp	.-22     	; 0x226 <main+0xa6>
				indexEEPROM++;
				i++;
				
			}
			//USART_Transmit('\n');
			sbi(PORTD,7);
 23c:	97 9a       	sbi	0x12, 7	; 18
			rfid.selectTag(data);
 23e:	b6 01       	movw	r22, r12
 240:	8c e6       	ldi	r24, 0x6C	; 108
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	e1 d2       	rcall	.+1474   	; 0x808 <_ZN7MFRC5229selectTagEPh>
			// Stop the tag and get ready for reading a new tag.
			rfid.haltTag();
 246:	8c e6       	ldi	r24, 0x6C	; 108
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	2f d3       	rcall	.+1630   	; 0x8aa <_ZN7MFRC5227haltTagEv>
			cbi(PORTD,7);
 24c:	97 98       	cbi	0x12, 7	; 18
 24e:	fa 2c       	mov	r15, r10
		}
		if(indexEEPROM ==MAX_EEPROM && check){
 250:	1b 3f       	cpi	r17, 0xFB	; 251
 252:	39 f6       	brne	.-114    	; 0x1e2 <main+0x62>
 254:	bb 20       	and	r11, r11
 256:	29 f2       	breq	.-118    	; 0x1e2 <main+0x62>
			eeprom_write_byte(0,'Y');
 258:	69 e5       	ldi	r22, 0x59	; 89
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	37 d6       	rcall	.+3182   	; 0xece <eeprom_write_byte>
			check=false;
 260:	b9 2c       	mov	r11, r9
 262:	bf cf       	rjmp	.-130    	; 0x1e2 <main+0x62>

00000264 <_GLOBAL__sub_I__Z9uart_initv>:
		USART_Transmit(temp[1]);
		if(j % 5==0) USART_Transmit('\n');
	}
	USART_Transmit('\n');
}
MFRC522 rfid(2,6);
 264:	46 e0       	ldi	r20, 0x06	; 6
 266:	50 e0       	ldi	r21, 0x00	; 0
 268:	62 e0       	ldi	r22, 0x02	; 2
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	8c e6       	ldi	r24, 0x6C	; 108
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	06 d0       	rcall	.+12     	; 0x27e <_ZN7MFRC522C1Eii>
 272:	08 95       	ret

00000274 <_Z18SPI_MasterTransmith>:

uint8_t MFRC522::getFirmwareVersion() {
	uint8_t response;
	response = readFromRegister(0x37);
	return response;
}
 274:	8f b9       	out	0x0f, r24	; 15
 276:	77 9b       	sbis	0x0e, 7	; 14
 278:	fe cf       	rjmp	.-4      	; 0x276 <_Z18SPI_MasterTransmith+0x2>
 27a:	8f b1       	in	r24, 0x0f	; 15
 27c:	08 95       	ret

0000027e <_ZN7MFRC522C1Eii>:
 27e:	fc 01       	movw	r30, r24
 280:	60 83       	st	Z, r22
 282:	71 83       	std	Z+1, r23	; 0x01
 284:	77 b3       	in	r23, 0x17	; 23
 286:	21 e0       	ldi	r18, 0x01	; 1
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	c9 01       	movw	r24, r18
 28c:	02 c0       	rjmp	.+4      	; 0x292 <_ZN7MFRC522C1Eii+0x14>
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	6a 95       	dec	r22
 294:	e2 f7       	brpl	.-8      	; 0x28e <_ZN7MFRC522C1Eii+0x10>
 296:	87 2b       	or	r24, r23
 298:	87 bb       	out	0x17, r24	; 23
 29a:	68 b3       	in	r22, 0x18	; 24
 29c:	c9 01       	movw	r24, r18
 29e:	00 80       	ld	r0, Z
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <_ZN7MFRC522C1Eii+0x28>
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	0a 94       	dec	r0
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <_ZN7MFRC522C1Eii+0x24>
 2aa:	86 2b       	or	r24, r22
 2ac:	88 bb       	out	0x18, r24	; 24
 2ae:	42 83       	std	Z+2, r20	; 0x02
 2b0:	53 83       	std	Z+3, r21	; 0x03
 2b2:	54 b3       	in	r21, 0x14	; 20
 2b4:	c9 01       	movw	r24, r18
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <_ZN7MFRC522C1Eii+0x3e>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	4a 95       	dec	r20
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <_ZN7MFRC522C1Eii+0x3a>
 2c0:	85 2b       	or	r24, r21
 2c2:	84 bb       	out	0x14, r24	; 20
 2c4:	85 b3       	in	r24, 0x15	; 21
 2c6:	02 80       	ldd	r0, Z+2	; 0x02
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <_ZN7MFRC522C1Eii+0x50>
 2ca:	22 0f       	add	r18, r18
 2cc:	33 1f       	adc	r19, r19
 2ce:	0a 94       	dec	r0
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <_ZN7MFRC522C1Eii+0x4c>
 2d2:	28 2b       	or	r18, r24
 2d4:	25 bb       	out	0x15, r18	; 21
 2d6:	08 95       	ret

000002d8 <_ZN7MFRC52215writeToRegisterEhh>:
 2d8:	ff 92       	push	r15
 2da:	0f 93       	push	r16
 2dc:	1f 93       	push	r17
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	8c 01       	movw	r16, r24
 2e4:	f4 2e       	mov	r15, r20
 2e6:	98 b3       	in	r25, 0x18	; 24
 2e8:	c1 e0       	ldi	r28, 0x01	; 1
 2ea:	d0 e0       	ldi	r29, 0x00	; 0
 2ec:	9e 01       	movw	r18, r28
 2ee:	f8 01       	movw	r30, r16
 2f0:	00 80       	ld	r0, Z
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <_ZN7MFRC52215writeToRegisterEhh+0x20>
 2f4:	22 0f       	add	r18, r18
 2f6:	33 1f       	adc	r19, r19
 2f8:	0a 94       	dec	r0
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <_ZN7MFRC52215writeToRegisterEhh+0x1c>
 2fc:	82 2f       	mov	r24, r18
 2fe:	80 95       	com	r24
 300:	89 23       	and	r24, r25
 302:	88 bb       	out	0x18, r24	; 24
 304:	86 2f       	mov	r24, r22
 306:	88 0f       	add	r24, r24
 308:	8e 77       	andi	r24, 0x7E	; 126
 30a:	b4 df       	rcall	.-152    	; 0x274 <_Z18SPI_MasterTransmith>
 30c:	8f 2d       	mov	r24, r15
 30e:	b2 df       	rcall	.-156    	; 0x274 <_Z18SPI_MasterTransmith>
 310:	88 b3       	in	r24, 0x18	; 24
 312:	f8 01       	movw	r30, r16
 314:	00 80       	ld	r0, Z
 316:	02 c0       	rjmp	.+4      	; 0x31c <_ZN7MFRC52215writeToRegisterEhh+0x44>
 318:	cc 0f       	add	r28, r28
 31a:	dd 1f       	adc	r29, r29
 31c:	0a 94       	dec	r0
 31e:	e2 f7       	brpl	.-8      	; 0x318 <_ZN7MFRC52215writeToRegisterEhh+0x40>
 320:	c8 2b       	or	r28, r24
 322:	c8 bb       	out	0x18, r28	; 24
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
 32c:	ff 90       	pop	r15
 32e:	08 95       	ret

00000330 <_ZN7MFRC52216readFromRegisterEh>:
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	8c 01       	movw	r16, r24
 33a:	28 b3       	in	r18, 0x18	; 24
 33c:	c1 e0       	ldi	r28, 0x01	; 1
 33e:	d0 e0       	ldi	r29, 0x00	; 0
 340:	ae 01       	movw	r20, r28
 342:	fc 01       	movw	r30, r24
 344:	00 80       	ld	r0, Z
 346:	02 c0       	rjmp	.+4      	; 0x34c <_ZN7MFRC52216readFromRegisterEh+0x1c>
 348:	44 0f       	add	r20, r20
 34a:	55 1f       	adc	r21, r21
 34c:	0a 94       	dec	r0
 34e:	e2 f7       	brpl	.-8      	; 0x348 <_ZN7MFRC52216readFromRegisterEh+0x18>
 350:	94 2f       	mov	r25, r20
 352:	90 95       	com	r25
 354:	92 23       	and	r25, r18
 356:	98 bb       	out	0x18, r25	; 24
 358:	86 2f       	mov	r24, r22
 35a:	88 0f       	add	r24, r24
 35c:	8e 77       	andi	r24, 0x7E	; 126
 35e:	80 68       	ori	r24, 0x80	; 128
 360:	89 df       	rcall	.-238    	; 0x274 <_Z18SPI_MasterTransmith>
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	87 df       	rcall	.-242    	; 0x274 <_Z18SPI_MasterTransmith>
 366:	98 b3       	in	r25, 0x18	; 24
 368:	f8 01       	movw	r30, r16
 36a:	00 80       	ld	r0, Z
 36c:	02 c0       	rjmp	.+4      	; 0x372 <_ZN7MFRC52216readFromRegisterEh+0x42>
 36e:	cc 0f       	add	r28, r28
 370:	dd 1f       	adc	r29, r29
 372:	0a 94       	dec	r0
 374:	e2 f7       	brpl	.-8      	; 0x36e <_ZN7MFRC52216readFromRegisterEh+0x3e>
 376:	c9 2b       	or	r28, r25
 378:	c8 bb       	out	0x18, r28	; 24
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	08 95       	ret

00000384 <_ZN7MFRC5225resetEv>:
	sbi(PORTB,_sad);
	return val;
}

void MFRC522::reset() {
	writeToRegister(CommandReg, MFRC522_SOFTRESET);
 384:	4f e0       	ldi	r20, 0x0F	; 15
 386:	61 e0       	ldi	r22, 0x01	; 1
 388:	a7 df       	rcall	.-178    	; 0x2d8 <_ZN7MFRC52215writeToRegisterEhh>
 38a:	08 95       	ret

0000038c <_ZN7MFRC52210setBitMaskEhh>:
}

void MFRC522::setBitMask(uint8_t addr, uint8_t mask) {
 38c:	0f 93       	push	r16
 38e:	1f 93       	push	r17
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	8c 01       	movw	r16, r24
 396:	d6 2f       	mov	r29, r22
 398:	c4 2f       	mov	r28, r20
	uint8_t current;
	current = readFromRegister(addr);
 39a:	ca df       	rcall	.-108    	; 0x330 <_ZN7MFRC52216readFromRegisterEh>
	writeToRegister(addr, current | mask);
 39c:	48 2f       	mov	r20, r24
 39e:	4c 2b       	or	r20, r28
 3a0:	6d 2f       	mov	r22, r29
 3a2:	c8 01       	movw	r24, r16
 3a4:	99 df       	rcall	.-206    	; 0x2d8 <_ZN7MFRC52215writeToRegisterEhh>
}
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	1f 91       	pop	r17
 3ac:	0f 91       	pop	r16
 3ae:	08 95       	ret

000003b0 <_ZN7MFRC52212clearBitMaskEhh>:

void MFRC522::clearBitMask(uint8_t addr, uint8_t mask) {
 3b0:	0f 93       	push	r16
 3b2:	1f 93       	push	r17
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	8c 01       	movw	r16, r24
 3ba:	d6 2f       	mov	r29, r22
 3bc:	c4 2f       	mov	r28, r20
	uint8_t current;
	current = readFromRegister(addr);
 3be:	b8 df       	rcall	.-144    	; 0x330 <_ZN7MFRC52216readFromRegisterEh>
	writeToRegister(addr, current & (~mask));
 3c0:	c0 95       	com	r28
 3c2:	4c 2f       	mov	r20, r28
 3c4:	48 23       	and	r20, r24
 3c6:	6d 2f       	mov	r22, r29
 3c8:	c8 01       	movw	r24, r16
 3ca:	86 df       	rcall	.-244    	; 0x2d8 <_ZN7MFRC52215writeToRegisterEhh>
}
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	1f 91       	pop	r17
 3d2:	0f 91       	pop	r16
 3d4:	08 95       	ret

000003d6 <_ZN7MFRC5225beginEv>:

void MFRC522::begin() {
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	ec 01       	movw	r28, r24
	sbi(PORTB,_sad);
 3dc:	28 b3       	in	r18, 0x18	; 24
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	08 80       	ld	r0, Y
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <_ZN7MFRC5225beginEv+0x14>
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	0a 94       	dec	r0
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <_ZN7MFRC5225beginEv+0x10>
 3ee:	82 2b       	or	r24, r18
 3f0:	88 bb       	out	0x18, r24	; 24

	reset();
 3f2:	ce 01       	movw	r24, r28
 3f4:	c7 df       	rcall	.-114    	; 0x384 <_ZN7MFRC5225resetEv>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms == 3390 * 48 / 6.78
	writeToRegister(TModeReg, 0x8D);       // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 3f6:	4d e8       	ldi	r20, 0x8D	; 141
 3f8:	6a e2       	ldi	r22, 0x2A	; 42
 3fa:	ce 01       	movw	r24, r28
 3fc:	6d df       	rcall	.-294    	; 0x2d8 <_ZN7MFRC52215writeToRegisterEhh>
	writeToRegister(TPrescalerReg, 0x3E);  // TModeReg[3..0] + TPrescalerReg
 3fe:	4e e3       	ldi	r20, 0x3E	; 62
 400:	6b e2       	ldi	r22, 0x2B	; 43
 402:	ce 01       	movw	r24, r28
 404:	69 df       	rcall	.-302    	; 0x2d8 <_ZN7MFRC52215writeToRegisterEhh>
	writeToRegister(TReloadRegL, 30);		//48
 406:	4e e1       	ldi	r20, 0x1E	; 30
 408:	6d e2       	ldi	r22, 0x2D	; 45
 40a:	ce 01       	movw	r24, r28
 40c:	65 df       	rcall	.-310    	; 0x2d8 <_ZN7MFRC52215writeToRegisterEhh>
	writeToRegister(TReloadRegH, 0);
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	6c e2       	ldi	r22, 0x2C	; 44
 412:	ce 01       	movw	r24, r28
 414:	61 df       	rcall	.-318    	; 0x2d8 <_ZN7MFRC52215writeToRegisterEhh>

	writeToRegister(TxAutoReg, 0x40);      // 100%ASK
 416:	40 e4       	ldi	r20, 0x40	; 64
 418:	65 e1       	ldi	r22, 0x15	; 21
 41a:	ce 01       	movw	r24, r28
 41c:	5d df       	rcall	.-326    	; 0x2d8 <_ZN7MFRC52215writeToRegisterEhh>
	writeToRegister(ModeReg, 0x3D);        // CRC initial value 0x6363
 41e:	4d e3       	ldi	r20, 0x3D	; 61
 420:	61 e1       	ldi	r22, 0x11	; 17
 422:	ce 01       	movw	r24, r28
 424:	59 df       	rcall	.-334    	; 0x2d8 <_ZN7MFRC52215writeToRegisterEhh>

	setBitMask(TxControlReg, 0x03);        // Turn antenna on.
 426:	43 e0       	ldi	r20, 0x03	; 3
 428:	64 e1       	ldi	r22, 0x14	; 20
 42a:	ce 01       	movw	r24, r28
 42c:	af df       	rcall	.-162    	; 0x38c <_ZN7MFRC52210setBitMaskEhh>
}
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	08 95       	ret

00000434 <_ZN7MFRC52210commandTagEhPhiS0_Pi>:

int MFRC522::commandTag(uint8_t cmd, uint8_t *data, int dlen, uint8_t *result, int *rlen) {
 434:	5f 92       	push	r5
 436:	6f 92       	push	r6
 438:	7f 92       	push	r7
 43a:	8f 92       	push	r8
 43c:	9f 92       	push	r9
 43e:	af 92       	push	r10
 440:	bf 92       	push	r11
 442:	cf 92       	push	r12
 444:	df 92       	push	r13
 446:	ef 92       	push	r14
 448:	ff 92       	push	r15
 44a:	0f 93       	push	r16
 44c:	1f 93       	push	r17
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	6c 01       	movw	r12, r24
 454:	56 2e       	mov	r5, r22
 456:	c4 2f       	mov	r28, r20
 458:	d5 2f       	mov	r29, r21
 45a:	49 01       	movw	r8, r18
 45c:	37 01       	movw	r6, r14
	uint8_t irqEn = 0x00;
	uint8_t waitIRq = 0x00;
	uint8_t lastBits, n;
	int i;

	switch (cmd) {
 45e:	8c e0       	ldi	r24, 0x0C	; 12
 460:	68 17       	cp	r22, r24
 462:	09 f4       	brne	.+2      	; 0x466 <__stack+0x7>
 464:	b5 c0       	rjmp	.+362    	; 0x5d0 <__stack+0x171>
 466:	9e e0       	ldi	r25, 0x0E	; 14
 468:	69 13       	cpse	r22, r25
 46a:	08 c0       	rjmp	.+16     	; 0x47c <__stack+0x1d>
		case MFRC522_AUTHENT:
		irqEn = 0x12;
		waitIRq = 0x10;
 46c:	68 94       	set
 46e:	ff 24       	eor	r15, r15
 470:	f4 f8       	bld	r15, 4
	uint8_t lastBits, n;
	int i;

	switch (cmd) {
		case MFRC522_AUTHENT:
		irqEn = 0x12;
 472:	0f 2e       	mov	r0, r31
 474:	f2 e1       	ldi	r31, 0x12	; 18
 476:	ef 2e       	mov	r14, r31
 478:	f0 2d       	mov	r31, r0
 47a:	02 c0       	rjmp	.+4      	; 0x480 <__stack+0x21>
}

int MFRC522::commandTag(uint8_t cmd, uint8_t *data, int dlen, uint8_t *result, int *rlen) {
	int status = MI_ERR;
	uint8_t irqEn = 0x00;
	uint8_t waitIRq = 0x00;
 47c:	f1 2c       	mov	r15, r1
	setBitMask(TxControlReg, 0x03);        // Turn antenna on.
}

int MFRC522::commandTag(uint8_t cmd, uint8_t *data, int dlen, uint8_t *result, int *rlen) {
	int status = MI_ERR;
	uint8_t irqEn = 0x00;
 47e:	e1 2c       	mov	r14, r1
		break;
		default:
		break;
	}

	writeToRegister(CommIEnReg, irqEn|0x80);    // interrupt request
 480:	4e 2d       	mov	r20, r14
 482:	40 68       	ori	r20, 0x80	; 128
 484:	62 e0       	ldi	r22, 0x02	; 2
 486:	c6 01       	movw	r24, r12
 488:	27 df       	rcall	.-434    	; 0x2d8 <_ZN7MFRC52215writeToRegisterEhh>
	clearBitMask(CommIrqReg, 0x80);             // Clear all interrupt requests bits.
 48a:	40 e8       	ldi	r20, 0x80	; 128
 48c:	64 e0       	ldi	r22, 0x04	; 4
 48e:	c6 01       	movw	r24, r12
 490:	8f df       	rcall	.-226    	; 0x3b0 <_ZN7MFRC52212clearBitMaskEhh>
	setBitMask(FIFOLevelReg, 0x80);             // FlushBuffer=1, FIFO initialization.
 492:	40 e8       	ldi	r20, 0x80	; 128
 494:	6a e0       	ldi	r22, 0x0A	; 10
 496:	c6 01       	movw	r24, r12
 498:	79 df       	rcall	.-270    	; 0x38c <_ZN7MFRC52210setBitMaskEhh>

	writeToRegister(CommandReg, MFRC522_IDLE);  // No action, cancel the current command.
 49a:	40 e0       	ldi	r20, 0x00	; 0
 49c:	61 e0       	ldi	r22, 0x01	; 1
 49e:	c6 01       	movw	r24, r12
 4a0:	1b df       	rcall	.-458    	; 0x2d8 <_ZN7MFRC52215writeToRegisterEhh>

	// Write to FIFO
	for (i=0; i < dlen; i++) {
 4a2:	18 14       	cp	r1, r8
 4a4:	19 04       	cpc	r1, r9
 4a6:	74 f4       	brge	.+28     	; 0x4c4 <__stack+0x65>
 4a8:	ac 2e       	mov	r10, r28
 4aa:	bd 2e       	mov	r11, r29
		case MFRC522_AUTHENT:
		irqEn = 0x12;
		waitIRq = 0x10;
		break;
		case MFRC522_TRANSCEIVE:
		irqEn = 0x77;
 4ac:	c0 e0       	ldi	r28, 0x00	; 0
 4ae:	d0 e0       	ldi	r29, 0x00	; 0

	writeToRegister(CommandReg, MFRC522_IDLE);  // No action, cancel the current command.

	// Write to FIFO
	for (i=0; i < dlen; i++) {
		writeToRegister(FIFODataReg, data[i]);
 4b0:	f5 01       	movw	r30, r10
 4b2:	41 91       	ld	r20, Z+
 4b4:	5f 01       	movw	r10, r30
 4b6:	69 e0       	ldi	r22, 0x09	; 9
 4b8:	c6 01       	movw	r24, r12
 4ba:	0e df       	rcall	.-484    	; 0x2d8 <_ZN7MFRC52215writeToRegisterEhh>
	setBitMask(FIFOLevelReg, 0x80);             // FlushBuffer=1, FIFO initialization.

	writeToRegister(CommandReg, MFRC522_IDLE);  // No action, cancel the current command.

	// Write to FIFO
	for (i=0; i < dlen; i++) {
 4bc:	21 96       	adiw	r28, 0x01	; 1
 4be:	c8 15       	cp	r28, r8
 4c0:	d9 05       	cpc	r29, r9
 4c2:	b4 f3       	brlt	.-20     	; 0x4b0 <__stack+0x51>
		writeToRegister(FIFODataReg, data[i]);
	}

	// Execute the command.
	writeToRegister(CommandReg, cmd);
 4c4:	45 2d       	mov	r20, r5
 4c6:	61 e0       	ldi	r22, 0x01	; 1
 4c8:	c6 01       	movw	r24, r12
 4ca:	06 df       	rcall	.-500    	; 0x2d8 <_ZN7MFRC52215writeToRegisterEhh>
	if (cmd == MFRC522_TRANSCEIVE) {
 4cc:	fc e0       	ldi	r31, 0x0C	; 12
 4ce:	5f 12       	cpse	r5, r31
 4d0:	04 c0       	rjmp	.+8      	; 0x4da <__stack+0x7b>
		setBitMask(BitFramingReg, 0x80);  // StartSend=1, transmission of data starts
 4d2:	40 e8       	ldi	r20, 0x80	; 128
 4d4:	6d e0       	ldi	r22, 0x0D	; 13
 4d6:	c6 01       	movw	r24, r12
 4d8:	59 df       	rcall	.-334    	; 0x38c <_ZN7MFRC52210setBitMaskEhh>
 4da:	81 ee       	ldi	r24, 0xE1	; 225
 4dc:	94 e0       	ldi	r25, 0x04	; 4
 4de:	01 97       	sbiw	r24, 0x01	; 1
 4e0:	f1 f7       	brne	.-4      	; 0x4de <__stack+0x7f>
 4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <__stack+0x85>
 4e4:	00 00       	nop
	i = 25; // Max wait time is 25ms.
	do {
		_delay_ms(5);
		// CommIRqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = readFromRegister(CommIrqReg);
 4e6:	64 e0       	ldi	r22, 0x04	; 4
 4e8:	c6 01       	movw	r24, r12
 4ea:	22 df       	rcall	.-444    	; 0x330 <_ZN7MFRC52216readFromRegisterEh>
 4ec:	b8 2e       	mov	r11, r24
 4ee:	c8 e1       	ldi	r28, 0x18	; 24
 4f0:	d0 e0       	ldi	r29, 0x00	; 0
		i--;
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 4f2:	9f 2d       	mov	r25, r15
 4f4:	91 60       	ori	r25, 0x01	; 1
 4f6:	f9 2e       	mov	r15, r25
 4f8:	0d c0       	rjmp	.+26     	; 0x514 <__stack+0xb5>
 4fa:	e1 ee       	ldi	r30, 0xE1	; 225
 4fc:	f4 e0       	ldi	r31, 0x04	; 4
 4fe:	31 97       	sbiw	r30, 0x01	; 1
 500:	f1 f7       	brne	.-4      	; 0x4fe <__stack+0x9f>
 502:	00 c0       	rjmp	.+0      	; 0x504 <__stack+0xa5>
 504:	00 00       	nop
	i = 25; // Max wait time is 25ms.
	do {
		_delay_ms(5);
		// CommIRqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = readFromRegister(CommIrqReg);
 506:	64 e0       	ldi	r22, 0x04	; 4
 508:	c6 01       	movw	r24, r12
 50a:	12 df       	rcall	.-476    	; 0x330 <_ZN7MFRC52216readFromRegisterEh>
 50c:	b8 2e       	mov	r11, r24
 50e:	21 97       	sbiw	r28, 0x01	; 1
		i--;
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 510:	09 f4       	brne	.+2      	; 0x514 <__stack+0xb5>
 512:	7a c0       	rjmp	.+244    	; 0x608 <__stack+0x1a9>
 514:	8f 2d       	mov	r24, r15
 516:	8b 21       	and	r24, r11
 518:	81 f3       	breq	.-32     	; 0x4fa <__stack+0x9b>
 51a:	7d c0       	rjmp	.+250    	; 0x616 <__stack+0x1b7>

	clearBitMask(BitFramingReg, 0x80);  // StartSend=0

	if (i != 0) { // Request did not time out.
		if(!(readFromRegister(ErrorReg) & 0x1D)) {  // BufferOvfl Collerr CRCErr ProtocolErr
			status = MI_OK;
 51c:	8e 2d       	mov	r24, r14
 51e:	81 70       	andi	r24, 0x01	; 1
 520:	b8 22       	and	r11, r24
 522:	d1 e0       	ldi	r29, 0x01	; 1
 524:	c0 e0       	ldi	r28, 0x00	; 0
 526:	09 f4       	brne	.+2      	; 0x52a <__stack+0xcb>
 528:	d0 e0       	ldi	r29, 0x00	; 0
			if (n & irqEn & 0x01) {
				status = MI_NOTAGERR;
			}

			if (cmd == MFRC522_TRANSCEIVE) {
 52a:	fc e0       	ldi	r31, 0x0C	; 12
 52c:	5f 12       	cpse	r5, r31
 52e:	7f c0       	rjmp	.+254    	; 0x62e <__stack+0x1cf>
				n = readFromRegister(FIFOLevelReg);
 530:	6a e0       	ldi	r22, 0x0A	; 10
 532:	c6 01       	movw	r24, r12
 534:	fd de       	rcall	.-518    	; 0x330 <_ZN7MFRC52216readFromRegisterEh>
 536:	f8 2e       	mov	r15, r24
				lastBits = readFromRegister(ControlReg) & 0x07;
 538:	6c e0       	ldi	r22, 0x0C	; 12
 53a:	c6 01       	movw	r24, r12
 53c:	f9 de       	rcall	.-526    	; 0x330 <_ZN7MFRC52216readFromRegisterEh>
 53e:	28 2f       	mov	r18, r24
 540:	27 70       	andi	r18, 0x07	; 7
				if (lastBits) {
 542:	79 f0       	breq	.+30     	; 0x562 <__stack+0x103>
					*rlen = (n-1)*8 + lastBits;
 544:	8f 2d       	mov	r24, r15
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	01 97       	sbiw	r24, 0x01	; 1
 54a:	88 0f       	add	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	88 0f       	add	r24, r24
 550:	99 1f       	adc	r25, r25
 552:	88 0f       	add	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	82 0f       	add	r24, r18
 558:	91 1d       	adc	r25, r1
 55a:	f3 01       	movw	r30, r6
 55c:	91 83       	std	Z+1, r25	; 0x01
 55e:	80 83       	st	Z, r24
 560:	0b c0       	rjmp	.+22     	; 0x578 <__stack+0x119>
					} else {
					*rlen = n*8;
 562:	8f 2d       	mov	r24, r15
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	88 0f       	add	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	88 0f       	add	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	f3 01       	movw	r30, r6
 574:	91 83       	std	Z+1, r25	; 0x01
 576:	80 83       	st	Z, r24
				}

				if (n == 0) {
 578:	ff 20       	and	r15, r15
 57a:	51 f0       	breq	.+20     	; 0x590 <__stack+0x131>
				if (n > MAX_LEN) {
					n = MAX_LEN;
				}

				// Reading the recieved data from FIFO.
				for (i=0; i<n; i++) {
 57c:	8f 2d       	mov	r24, r15
 57e:	89 30       	cpi	r24, 0x09	; 9
 580:	08 f0       	brcs	.+2      	; 0x584 <__stack+0x125>
 582:	88 e0       	ldi	r24, 0x08	; 8
 584:	a8 2e       	mov	r10, r24
 586:	b1 2c       	mov	r11, r1
 588:	1a 14       	cp	r1, r10
 58a:	1b 04       	cpc	r1, r11
 58c:	24 f0       	brlt	.+8      	; 0x596 <__stack+0x137>
 58e:	4f c0       	rjmp	.+158    	; 0x62e <__stack+0x1cf>
 590:	aa 24       	eor	r10, r10
 592:	a3 94       	inc	r10
 594:	b1 2c       	mov	r11, r1
 596:	e0 2e       	mov	r14, r16
 598:	f1 2e       	mov	r15, r17
 59a:	00 e0       	ldi	r16, 0x00	; 0
 59c:	10 e0       	ldi	r17, 0x00	; 0
					result[i] = readFromRegister(FIFODataReg);
 59e:	69 e0       	ldi	r22, 0x09	; 9
 5a0:	c6 01       	movw	r24, r12
 5a2:	c6 de       	rcall	.-628    	; 0x330 <_ZN7MFRC52216readFromRegisterEh>
 5a4:	f7 01       	movw	r30, r14
 5a6:	81 93       	st	Z+, r24
 5a8:	7f 01       	movw	r14, r30
				if (n > MAX_LEN) {
					n = MAX_LEN;
				}

				// Reading the recieved data from FIFO.
				for (i=0; i<n; i++) {
 5aa:	0f 5f       	subi	r16, 0xFF	; 255
 5ac:	1f 4f       	sbci	r17, 0xFF	; 255
 5ae:	0a 15       	cp	r16, r10
 5b0:	1b 05       	cpc	r17, r11
 5b2:	ac f3       	brlt	.-22     	; 0x59e <__stack+0x13f>
 5b4:	3c c0       	rjmp	.+120    	; 0x62e <__stack+0x1cf>
	for (i=0; i < dlen; i++) {
		writeToRegister(FIFODataReg, data[i]);
	}

	// Execute the command.
	writeToRegister(CommandReg, cmd);
 5b6:	4c e0       	ldi	r20, 0x0C	; 12
 5b8:	61 e0       	ldi	r22, 0x01	; 1
 5ba:	c6 01       	movw	r24, r12
 5bc:	8d de       	rcall	.-742    	; 0x2d8 <_ZN7MFRC52215writeToRegisterEhh>
		irqEn = 0x12;
		waitIRq = 0x10;
		break;
		case MFRC522_TRANSCEIVE:
		irqEn = 0x77;
		waitIRq = 0x30;
 5be:	0f 2e       	mov	r0, r31
 5c0:	f0 e3       	ldi	r31, 0x30	; 48
 5c2:	ff 2e       	mov	r15, r31
 5c4:	f0 2d       	mov	r31, r0
		case MFRC522_AUTHENT:
		irqEn = 0x12;
		waitIRq = 0x10;
		break;
		case MFRC522_TRANSCEIVE:
		irqEn = 0x77;
 5c6:	0f 2e       	mov	r0, r31
 5c8:	f7 e7       	ldi	r31, 0x77	; 119
 5ca:	ef 2e       	mov	r14, r31
 5cc:	f0 2d       	mov	r31, r0
 5ce:	81 cf       	rjmp	.-254    	; 0x4d2 <__stack+0x73>
		break;
		default:
		break;
	}

	writeToRegister(CommIEnReg, irqEn|0x80);    // interrupt request
 5d0:	47 ef       	ldi	r20, 0xF7	; 247
 5d2:	62 e0       	ldi	r22, 0x02	; 2
 5d4:	c6 01       	movw	r24, r12
 5d6:	80 de       	rcall	.-768    	; 0x2d8 <_ZN7MFRC52215writeToRegisterEhh>
	clearBitMask(CommIrqReg, 0x80);             // Clear all interrupt requests bits.
 5d8:	40 e8       	ldi	r20, 0x80	; 128
 5da:	64 e0       	ldi	r22, 0x04	; 4
 5dc:	c6 01       	movw	r24, r12
 5de:	e8 de       	rcall	.-560    	; 0x3b0 <_ZN7MFRC52212clearBitMaskEhh>
	setBitMask(FIFOLevelReg, 0x80);             // FlushBuffer=1, FIFO initialization.
 5e0:	40 e8       	ldi	r20, 0x80	; 128
 5e2:	6a e0       	ldi	r22, 0x0A	; 10
 5e4:	c6 01       	movw	r24, r12
 5e6:	d2 de       	rcall	.-604    	; 0x38c <_ZN7MFRC52210setBitMaskEhh>

	writeToRegister(CommandReg, MFRC522_IDLE);  // No action, cancel the current command.
 5e8:	40 e0       	ldi	r20, 0x00	; 0
 5ea:	61 e0       	ldi	r22, 0x01	; 1
 5ec:	c6 01       	movw	r24, r12
 5ee:	74 de       	rcall	.-792    	; 0x2d8 <_ZN7MFRC52215writeToRegisterEhh>

	// Write to FIFO
	for (i=0; i < dlen; i++) {
 5f0:	18 14       	cp	r1, r8
 5f2:	19 04       	cpc	r1, r9
 5f4:	04 f7       	brge	.-64     	; 0x5b6 <__stack+0x157>
		irqEn = 0x12;
		waitIRq = 0x10;
		break;
		case MFRC522_TRANSCEIVE:
		irqEn = 0x77;
		waitIRq = 0x30;
 5f6:	0f 2e       	mov	r0, r31
 5f8:	f0 e3       	ldi	r31, 0x30	; 48
 5fa:	ff 2e       	mov	r15, r31
 5fc:	f0 2d       	mov	r31, r0
		case MFRC522_AUTHENT:
		irqEn = 0x12;
		waitIRq = 0x10;
		break;
		case MFRC522_TRANSCEIVE:
		irqEn = 0x77;
 5fe:	0f 2e       	mov	r0, r31
 600:	f7 e7       	ldi	r31, 0x77	; 119
 602:	ef 2e       	mov	r14, r31
 604:	f0 2d       	mov	r31, r0
 606:	50 cf       	rjmp	.-352    	; 0x4a8 <__stack+0x49>
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = readFromRegister(CommIrqReg);
		i--;
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	clearBitMask(BitFramingReg, 0x80);  // StartSend=0
 608:	40 e8       	ldi	r20, 0x80	; 128
 60a:	6d e0       	ldi	r22, 0x0D	; 13
 60c:	c6 01       	movw	r24, r12
 60e:	d0 de       	rcall	.-608    	; 0x3b0 <_ZN7MFRC52212clearBitMaskEhh>

	setBitMask(TxControlReg, 0x03);        // Turn antenna on.
}

int MFRC522::commandTag(uint8_t cmd, uint8_t *data, int dlen, uint8_t *result, int *rlen) {
	int status = MI_ERR;
 610:	d2 e0       	ldi	r29, 0x02	; 2
 612:	c0 e0       	ldi	r28, 0x00	; 0
 614:	0c c0       	rjmp	.+24     	; 0x62e <__stack+0x1cf>
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = readFromRegister(CommIrqReg);
		i--;
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	clearBitMask(BitFramingReg, 0x80);  // StartSend=0
 616:	40 e8       	ldi	r20, 0x80	; 128
 618:	6d e0       	ldi	r22, 0x0D	; 13
 61a:	c6 01       	movw	r24, r12
 61c:	c9 de       	rcall	.-622    	; 0x3b0 <_ZN7MFRC52212clearBitMaskEhh>

	if (i != 0) { // Request did not time out.
		if(!(readFromRegister(ErrorReg) & 0x1D)) {  // BufferOvfl Collerr CRCErr ProtocolErr
 61e:	66 e0       	ldi	r22, 0x06	; 6
 620:	c6 01       	movw	r24, r12
 622:	86 de       	rcall	.-756    	; 0x330 <_ZN7MFRC52216readFromRegisterEh>
 624:	8d 71       	andi	r24, 0x1D	; 29
 626:	09 f4       	brne	.+2      	; 0x62a <__stack+0x1cb>
 628:	79 cf       	rjmp	.-270    	; 0x51c <__stack+0xbd>
				for (i=0; i<n; i++) {
					result[i] = readFromRegister(FIFODataReg);
				}
			}
			} else {
			status = MI_ERR;
 62a:	d2 e0       	ldi	r29, 0x02	; 2
 62c:	c0 e0       	ldi	r28, 0x00	; 0
		}
	}
	return status;
}
 62e:	8d 2f       	mov	r24, r29
 630:	9c 2f       	mov	r25, r28
 632:	df 91       	pop	r29
 634:	cf 91       	pop	r28
 636:	1f 91       	pop	r17
 638:	0f 91       	pop	r16
 63a:	ff 90       	pop	r15
 63c:	ef 90       	pop	r14
 63e:	df 90       	pop	r13
 640:	cf 90       	pop	r12
 642:	bf 90       	pop	r11
 644:	af 90       	pop	r10
 646:	9f 90       	pop	r9
 648:	8f 90       	pop	r8
 64a:	7f 90       	pop	r7
 64c:	6f 90       	pop	r6
 64e:	5f 90       	pop	r5
 650:	08 95       	ret

00000652 <_ZN7MFRC52210requestTagEhPh>:

int MFRC522::requestTag(uint8_t mode, uint8_t *data) {
 652:	af 92       	push	r10
 654:	bf 92       	push	r11
 656:	cf 92       	push	r12
 658:	df 92       	push	r13
 65a:	ef 92       	push	r14
 65c:	ff 92       	push	r15
 65e:	0f 93       	push	r16
 660:	1f 93       	push	r17
 662:	cf 93       	push	r28
 664:	df 93       	push	r29
 666:	00 d0       	rcall	.+0      	; 0x668 <_ZN7MFRC52210requestTagEhPh+0x16>
 668:	cd b7       	in	r28, 0x3d	; 61
 66a:	de b7       	in	r29, 0x3e	; 62
 66c:	5c 01       	movw	r10, r24
 66e:	16 2f       	mov	r17, r22
 670:	6a 01       	movw	r12, r20
	int status, len;
	writeToRegister(BitFramingReg, 0x07);  // TxLastBists = BitFramingReg[2..0]
 672:	47 e0       	ldi	r20, 0x07	; 7
 674:	6d e0       	ldi	r22, 0x0D	; 13
 676:	30 de       	rcall	.-928    	; 0x2d8 <_ZN7MFRC52215writeToRegisterEhh>

	data[0] = mode;
 678:	f6 01       	movw	r30, r12
 67a:	10 83       	st	Z, r17
	status = commandTag(MFRC522_TRANSCEIVE, data, 1, data, &len);
 67c:	ce 01       	movw	r24, r28
 67e:	01 96       	adiw	r24, 0x01	; 1
 680:	7c 01       	movw	r14, r24
 682:	86 01       	movw	r16, r12
 684:	21 e0       	ldi	r18, 0x01	; 1
 686:	30 e0       	ldi	r19, 0x00	; 0
 688:	a6 01       	movw	r20, r12
 68a:	6c e0       	ldi	r22, 0x0C	; 12
 68c:	c5 01       	movw	r24, r10
 68e:	d2 de       	rcall	.-604    	; 0x434 <_ZN7MFRC52210commandTagEhPhiS0_Pi>

	if ((status != MI_OK) || (len != 0x10)) {
 690:	00 97       	sbiw	r24, 0x00	; 0
 692:	41 f4       	brne	.+16     	; 0x6a4 <_ZN7MFRC52210requestTagEhPh+0x52>
 694:	29 81       	ldd	r18, Y+1	; 0x01
 696:	3a 81       	ldd	r19, Y+2	; 0x02
 698:	20 31       	cpi	r18, 0x10	; 16
 69a:	31 05       	cpc	r19, r1
 69c:	29 f0       	breq	.+10     	; 0x6a8 <_ZN7MFRC52210requestTagEhPh+0x56>
		status = MI_ERR;
 69e:	82 e0       	ldi	r24, 0x02	; 2
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <_ZN7MFRC52210requestTagEhPh+0x56>
 6a4:	82 e0       	ldi	r24, 0x02	; 2
 6a6:	90 e0       	ldi	r25, 0x00	; 0
	}

	return status;
}
 6a8:	0f 90       	pop	r0
 6aa:	0f 90       	pop	r0
 6ac:	df 91       	pop	r29
 6ae:	cf 91       	pop	r28
 6b0:	1f 91       	pop	r17
 6b2:	0f 91       	pop	r16
 6b4:	ff 90       	pop	r15
 6b6:	ef 90       	pop	r14
 6b8:	df 90       	pop	r13
 6ba:	cf 90       	pop	r12
 6bc:	bf 90       	pop	r11
 6be:	af 90       	pop	r10
 6c0:	08 95       	ret

000006c2 <_ZN7MFRC52213antiCollisionEPh>:

int MFRC522::antiCollision(uint8_t *serial) {
 6c2:	af 92       	push	r10
 6c4:	bf 92       	push	r11
 6c6:	cf 92       	push	r12
 6c8:	df 92       	push	r13
 6ca:	ef 92       	push	r14
 6cc:	ff 92       	push	r15
 6ce:	0f 93       	push	r16
 6d0:	1f 93       	push	r17
 6d2:	cf 93       	push	r28
 6d4:	df 93       	push	r29
 6d6:	00 d0       	rcall	.+0      	; 0x6d8 <_ZN7MFRC52213antiCollisionEPh+0x16>
 6d8:	cd b7       	in	r28, 0x3d	; 61
 6da:	de b7       	in	r29, 0x3e	; 62
 6dc:	5c 01       	movw	r10, r24
 6de:	6b 01       	movw	r12, r22
	int status, i, len;
	uint8_t check = 0x00;

	writeToRegister(BitFramingReg, 0x00);  // TxLastBits = BitFramingReg[2..0]
 6e0:	40 e0       	ldi	r20, 0x00	; 0
 6e2:	6d e0       	ldi	r22, 0x0D	; 13
 6e4:	f9 dd       	rcall	.-1038   	; 0x2d8 <_ZN7MFRC52215writeToRegisterEhh>

	serial[0] = MF1_ANTICOLL;
 6e6:	83 e9       	ldi	r24, 0x93	; 147
 6e8:	f6 01       	movw	r30, r12
 6ea:	80 83       	st	Z, r24
	serial[1] = 0x20;
 6ec:	80 e2       	ldi	r24, 0x20	; 32
 6ee:	81 83       	std	Z+1, r24	; 0x01
	status = commandTag(MFRC522_TRANSCEIVE, serial, 2, serial, &len);
 6f0:	ce 01       	movw	r24, r28
 6f2:	01 96       	adiw	r24, 0x01	; 1
 6f4:	7c 01       	movw	r14, r24
 6f6:	86 01       	movw	r16, r12
 6f8:	22 e0       	ldi	r18, 0x02	; 2
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	a6 01       	movw	r20, r12
 6fe:	6c e0       	ldi	r22, 0x0C	; 12
 700:	c5 01       	movw	r24, r10
 702:	98 de       	rcall	.-720    	; 0x434 <_ZN7MFRC52210commandTagEhPhiS0_Pi>
 704:	bc 01       	movw	r22, r24
	len = len / 8; // len is in bits, and we want each byte.
	if (status == MI_OK) {
 706:	89 2b       	or	r24, r25
 708:	49 f5       	brne	.+82     	; 0x75c <_ZN7MFRC52213antiCollisionEPh+0x9a>
	writeToRegister(BitFramingReg, 0x00);  // TxLastBits = BitFramingReg[2..0]

	serial[0] = MF1_ANTICOLL;
	serial[1] = 0x20;
	status = commandTag(MFRC522_TRANSCEIVE, serial, 2, serial, &len);
	len = len / 8; // len is in bits, and we want each byte.
 70a:	29 81       	ldd	r18, Y+1	; 0x01
 70c:	3a 81       	ldd	r19, Y+2	; 0x02
 70e:	33 23       	and	r19, r19
 710:	14 f4       	brge	.+4      	; 0x716 <_ZN7MFRC52213antiCollisionEPh+0x54>
 712:	29 5f       	subi	r18, 0xF9	; 249
 714:	3f 4f       	sbci	r19, 0xFF	; 255
 716:	35 95       	asr	r19
 718:	27 95       	ror	r18
 71a:	35 95       	asr	r19
 71c:	27 95       	ror	r18
 71e:	35 95       	asr	r19
 720:	27 95       	ror	r18
	if (status == MI_OK) {
		// The checksum of the tag is the ^ of all the values.
		for (i = 0; i < len-1; i++) {
 722:	c9 01       	movw	r24, r18
 724:	01 97       	sbiw	r24, 0x01	; 1
 726:	18 16       	cp	r1, r24
 728:	19 06       	cpc	r1, r25
 72a:	6c f4       	brge	.+26     	; 0x746 <_ZN7MFRC52213antiCollisionEPh+0x84>
 72c:	f6 01       	movw	r30, r12
 72e:	ac 01       	movw	r20, r24
 730:	d6 01       	movw	r26, r12
 732:	a8 0f       	add	r26, r24
 734:	b9 1f       	adc	r27, r25
 736:	90 e0       	ldi	r25, 0x00	; 0
			check ^= serial[i];
 738:	21 91       	ld	r18, Z+
 73a:	92 27       	eor	r25, r18
	serial[1] = 0x20;
	status = commandTag(MFRC522_TRANSCEIVE, serial, 2, serial, &len);
	len = len / 8; // len is in bits, and we want each byte.
	if (status == MI_OK) {
		// The checksum of the tag is the ^ of all the values.
		for (i = 0; i < len-1; i++) {
 73c:	ea 17       	cp	r30, r26
 73e:	fb 07       	cpc	r31, r27
 740:	d9 f7       	brne	.-10     	; 0x738 <_ZN7MFRC52213antiCollisionEPh+0x76>
 742:	9a 01       	movw	r18, r20
 744:	03 c0       	rjmp	.+6      	; 0x74c <_ZN7MFRC52213antiCollisionEPh+0x8a>
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	20 e0       	ldi	r18, 0x00	; 0
 74a:	30 e0       	ldi	r19, 0x00	; 0
			check ^= serial[i];
		}
		// The checksum should be the same as the one provided from the
		// tag (serial[4]).
		if (check != serial[i]) {
 74c:	f6 01       	movw	r30, r12
 74e:	e2 0f       	add	r30, r18
 750:	f3 1f       	adc	r31, r19
 752:	80 81       	ld	r24, Z
 754:	89 17       	cp	r24, r25
 756:	11 f0       	breq	.+4      	; 0x75c <_ZN7MFRC52213antiCollisionEPh+0x9a>
			status = MI_ERR;
 758:	62 e0       	ldi	r22, 0x02	; 2
 75a:	70 e0       	ldi	r23, 0x00	; 0
		}
	}

	return status;
}
 75c:	cb 01       	movw	r24, r22
 75e:	0f 90       	pop	r0
 760:	0f 90       	pop	r0
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
 766:	1f 91       	pop	r17
 768:	0f 91       	pop	r16
 76a:	ff 90       	pop	r15
 76c:	ef 90       	pop	r14
 76e:	df 90       	pop	r13
 770:	cf 90       	pop	r12
 772:	bf 90       	pop	r11
 774:	af 90       	pop	r10
 776:	08 95       	ret

00000778 <_ZN7MFRC52212calculateCRCEPhiS0_>:

void MFRC522::calculateCRC(uint8_t *data, int len, uint8_t *result) {
 778:	af 92       	push	r10
 77a:	bf 92       	push	r11
 77c:	cf 92       	push	r12
 77e:	df 92       	push	r13
 780:	ef 92       	push	r14
 782:	ff 92       	push	r15
 784:	0f 93       	push	r16
 786:	1f 93       	push	r17
 788:	cf 93       	push	r28
 78a:	df 93       	push	r29
 78c:	8c 01       	movw	r16, r24
 78e:	5b 01       	movw	r10, r22
 790:	6a 01       	movw	r12, r20
 792:	79 01       	movw	r14, r18
	int i;
	uint8_t n;

	clearBitMask(DivIrqReg, 0x04);   // CRCIrq = 0
 794:	44 e0       	ldi	r20, 0x04	; 4
 796:	65 e0       	ldi	r22, 0x05	; 5
 798:	0b de       	rcall	.-1002   	; 0x3b0 <_ZN7MFRC52212clearBitMaskEhh>
	setBitMask(FIFOLevelReg, 0x80);  // Clear the FIFO pointer
 79a:	40 e8       	ldi	r20, 0x80	; 128
 79c:	6a e0       	ldi	r22, 0x0A	; 10
 79e:	c8 01       	movw	r24, r16
 7a0:	f5 dd       	rcall	.-1046   	; 0x38c <_ZN7MFRC52210setBitMaskEhh>

	//Writing data to the FIFO.
	for (i = 0; i < len; i++) {
 7a2:	1c 14       	cp	r1, r12
 7a4:	1d 04       	cpc	r1, r13
 7a6:	54 f4       	brge	.+20     	; 0x7bc <_ZN7MFRC52212calculateCRCEPhiS0_+0x44>
 7a8:	e5 01       	movw	r28, r10
 7aa:	ca 0c       	add	r12, r10
 7ac:	db 1c       	adc	r13, r11
		writeToRegister(FIFODataReg, data[i]);
 7ae:	49 91       	ld	r20, Y+
 7b0:	69 e0       	ldi	r22, 0x09	; 9
 7b2:	c8 01       	movw	r24, r16
 7b4:	91 dd       	rcall	.-1246   	; 0x2d8 <_ZN7MFRC52215writeToRegisterEhh>

	clearBitMask(DivIrqReg, 0x04);   // CRCIrq = 0
	setBitMask(FIFOLevelReg, 0x80);  // Clear the FIFO pointer

	//Writing data to the FIFO.
	for (i = 0; i < len; i++) {
 7b6:	cc 15       	cp	r28, r12
 7b8:	dd 05       	cpc	r29, r13
 7ba:	c9 f7       	brne	.-14     	; 0x7ae <_ZN7MFRC52212calculateCRCEPhiS0_+0x36>
		writeToRegister(FIFODataReg, data[i]);
	}
	writeToRegister(CommandReg, MFRC522_CALCCRC);
 7bc:	43 e0       	ldi	r20, 0x03	; 3
 7be:	61 e0       	ldi	r22, 0x01	; 1
 7c0:	c8 01       	movw	r24, r16
 7c2:	8a dd       	rcall	.-1260   	; 0x2d8 <_ZN7MFRC52215writeToRegisterEhh>

	// Wait for the CRC calculation to complete.
	i = 0xFF;
	do {
		n = readFromRegister(DivIrqReg);
 7c4:	65 e0       	ldi	r22, 0x05	; 5
 7c6:	c8 01       	movw	r24, r16
 7c8:	b3 dd       	rcall	.-1178   	; 0x330 <_ZN7MFRC52216readFromRegisterEh>
 7ca:	ce ef       	ldi	r28, 0xFE	; 254
 7cc:	d0 e0       	ldi	r29, 0x00	; 0
 7ce:	05 c0       	rjmp	.+10     	; 0x7da <_ZN7MFRC52212calculateCRCEPhiS0_+0x62>
 7d0:	65 e0       	ldi	r22, 0x05	; 5
 7d2:	c8 01       	movw	r24, r16
 7d4:	ad dd       	rcall	.-1190   	; 0x330 <_ZN7MFRC52216readFromRegisterEh>
 7d6:	21 97       	sbiw	r28, 0x01	; 1
		i--;
	} while ((i != 0) && !(n & 0x04));  //CRCIrq = 1
 7d8:	11 f0       	breq	.+4      	; 0x7de <_ZN7MFRC52212calculateCRCEPhiS0_+0x66>
 7da:	82 ff       	sbrs	r24, 2
 7dc:	f9 cf       	rjmp	.-14     	; 0x7d0 <_ZN7MFRC52212calculateCRCEPhiS0_+0x58>

	// Read the result from the CRC calculation.
	result[0] = readFromRegister(CRCResultRegL);
 7de:	62 e2       	ldi	r22, 0x22	; 34
 7e0:	c8 01       	movw	r24, r16
 7e2:	a6 dd       	rcall	.-1204   	; 0x330 <_ZN7MFRC52216readFromRegisterEh>
 7e4:	f7 01       	movw	r30, r14
 7e6:	80 83       	st	Z, r24
	result[1] = readFromRegister(CRCResultRegM);
 7e8:	61 e2       	ldi	r22, 0x21	; 33
 7ea:	c8 01       	movw	r24, r16
 7ec:	a1 dd       	rcall	.-1214   	; 0x330 <_ZN7MFRC52216readFromRegisterEh>
 7ee:	f7 01       	movw	r30, r14
 7f0:	81 83       	std	Z+1, r24	; 0x01
}
 7f2:	df 91       	pop	r29
 7f4:	cf 91       	pop	r28
 7f6:	1f 91       	pop	r17
 7f8:	0f 91       	pop	r16
 7fa:	ff 90       	pop	r15
 7fc:	ef 90       	pop	r14
 7fe:	df 90       	pop	r13
 800:	cf 90       	pop	r12
 802:	bf 90       	pop	r11
 804:	af 90       	pop	r10
 806:	08 95       	ret

00000808 <_ZN7MFRC5229selectTagEPh>:

uint8_t MFRC522::selectTag(uint8_t *serial) {
 808:	cf 92       	push	r12
 80a:	df 92       	push	r13
 80c:	ef 92       	push	r14
 80e:	ff 92       	push	r15
 810:	0f 93       	push	r16
 812:	1f 93       	push	r17
 814:	cf 93       	push	r28
 816:	df 93       	push	r29
 818:	cd b7       	in	r28, 0x3d	; 61
 81a:	de b7       	in	r29, 0x3e	; 62
 81c:	2b 97       	sbiw	r28, 0x0b	; 11
 81e:	0f b6       	in	r0, 0x3f	; 63
 820:	f8 94       	cli
 822:	de bf       	out	0x3e, r29	; 62
 824:	0f be       	out	0x3f, r0	; 63
 826:	cd bf       	out	0x3d, r28	; 61
 828:	6c 01       	movw	r12, r24
	int i, status, len;
	uint8_t sak;
	uint8_t buffer[9];

	buffer[0] = MF1_SELECTTAG;
 82a:	83 e9       	ldi	r24, 0x93	; 147
 82c:	8b 83       	std	Y+3, r24	; 0x03
	buffer[1] = 0x70;
 82e:	80 e7       	ldi	r24, 0x70	; 112
 830:	8c 83       	std	Y+4, r24	; 0x04
 832:	a6 2f       	mov	r26, r22
 834:	b7 2f       	mov	r27, r23
 836:	fe 01       	movw	r30, r28
 838:	35 96       	adiw	r30, 0x05	; 5
 83a:	9e 01       	movw	r18, r28
 83c:	26 5f       	subi	r18, 0xF6	; 246
 83e:	3f 4f       	sbci	r19, 0xFF	; 255
	for (i = 0; i < 5; i++) {
		buffer[i+2] = serial[i];
 840:	8d 91       	ld	r24, X+
 842:	81 93       	st	Z+, r24
	uint8_t sak;
	uint8_t buffer[9];

	buffer[0] = MF1_SELECTTAG;
	buffer[1] = 0x70;
	for (i = 0; i < 5; i++) {
 844:	e2 17       	cp	r30, r18
 846:	f3 07       	cpc	r31, r19
 848:	d9 f7       	brne	.-10     	; 0x840 <_ZN7MFRC5229selectTagEPh+0x38>
		buffer[i+2] = serial[i];
	}
	calculateCRC(buffer, 7, &buffer[7]);
 84a:	9e 01       	movw	r18, r28
 84c:	26 5f       	subi	r18, 0xF6	; 246
 84e:	3f 4f       	sbci	r19, 0xFF	; 255
 850:	47 e0       	ldi	r20, 0x07	; 7
 852:	50 e0       	ldi	r21, 0x00	; 0
 854:	be 01       	movw	r22, r28
 856:	6d 5f       	subi	r22, 0xFD	; 253
 858:	7f 4f       	sbci	r23, 0xFF	; 255
 85a:	c6 01       	movw	r24, r12
 85c:	8d df       	rcall	.-230    	; 0x778 <_ZN7MFRC52212calculateCRCEPhiS0_>

	status = commandTag(MFRC522_TRANSCEIVE, buffer, 9, buffer, &len);
 85e:	ce 01       	movw	r24, r28
 860:	01 96       	adiw	r24, 0x01	; 1
 862:	7c 01       	movw	r14, r24
 864:	8e 01       	movw	r16, r28
 866:	0d 5f       	subi	r16, 0xFD	; 253
 868:	1f 4f       	sbci	r17, 0xFF	; 255
 86a:	29 e0       	ldi	r18, 0x09	; 9
 86c:	30 e0       	ldi	r19, 0x00	; 0
 86e:	a8 01       	movw	r20, r16
 870:	6c e0       	ldi	r22, 0x0C	; 12
 872:	c6 01       	movw	r24, r12
 874:	df dd       	rcall	.-1090   	; 0x434 <_ZN7MFRC52210commandTagEhPhiS0_Pi>

	if ((status == MI_OK) && (len == 0x18)) {
 876:	89 2b       	or	r24, r25
 878:	31 f4       	brne	.+12     	; 0x886 <_ZN7MFRC5229selectTagEPh+0x7e>
 87a:	89 81       	ldd	r24, Y+1	; 0x01
 87c:	9a 81       	ldd	r25, Y+2	; 0x02
 87e:	48 97       	sbiw	r24, 0x18	; 24
 880:	21 f4       	brne	.+8      	; 0x88a <_ZN7MFRC5229selectTagEPh+0x82>
		sak = buffer[0];
 882:	8b 81       	ldd	r24, Y+3	; 0x03
 884:	03 c0       	rjmp	.+6      	; 0x88c <_ZN7MFRC5229selectTagEPh+0x84>
	}
	else {
		sak = 0;
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	01 c0       	rjmp	.+2      	; 0x88c <_ZN7MFRC5229selectTagEPh+0x84>
 88a:	80 e0       	ldi	r24, 0x00	; 0
	}

	return sak;
}
 88c:	2b 96       	adiw	r28, 0x0b	; 11
 88e:	0f b6       	in	r0, 0x3f	; 63
 890:	f8 94       	cli
 892:	de bf       	out	0x3e, r29	; 62
 894:	0f be       	out	0x3f, r0	; 63
 896:	cd bf       	out	0x3d, r28	; 61
 898:	df 91       	pop	r29
 89a:	cf 91       	pop	r28
 89c:	1f 91       	pop	r17
 89e:	0f 91       	pop	r16
 8a0:	ff 90       	pop	r15
 8a2:	ef 90       	pop	r14
 8a4:	df 90       	pop	r13
 8a6:	cf 90       	pop	r12
 8a8:	08 95       	ret

000008aa <_ZN7MFRC5227haltTagEv>:

int MFRC522::haltTag() {
 8aa:	cf 92       	push	r12
 8ac:	df 92       	push	r13
 8ae:	ef 92       	push	r14
 8b0:	ff 92       	push	r15
 8b2:	0f 93       	push	r16
 8b4:	1f 93       	push	r17
 8b6:	cf 93       	push	r28
 8b8:	df 93       	push	r29
 8ba:	00 d0       	rcall	.+0      	; 0x8bc <_ZN7MFRC5227haltTagEv+0x12>
 8bc:	00 d0       	rcall	.+0      	; 0x8be <_ZN7MFRC5227haltTagEv+0x14>
 8be:	00 d0       	rcall	.+0      	; 0x8c0 <_ZN7MFRC5227haltTagEv+0x16>
 8c0:	cd b7       	in	r28, 0x3d	; 61
 8c2:	de b7       	in	r29, 0x3e	; 62
 8c4:	6c 01       	movw	r12, r24
	int status, len;
	uint8_t buffer[4];

	buffer[0] = MF1_HALT;
 8c6:	80 e5       	ldi	r24, 0x50	; 80
 8c8:	8b 83       	std	Y+3, r24	; 0x03
	buffer[1] = 0;
 8ca:	1c 82       	std	Y+4, r1	; 0x04
	calculateCRC(buffer, 2, &buffer[2]);
 8cc:	9e 01       	movw	r18, r28
 8ce:	2b 5f       	subi	r18, 0xFB	; 251
 8d0:	3f 4f       	sbci	r19, 0xFF	; 255
 8d2:	42 e0       	ldi	r20, 0x02	; 2
 8d4:	50 e0       	ldi	r21, 0x00	; 0
 8d6:	be 01       	movw	r22, r28
 8d8:	6d 5f       	subi	r22, 0xFD	; 253
 8da:	7f 4f       	sbci	r23, 0xFF	; 255
 8dc:	c6 01       	movw	r24, r12
 8de:	4c df       	rcall	.-360    	; 0x778 <_ZN7MFRC52212calculateCRCEPhiS0_>
	status = commandTag(MFRC522_TRANSCEIVE, buffer, 4, buffer, &len);
 8e0:	ce 01       	movw	r24, r28
 8e2:	01 96       	adiw	r24, 0x01	; 1
 8e4:	7c 01       	movw	r14, r24
 8e6:	8e 01       	movw	r16, r28
 8e8:	0d 5f       	subi	r16, 0xFD	; 253
 8ea:	1f 4f       	sbci	r17, 0xFF	; 255
 8ec:	24 e0       	ldi	r18, 0x04	; 4
 8ee:	30 e0       	ldi	r19, 0x00	; 0
 8f0:	a8 01       	movw	r20, r16
 8f2:	6c e0       	ldi	r22, 0x0C	; 12
 8f4:	c6 01       	movw	r24, r12
 8f6:	9e dd       	rcall	.-1220   	; 0x434 <_ZN7MFRC52210commandTagEhPhiS0_Pi>
 8f8:	8c 01       	movw	r16, r24
	clearBitMask(Status2Reg, 0x08);  // turn off encryption
 8fa:	48 e0       	ldi	r20, 0x08	; 8
 8fc:	68 e0       	ldi	r22, 0x08	; 8
 8fe:	c6 01       	movw	r24, r12
 900:	57 dd       	rcall	.-1362   	; 0x3b0 <_ZN7MFRC52212clearBitMaskEhh>
	return status;
 902:	c8 01       	movw	r24, r16
 904:	26 96       	adiw	r28, 0x06	; 6
 906:	0f b6       	in	r0, 0x3f	; 63
 908:	f8 94       	cli
 90a:	de bf       	out	0x3e, r29	; 62
 90c:	0f be       	out	0x3f, r0	; 63
 90e:	cd bf       	out	0x3d, r28	; 61
 910:	df 91       	pop	r29
 912:	cf 91       	pop	r28
 914:	1f 91       	pop	r17
 916:	0f 91       	pop	r16
 918:	ff 90       	pop	r15
 91a:	ef 90       	pop	r14
 91c:	df 90       	pop	r13
 91e:	cf 90       	pop	r12
 920:	08 95       	ret

00000922 <__divmodhi4>:
 922:	97 fb       	bst	r25, 7
 924:	07 2e       	mov	r0, r23
 926:	16 f4       	brtc	.+4      	; 0x92c <__divmodhi4+0xa>
 928:	00 94       	com	r0
 92a:	06 d0       	rcall	.+12     	; 0x938 <__divmodhi4_neg1>
 92c:	77 fd       	sbrc	r23, 7
 92e:	08 d0       	rcall	.+16     	; 0x940 <__divmodhi4_neg2>
 930:	0b d0       	rcall	.+22     	; 0x948 <__udivmodhi4>
 932:	07 fc       	sbrc	r0, 7
 934:	05 d0       	rcall	.+10     	; 0x940 <__divmodhi4_neg2>
 936:	3e f4       	brtc	.+14     	; 0x946 <__divmodhi4_exit>

00000938 <__divmodhi4_neg1>:
 938:	90 95       	com	r25
 93a:	81 95       	neg	r24
 93c:	9f 4f       	sbci	r25, 0xFF	; 255
 93e:	08 95       	ret

00000940 <__divmodhi4_neg2>:
 940:	70 95       	com	r23
 942:	61 95       	neg	r22
 944:	7f 4f       	sbci	r23, 0xFF	; 255

00000946 <__divmodhi4_exit>:
 946:	08 95       	ret

00000948 <__udivmodhi4>:
 948:	aa 1b       	sub	r26, r26
 94a:	bb 1b       	sub	r27, r27
 94c:	51 e1       	ldi	r21, 0x11	; 17
 94e:	07 c0       	rjmp	.+14     	; 0x95e <__udivmodhi4_ep>

00000950 <__udivmodhi4_loop>:
 950:	aa 1f       	adc	r26, r26
 952:	bb 1f       	adc	r27, r27
 954:	a6 17       	cp	r26, r22
 956:	b7 07       	cpc	r27, r23
 958:	10 f0       	brcs	.+4      	; 0x95e <__udivmodhi4_ep>
 95a:	a6 1b       	sub	r26, r22
 95c:	b7 0b       	sbc	r27, r23

0000095e <__udivmodhi4_ep>:
 95e:	88 1f       	adc	r24, r24
 960:	99 1f       	adc	r25, r25
 962:	5a 95       	dec	r21
 964:	a9 f7       	brne	.-22     	; 0x950 <__udivmodhi4_loop>
 966:	80 95       	com	r24
 968:	90 95       	com	r25
 96a:	bc 01       	movw	r22, r24
 96c:	cd 01       	movw	r24, r26
 96e:	08 95       	ret

00000970 <__tablejump2__>:
 970:	ee 0f       	add	r30, r30
 972:	ff 1f       	adc	r31, r31
 974:	05 90       	lpm	r0, Z+
 976:	f4 91       	lpm	r31, Z
 978:	e0 2d       	mov	r30, r0
 97a:	09 94       	ijmp

0000097c <sprintf>:
 97c:	ae e0       	ldi	r26, 0x0E	; 14
 97e:	b0 e0       	ldi	r27, 0x00	; 0
 980:	e3 ec       	ldi	r30, 0xC3	; 195
 982:	f4 e0       	ldi	r31, 0x04	; 4
 984:	bf c2       	rjmp	.+1406   	; 0xf04 <__prologue_saves__+0x1c>
 986:	0d 89       	ldd	r16, Y+21	; 0x15
 988:	1e 89       	ldd	r17, Y+22	; 0x16
 98a:	86 e0       	ldi	r24, 0x06	; 6
 98c:	8c 83       	std	Y+4, r24	; 0x04
 98e:	1a 83       	std	Y+2, r17	; 0x02
 990:	09 83       	std	Y+1, r16	; 0x01
 992:	8f ef       	ldi	r24, 0xFF	; 255
 994:	9f e7       	ldi	r25, 0x7F	; 127
 996:	9e 83       	std	Y+6, r25	; 0x06
 998:	8d 83       	std	Y+5, r24	; 0x05
 99a:	ae 01       	movw	r20, r28
 99c:	47 5e       	subi	r20, 0xE7	; 231
 99e:	5f 4f       	sbci	r21, 0xFF	; 255
 9a0:	6f 89       	ldd	r22, Y+23	; 0x17
 9a2:	78 8d       	ldd	r23, Y+24	; 0x18
 9a4:	ce 01       	movw	r24, r28
 9a6:	01 96       	adiw	r24, 0x01	; 1
 9a8:	08 d0       	rcall	.+16     	; 0x9ba <vfprintf>
 9aa:	ef 81       	ldd	r30, Y+7	; 0x07
 9ac:	f8 85       	ldd	r31, Y+8	; 0x08
 9ae:	e0 0f       	add	r30, r16
 9b0:	f1 1f       	adc	r31, r17
 9b2:	10 82       	st	Z, r1
 9b4:	2e 96       	adiw	r28, 0x0e	; 14
 9b6:	e4 e0       	ldi	r30, 0x04	; 4
 9b8:	c1 c2       	rjmp	.+1410   	; 0xf3c <__epilogue_restores__+0x1c>

000009ba <vfprintf>:
 9ba:	ab e0       	ldi	r26, 0x0B	; 11
 9bc:	b0 e0       	ldi	r27, 0x00	; 0
 9be:	e2 ee       	ldi	r30, 0xE2	; 226
 9c0:	f4 e0       	ldi	r31, 0x04	; 4
 9c2:	92 c2       	rjmp	.+1316   	; 0xee8 <__prologue_saves__>
 9c4:	6c 01       	movw	r12, r24
 9c6:	7b 01       	movw	r14, r22
 9c8:	8a 01       	movw	r16, r20
 9ca:	fc 01       	movw	r30, r24
 9cc:	17 82       	std	Z+7, r1	; 0x07
 9ce:	16 82       	std	Z+6, r1	; 0x06
 9d0:	83 81       	ldd	r24, Z+3	; 0x03
 9d2:	81 ff       	sbrs	r24, 1
 9d4:	bf c1       	rjmp	.+894    	; 0xd54 <vfprintf+0x39a>
 9d6:	ce 01       	movw	r24, r28
 9d8:	01 96       	adiw	r24, 0x01	; 1
 9da:	3c 01       	movw	r6, r24
 9dc:	f6 01       	movw	r30, r12
 9de:	93 81       	ldd	r25, Z+3	; 0x03
 9e0:	f7 01       	movw	r30, r14
 9e2:	93 fd       	sbrc	r25, 3
 9e4:	85 91       	lpm	r24, Z+
 9e6:	93 ff       	sbrs	r25, 3
 9e8:	81 91       	ld	r24, Z+
 9ea:	7f 01       	movw	r14, r30
 9ec:	88 23       	and	r24, r24
 9ee:	09 f4       	brne	.+2      	; 0x9f2 <vfprintf+0x38>
 9f0:	ad c1       	rjmp	.+858    	; 0xd4c <vfprintf+0x392>
 9f2:	85 32       	cpi	r24, 0x25	; 37
 9f4:	39 f4       	brne	.+14     	; 0xa04 <vfprintf+0x4a>
 9f6:	93 fd       	sbrc	r25, 3
 9f8:	85 91       	lpm	r24, Z+
 9fa:	93 ff       	sbrs	r25, 3
 9fc:	81 91       	ld	r24, Z+
 9fe:	7f 01       	movw	r14, r30
 a00:	85 32       	cpi	r24, 0x25	; 37
 a02:	21 f4       	brne	.+8      	; 0xa0c <vfprintf+0x52>
 a04:	b6 01       	movw	r22, r12
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	c0 d1       	rcall	.+896    	; 0xd8a <fputc>
 a0a:	e8 cf       	rjmp	.-48     	; 0x9dc <vfprintf+0x22>
 a0c:	91 2c       	mov	r9, r1
 a0e:	21 2c       	mov	r2, r1
 a10:	31 2c       	mov	r3, r1
 a12:	ff e1       	ldi	r31, 0x1F	; 31
 a14:	f3 15       	cp	r31, r3
 a16:	d8 f0       	brcs	.+54     	; 0xa4e <vfprintf+0x94>
 a18:	8b 32       	cpi	r24, 0x2B	; 43
 a1a:	79 f0       	breq	.+30     	; 0xa3a <vfprintf+0x80>
 a1c:	38 f4       	brcc	.+14     	; 0xa2c <vfprintf+0x72>
 a1e:	80 32       	cpi	r24, 0x20	; 32
 a20:	79 f0       	breq	.+30     	; 0xa40 <vfprintf+0x86>
 a22:	83 32       	cpi	r24, 0x23	; 35
 a24:	a1 f4       	brne	.+40     	; 0xa4e <vfprintf+0x94>
 a26:	23 2d       	mov	r18, r3
 a28:	20 61       	ori	r18, 0x10	; 16
 a2a:	1d c0       	rjmp	.+58     	; 0xa66 <vfprintf+0xac>
 a2c:	8d 32       	cpi	r24, 0x2D	; 45
 a2e:	61 f0       	breq	.+24     	; 0xa48 <vfprintf+0x8e>
 a30:	80 33       	cpi	r24, 0x30	; 48
 a32:	69 f4       	brne	.+26     	; 0xa4e <vfprintf+0x94>
 a34:	23 2d       	mov	r18, r3
 a36:	21 60       	ori	r18, 0x01	; 1
 a38:	16 c0       	rjmp	.+44     	; 0xa66 <vfprintf+0xac>
 a3a:	83 2d       	mov	r24, r3
 a3c:	82 60       	ori	r24, 0x02	; 2
 a3e:	38 2e       	mov	r3, r24
 a40:	e3 2d       	mov	r30, r3
 a42:	e4 60       	ori	r30, 0x04	; 4
 a44:	3e 2e       	mov	r3, r30
 a46:	2a c0       	rjmp	.+84     	; 0xa9c <vfprintf+0xe2>
 a48:	f3 2d       	mov	r31, r3
 a4a:	f8 60       	ori	r31, 0x08	; 8
 a4c:	1d c0       	rjmp	.+58     	; 0xa88 <vfprintf+0xce>
 a4e:	37 fc       	sbrc	r3, 7
 a50:	2d c0       	rjmp	.+90     	; 0xaac <vfprintf+0xf2>
 a52:	20 ed       	ldi	r18, 0xD0	; 208
 a54:	28 0f       	add	r18, r24
 a56:	2a 30       	cpi	r18, 0x0A	; 10
 a58:	40 f0       	brcs	.+16     	; 0xa6a <vfprintf+0xb0>
 a5a:	8e 32       	cpi	r24, 0x2E	; 46
 a5c:	b9 f4       	brne	.+46     	; 0xa8c <vfprintf+0xd2>
 a5e:	36 fc       	sbrc	r3, 6
 a60:	75 c1       	rjmp	.+746    	; 0xd4c <vfprintf+0x392>
 a62:	23 2d       	mov	r18, r3
 a64:	20 64       	ori	r18, 0x40	; 64
 a66:	32 2e       	mov	r3, r18
 a68:	19 c0       	rjmp	.+50     	; 0xa9c <vfprintf+0xe2>
 a6a:	36 fe       	sbrs	r3, 6
 a6c:	06 c0       	rjmp	.+12     	; 0xa7a <vfprintf+0xc0>
 a6e:	8a e0       	ldi	r24, 0x0A	; 10
 a70:	98 9e       	mul	r9, r24
 a72:	20 0d       	add	r18, r0
 a74:	11 24       	eor	r1, r1
 a76:	92 2e       	mov	r9, r18
 a78:	11 c0       	rjmp	.+34     	; 0xa9c <vfprintf+0xe2>
 a7a:	ea e0       	ldi	r30, 0x0A	; 10
 a7c:	2e 9e       	mul	r2, r30
 a7e:	20 0d       	add	r18, r0
 a80:	11 24       	eor	r1, r1
 a82:	22 2e       	mov	r2, r18
 a84:	f3 2d       	mov	r31, r3
 a86:	f0 62       	ori	r31, 0x20	; 32
 a88:	3f 2e       	mov	r3, r31
 a8a:	08 c0       	rjmp	.+16     	; 0xa9c <vfprintf+0xe2>
 a8c:	8c 36       	cpi	r24, 0x6C	; 108
 a8e:	21 f4       	brne	.+8      	; 0xa98 <vfprintf+0xde>
 a90:	83 2d       	mov	r24, r3
 a92:	80 68       	ori	r24, 0x80	; 128
 a94:	38 2e       	mov	r3, r24
 a96:	02 c0       	rjmp	.+4      	; 0xa9c <vfprintf+0xe2>
 a98:	88 36       	cpi	r24, 0x68	; 104
 a9a:	41 f4       	brne	.+16     	; 0xaac <vfprintf+0xf2>
 a9c:	f7 01       	movw	r30, r14
 a9e:	93 fd       	sbrc	r25, 3
 aa0:	85 91       	lpm	r24, Z+
 aa2:	93 ff       	sbrs	r25, 3
 aa4:	81 91       	ld	r24, Z+
 aa6:	7f 01       	movw	r14, r30
 aa8:	81 11       	cpse	r24, r1
 aaa:	b3 cf       	rjmp	.-154    	; 0xa12 <vfprintf+0x58>
 aac:	98 2f       	mov	r25, r24
 aae:	9f 7d       	andi	r25, 0xDF	; 223
 ab0:	95 54       	subi	r25, 0x45	; 69
 ab2:	93 30       	cpi	r25, 0x03	; 3
 ab4:	28 f4       	brcc	.+10     	; 0xac0 <vfprintf+0x106>
 ab6:	0c 5f       	subi	r16, 0xFC	; 252
 ab8:	1f 4f       	sbci	r17, 0xFF	; 255
 aba:	9f e3       	ldi	r25, 0x3F	; 63
 abc:	99 83       	std	Y+1, r25	; 0x01
 abe:	0d c0       	rjmp	.+26     	; 0xada <vfprintf+0x120>
 ac0:	83 36       	cpi	r24, 0x63	; 99
 ac2:	31 f0       	breq	.+12     	; 0xad0 <vfprintf+0x116>
 ac4:	83 37       	cpi	r24, 0x73	; 115
 ac6:	71 f0       	breq	.+28     	; 0xae4 <vfprintf+0x12a>
 ac8:	83 35       	cpi	r24, 0x53	; 83
 aca:	09 f0       	breq	.+2      	; 0xace <vfprintf+0x114>
 acc:	55 c0       	rjmp	.+170    	; 0xb78 <vfprintf+0x1be>
 ace:	20 c0       	rjmp	.+64     	; 0xb10 <vfprintf+0x156>
 ad0:	f8 01       	movw	r30, r16
 ad2:	80 81       	ld	r24, Z
 ad4:	89 83       	std	Y+1, r24	; 0x01
 ad6:	0e 5f       	subi	r16, 0xFE	; 254
 ad8:	1f 4f       	sbci	r17, 0xFF	; 255
 ada:	88 24       	eor	r8, r8
 adc:	83 94       	inc	r8
 ade:	91 2c       	mov	r9, r1
 ae0:	53 01       	movw	r10, r6
 ae2:	12 c0       	rjmp	.+36     	; 0xb08 <vfprintf+0x14e>
 ae4:	28 01       	movw	r4, r16
 ae6:	f2 e0       	ldi	r31, 0x02	; 2
 ae8:	4f 0e       	add	r4, r31
 aea:	51 1c       	adc	r5, r1
 aec:	f8 01       	movw	r30, r16
 aee:	a0 80       	ld	r10, Z
 af0:	b1 80       	ldd	r11, Z+1	; 0x01
 af2:	36 fe       	sbrs	r3, 6
 af4:	03 c0       	rjmp	.+6      	; 0xafc <vfprintf+0x142>
 af6:	69 2d       	mov	r22, r9
 af8:	70 e0       	ldi	r23, 0x00	; 0
 afa:	02 c0       	rjmp	.+4      	; 0xb00 <vfprintf+0x146>
 afc:	6f ef       	ldi	r22, 0xFF	; 255
 afe:	7f ef       	ldi	r23, 0xFF	; 255
 b00:	c5 01       	movw	r24, r10
 b02:	38 d1       	rcall	.+624    	; 0xd74 <strnlen>
 b04:	4c 01       	movw	r8, r24
 b06:	82 01       	movw	r16, r4
 b08:	f3 2d       	mov	r31, r3
 b0a:	ff 77       	andi	r31, 0x7F	; 127
 b0c:	3f 2e       	mov	r3, r31
 b0e:	15 c0       	rjmp	.+42     	; 0xb3a <vfprintf+0x180>
 b10:	28 01       	movw	r4, r16
 b12:	22 e0       	ldi	r18, 0x02	; 2
 b14:	42 0e       	add	r4, r18
 b16:	51 1c       	adc	r5, r1
 b18:	f8 01       	movw	r30, r16
 b1a:	a0 80       	ld	r10, Z
 b1c:	b1 80       	ldd	r11, Z+1	; 0x01
 b1e:	36 fe       	sbrs	r3, 6
 b20:	03 c0       	rjmp	.+6      	; 0xb28 <vfprintf+0x16e>
 b22:	69 2d       	mov	r22, r9
 b24:	70 e0       	ldi	r23, 0x00	; 0
 b26:	02 c0       	rjmp	.+4      	; 0xb2c <vfprintf+0x172>
 b28:	6f ef       	ldi	r22, 0xFF	; 255
 b2a:	7f ef       	ldi	r23, 0xFF	; 255
 b2c:	c5 01       	movw	r24, r10
 b2e:	17 d1       	rcall	.+558    	; 0xd5e <strnlen_P>
 b30:	4c 01       	movw	r8, r24
 b32:	f3 2d       	mov	r31, r3
 b34:	f0 68       	ori	r31, 0x80	; 128
 b36:	3f 2e       	mov	r3, r31
 b38:	82 01       	movw	r16, r4
 b3a:	33 fc       	sbrc	r3, 3
 b3c:	19 c0       	rjmp	.+50     	; 0xb70 <vfprintf+0x1b6>
 b3e:	82 2d       	mov	r24, r2
 b40:	90 e0       	ldi	r25, 0x00	; 0
 b42:	88 16       	cp	r8, r24
 b44:	99 06       	cpc	r9, r25
 b46:	a0 f4       	brcc	.+40     	; 0xb70 <vfprintf+0x1b6>
 b48:	b6 01       	movw	r22, r12
 b4a:	80 e2       	ldi	r24, 0x20	; 32
 b4c:	90 e0       	ldi	r25, 0x00	; 0
 b4e:	1d d1       	rcall	.+570    	; 0xd8a <fputc>
 b50:	2a 94       	dec	r2
 b52:	f5 cf       	rjmp	.-22     	; 0xb3e <vfprintf+0x184>
 b54:	f5 01       	movw	r30, r10
 b56:	37 fc       	sbrc	r3, 7
 b58:	85 91       	lpm	r24, Z+
 b5a:	37 fe       	sbrs	r3, 7
 b5c:	81 91       	ld	r24, Z+
 b5e:	5f 01       	movw	r10, r30
 b60:	b6 01       	movw	r22, r12
 b62:	90 e0       	ldi	r25, 0x00	; 0
 b64:	12 d1       	rcall	.+548    	; 0xd8a <fputc>
 b66:	21 10       	cpse	r2, r1
 b68:	2a 94       	dec	r2
 b6a:	21 e0       	ldi	r18, 0x01	; 1
 b6c:	82 1a       	sub	r8, r18
 b6e:	91 08       	sbc	r9, r1
 b70:	81 14       	cp	r8, r1
 b72:	91 04       	cpc	r9, r1
 b74:	79 f7       	brne	.-34     	; 0xb54 <vfprintf+0x19a>
 b76:	e1 c0       	rjmp	.+450    	; 0xd3a <vfprintf+0x380>
 b78:	84 36       	cpi	r24, 0x64	; 100
 b7a:	11 f0       	breq	.+4      	; 0xb80 <vfprintf+0x1c6>
 b7c:	89 36       	cpi	r24, 0x69	; 105
 b7e:	39 f5       	brne	.+78     	; 0xbce <vfprintf+0x214>
 b80:	f8 01       	movw	r30, r16
 b82:	37 fe       	sbrs	r3, 7
 b84:	07 c0       	rjmp	.+14     	; 0xb94 <vfprintf+0x1da>
 b86:	60 81       	ld	r22, Z
 b88:	71 81       	ldd	r23, Z+1	; 0x01
 b8a:	82 81       	ldd	r24, Z+2	; 0x02
 b8c:	93 81       	ldd	r25, Z+3	; 0x03
 b8e:	0c 5f       	subi	r16, 0xFC	; 252
 b90:	1f 4f       	sbci	r17, 0xFF	; 255
 b92:	08 c0       	rjmp	.+16     	; 0xba4 <vfprintf+0x1ea>
 b94:	60 81       	ld	r22, Z
 b96:	71 81       	ldd	r23, Z+1	; 0x01
 b98:	07 2e       	mov	r0, r23
 b9a:	00 0c       	add	r0, r0
 b9c:	88 0b       	sbc	r24, r24
 b9e:	99 0b       	sbc	r25, r25
 ba0:	0e 5f       	subi	r16, 0xFE	; 254
 ba2:	1f 4f       	sbci	r17, 0xFF	; 255
 ba4:	f3 2d       	mov	r31, r3
 ba6:	ff 76       	andi	r31, 0x6F	; 111
 ba8:	3f 2e       	mov	r3, r31
 baa:	97 ff       	sbrs	r25, 7
 bac:	09 c0       	rjmp	.+18     	; 0xbc0 <vfprintf+0x206>
 bae:	90 95       	com	r25
 bb0:	80 95       	com	r24
 bb2:	70 95       	com	r23
 bb4:	61 95       	neg	r22
 bb6:	7f 4f       	sbci	r23, 0xFF	; 255
 bb8:	8f 4f       	sbci	r24, 0xFF	; 255
 bba:	9f 4f       	sbci	r25, 0xFF	; 255
 bbc:	f0 68       	ori	r31, 0x80	; 128
 bbe:	3f 2e       	mov	r3, r31
 bc0:	2a e0       	ldi	r18, 0x0A	; 10
 bc2:	30 e0       	ldi	r19, 0x00	; 0
 bc4:	a3 01       	movw	r20, r6
 bc6:	1d d1       	rcall	.+570    	; 0xe02 <__ultoa_invert>
 bc8:	88 2e       	mov	r8, r24
 bca:	86 18       	sub	r8, r6
 bcc:	44 c0       	rjmp	.+136    	; 0xc56 <vfprintf+0x29c>
 bce:	85 37       	cpi	r24, 0x75	; 117
 bd0:	31 f4       	brne	.+12     	; 0xbde <vfprintf+0x224>
 bd2:	23 2d       	mov	r18, r3
 bd4:	2f 7e       	andi	r18, 0xEF	; 239
 bd6:	b2 2e       	mov	r11, r18
 bd8:	2a e0       	ldi	r18, 0x0A	; 10
 bda:	30 e0       	ldi	r19, 0x00	; 0
 bdc:	25 c0       	rjmp	.+74     	; 0xc28 <vfprintf+0x26e>
 bde:	93 2d       	mov	r25, r3
 be0:	99 7f       	andi	r25, 0xF9	; 249
 be2:	b9 2e       	mov	r11, r25
 be4:	8f 36       	cpi	r24, 0x6F	; 111
 be6:	c1 f0       	breq	.+48     	; 0xc18 <vfprintf+0x25e>
 be8:	18 f4       	brcc	.+6      	; 0xbf0 <vfprintf+0x236>
 bea:	88 35       	cpi	r24, 0x58	; 88
 bec:	79 f0       	breq	.+30     	; 0xc0c <vfprintf+0x252>
 bee:	ae c0       	rjmp	.+348    	; 0xd4c <vfprintf+0x392>
 bf0:	80 37       	cpi	r24, 0x70	; 112
 bf2:	19 f0       	breq	.+6      	; 0xbfa <vfprintf+0x240>
 bf4:	88 37       	cpi	r24, 0x78	; 120
 bf6:	21 f0       	breq	.+8      	; 0xc00 <vfprintf+0x246>
 bf8:	a9 c0       	rjmp	.+338    	; 0xd4c <vfprintf+0x392>
 bfa:	e9 2f       	mov	r30, r25
 bfc:	e0 61       	ori	r30, 0x10	; 16
 bfe:	be 2e       	mov	r11, r30
 c00:	b4 fe       	sbrs	r11, 4
 c02:	0d c0       	rjmp	.+26     	; 0xc1e <vfprintf+0x264>
 c04:	fb 2d       	mov	r31, r11
 c06:	f4 60       	ori	r31, 0x04	; 4
 c08:	bf 2e       	mov	r11, r31
 c0a:	09 c0       	rjmp	.+18     	; 0xc1e <vfprintf+0x264>
 c0c:	34 fe       	sbrs	r3, 4
 c0e:	0a c0       	rjmp	.+20     	; 0xc24 <vfprintf+0x26a>
 c10:	29 2f       	mov	r18, r25
 c12:	26 60       	ori	r18, 0x06	; 6
 c14:	b2 2e       	mov	r11, r18
 c16:	06 c0       	rjmp	.+12     	; 0xc24 <vfprintf+0x26a>
 c18:	28 e0       	ldi	r18, 0x08	; 8
 c1a:	30 e0       	ldi	r19, 0x00	; 0
 c1c:	05 c0       	rjmp	.+10     	; 0xc28 <vfprintf+0x26e>
 c1e:	20 e1       	ldi	r18, 0x10	; 16
 c20:	30 e0       	ldi	r19, 0x00	; 0
 c22:	02 c0       	rjmp	.+4      	; 0xc28 <vfprintf+0x26e>
 c24:	20 e1       	ldi	r18, 0x10	; 16
 c26:	32 e0       	ldi	r19, 0x02	; 2
 c28:	f8 01       	movw	r30, r16
 c2a:	b7 fe       	sbrs	r11, 7
 c2c:	07 c0       	rjmp	.+14     	; 0xc3c <vfprintf+0x282>
 c2e:	60 81       	ld	r22, Z
 c30:	71 81       	ldd	r23, Z+1	; 0x01
 c32:	82 81       	ldd	r24, Z+2	; 0x02
 c34:	93 81       	ldd	r25, Z+3	; 0x03
 c36:	0c 5f       	subi	r16, 0xFC	; 252
 c38:	1f 4f       	sbci	r17, 0xFF	; 255
 c3a:	06 c0       	rjmp	.+12     	; 0xc48 <vfprintf+0x28e>
 c3c:	60 81       	ld	r22, Z
 c3e:	71 81       	ldd	r23, Z+1	; 0x01
 c40:	80 e0       	ldi	r24, 0x00	; 0
 c42:	90 e0       	ldi	r25, 0x00	; 0
 c44:	0e 5f       	subi	r16, 0xFE	; 254
 c46:	1f 4f       	sbci	r17, 0xFF	; 255
 c48:	a3 01       	movw	r20, r6
 c4a:	db d0       	rcall	.+438    	; 0xe02 <__ultoa_invert>
 c4c:	88 2e       	mov	r8, r24
 c4e:	86 18       	sub	r8, r6
 c50:	fb 2d       	mov	r31, r11
 c52:	ff 77       	andi	r31, 0x7F	; 127
 c54:	3f 2e       	mov	r3, r31
 c56:	36 fe       	sbrs	r3, 6
 c58:	0d c0       	rjmp	.+26     	; 0xc74 <vfprintf+0x2ba>
 c5a:	23 2d       	mov	r18, r3
 c5c:	2e 7f       	andi	r18, 0xFE	; 254
 c5e:	a2 2e       	mov	r10, r18
 c60:	89 14       	cp	r8, r9
 c62:	58 f4       	brcc	.+22     	; 0xc7a <vfprintf+0x2c0>
 c64:	34 fe       	sbrs	r3, 4
 c66:	0b c0       	rjmp	.+22     	; 0xc7e <vfprintf+0x2c4>
 c68:	32 fc       	sbrc	r3, 2
 c6a:	09 c0       	rjmp	.+18     	; 0xc7e <vfprintf+0x2c4>
 c6c:	83 2d       	mov	r24, r3
 c6e:	8e 7e       	andi	r24, 0xEE	; 238
 c70:	a8 2e       	mov	r10, r24
 c72:	05 c0       	rjmp	.+10     	; 0xc7e <vfprintf+0x2c4>
 c74:	b8 2c       	mov	r11, r8
 c76:	a3 2c       	mov	r10, r3
 c78:	03 c0       	rjmp	.+6      	; 0xc80 <vfprintf+0x2c6>
 c7a:	b8 2c       	mov	r11, r8
 c7c:	01 c0       	rjmp	.+2      	; 0xc80 <vfprintf+0x2c6>
 c7e:	b9 2c       	mov	r11, r9
 c80:	a4 fe       	sbrs	r10, 4
 c82:	0f c0       	rjmp	.+30     	; 0xca2 <vfprintf+0x2e8>
 c84:	fe 01       	movw	r30, r28
 c86:	e8 0d       	add	r30, r8
 c88:	f1 1d       	adc	r31, r1
 c8a:	80 81       	ld	r24, Z
 c8c:	80 33       	cpi	r24, 0x30	; 48
 c8e:	21 f4       	brne	.+8      	; 0xc98 <vfprintf+0x2de>
 c90:	9a 2d       	mov	r25, r10
 c92:	99 7e       	andi	r25, 0xE9	; 233
 c94:	a9 2e       	mov	r10, r25
 c96:	09 c0       	rjmp	.+18     	; 0xcaa <vfprintf+0x2f0>
 c98:	a2 fe       	sbrs	r10, 2
 c9a:	06 c0       	rjmp	.+12     	; 0xca8 <vfprintf+0x2ee>
 c9c:	b3 94       	inc	r11
 c9e:	b3 94       	inc	r11
 ca0:	04 c0       	rjmp	.+8      	; 0xcaa <vfprintf+0x2f0>
 ca2:	8a 2d       	mov	r24, r10
 ca4:	86 78       	andi	r24, 0x86	; 134
 ca6:	09 f0       	breq	.+2      	; 0xcaa <vfprintf+0x2f0>
 ca8:	b3 94       	inc	r11
 caa:	a3 fc       	sbrc	r10, 3
 cac:	10 c0       	rjmp	.+32     	; 0xcce <vfprintf+0x314>
 cae:	a0 fe       	sbrs	r10, 0
 cb0:	06 c0       	rjmp	.+12     	; 0xcbe <vfprintf+0x304>
 cb2:	b2 14       	cp	r11, r2
 cb4:	80 f4       	brcc	.+32     	; 0xcd6 <vfprintf+0x31c>
 cb6:	28 0c       	add	r2, r8
 cb8:	92 2c       	mov	r9, r2
 cba:	9b 18       	sub	r9, r11
 cbc:	0d c0       	rjmp	.+26     	; 0xcd8 <vfprintf+0x31e>
 cbe:	b2 14       	cp	r11, r2
 cc0:	58 f4       	brcc	.+22     	; 0xcd8 <vfprintf+0x31e>
 cc2:	b6 01       	movw	r22, r12
 cc4:	80 e2       	ldi	r24, 0x20	; 32
 cc6:	90 e0       	ldi	r25, 0x00	; 0
 cc8:	60 d0       	rcall	.+192    	; 0xd8a <fputc>
 cca:	b3 94       	inc	r11
 ccc:	f8 cf       	rjmp	.-16     	; 0xcbe <vfprintf+0x304>
 cce:	b2 14       	cp	r11, r2
 cd0:	18 f4       	brcc	.+6      	; 0xcd8 <vfprintf+0x31e>
 cd2:	2b 18       	sub	r2, r11
 cd4:	02 c0       	rjmp	.+4      	; 0xcda <vfprintf+0x320>
 cd6:	98 2c       	mov	r9, r8
 cd8:	21 2c       	mov	r2, r1
 cda:	a4 fe       	sbrs	r10, 4
 cdc:	0f c0       	rjmp	.+30     	; 0xcfc <vfprintf+0x342>
 cde:	b6 01       	movw	r22, r12
 ce0:	80 e3       	ldi	r24, 0x30	; 48
 ce2:	90 e0       	ldi	r25, 0x00	; 0
 ce4:	52 d0       	rcall	.+164    	; 0xd8a <fputc>
 ce6:	a2 fe       	sbrs	r10, 2
 ce8:	16 c0       	rjmp	.+44     	; 0xd16 <vfprintf+0x35c>
 cea:	a1 fc       	sbrc	r10, 1
 cec:	03 c0       	rjmp	.+6      	; 0xcf4 <vfprintf+0x33a>
 cee:	88 e7       	ldi	r24, 0x78	; 120
 cf0:	90 e0       	ldi	r25, 0x00	; 0
 cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <vfprintf+0x33e>
 cf4:	88 e5       	ldi	r24, 0x58	; 88
 cf6:	90 e0       	ldi	r25, 0x00	; 0
 cf8:	b6 01       	movw	r22, r12
 cfa:	0c c0       	rjmp	.+24     	; 0xd14 <vfprintf+0x35a>
 cfc:	8a 2d       	mov	r24, r10
 cfe:	86 78       	andi	r24, 0x86	; 134
 d00:	51 f0       	breq	.+20     	; 0xd16 <vfprintf+0x35c>
 d02:	a1 fe       	sbrs	r10, 1
 d04:	02 c0       	rjmp	.+4      	; 0xd0a <vfprintf+0x350>
 d06:	8b e2       	ldi	r24, 0x2B	; 43
 d08:	01 c0       	rjmp	.+2      	; 0xd0c <vfprintf+0x352>
 d0a:	80 e2       	ldi	r24, 0x20	; 32
 d0c:	a7 fc       	sbrc	r10, 7
 d0e:	8d e2       	ldi	r24, 0x2D	; 45
 d10:	b6 01       	movw	r22, r12
 d12:	90 e0       	ldi	r25, 0x00	; 0
 d14:	3a d0       	rcall	.+116    	; 0xd8a <fputc>
 d16:	89 14       	cp	r8, r9
 d18:	30 f4       	brcc	.+12     	; 0xd26 <vfprintf+0x36c>
 d1a:	b6 01       	movw	r22, r12
 d1c:	80 e3       	ldi	r24, 0x30	; 48
 d1e:	90 e0       	ldi	r25, 0x00	; 0
 d20:	34 d0       	rcall	.+104    	; 0xd8a <fputc>
 d22:	9a 94       	dec	r9
 d24:	f8 cf       	rjmp	.-16     	; 0xd16 <vfprintf+0x35c>
 d26:	8a 94       	dec	r8
 d28:	f3 01       	movw	r30, r6
 d2a:	e8 0d       	add	r30, r8
 d2c:	f1 1d       	adc	r31, r1
 d2e:	80 81       	ld	r24, Z
 d30:	b6 01       	movw	r22, r12
 d32:	90 e0       	ldi	r25, 0x00	; 0
 d34:	2a d0       	rcall	.+84     	; 0xd8a <fputc>
 d36:	81 10       	cpse	r8, r1
 d38:	f6 cf       	rjmp	.-20     	; 0xd26 <vfprintf+0x36c>
 d3a:	22 20       	and	r2, r2
 d3c:	09 f4       	brne	.+2      	; 0xd40 <vfprintf+0x386>
 d3e:	4e ce       	rjmp	.-868    	; 0x9dc <vfprintf+0x22>
 d40:	b6 01       	movw	r22, r12
 d42:	80 e2       	ldi	r24, 0x20	; 32
 d44:	90 e0       	ldi	r25, 0x00	; 0
 d46:	21 d0       	rcall	.+66     	; 0xd8a <fputc>
 d48:	2a 94       	dec	r2
 d4a:	f7 cf       	rjmp	.-18     	; 0xd3a <vfprintf+0x380>
 d4c:	f6 01       	movw	r30, r12
 d4e:	86 81       	ldd	r24, Z+6	; 0x06
 d50:	97 81       	ldd	r25, Z+7	; 0x07
 d52:	02 c0       	rjmp	.+4      	; 0xd58 <vfprintf+0x39e>
 d54:	8f ef       	ldi	r24, 0xFF	; 255
 d56:	9f ef       	ldi	r25, 0xFF	; 255
 d58:	2b 96       	adiw	r28, 0x0b	; 11
 d5a:	e2 e1       	ldi	r30, 0x12	; 18
 d5c:	e1 c0       	rjmp	.+450    	; 0xf20 <__epilogue_restores__>

00000d5e <strnlen_P>:
 d5e:	fc 01       	movw	r30, r24
 d60:	05 90       	lpm	r0, Z+
 d62:	61 50       	subi	r22, 0x01	; 1
 d64:	70 40       	sbci	r23, 0x00	; 0
 d66:	01 10       	cpse	r0, r1
 d68:	d8 f7       	brcc	.-10     	; 0xd60 <strnlen_P+0x2>
 d6a:	80 95       	com	r24
 d6c:	90 95       	com	r25
 d6e:	8e 0f       	add	r24, r30
 d70:	9f 1f       	adc	r25, r31
 d72:	08 95       	ret

00000d74 <strnlen>:
 d74:	fc 01       	movw	r30, r24
 d76:	61 50       	subi	r22, 0x01	; 1
 d78:	70 40       	sbci	r23, 0x00	; 0
 d7a:	01 90       	ld	r0, Z+
 d7c:	01 10       	cpse	r0, r1
 d7e:	d8 f7       	brcc	.-10     	; 0xd76 <strnlen+0x2>
 d80:	80 95       	com	r24
 d82:	90 95       	com	r25
 d84:	8e 0f       	add	r24, r30
 d86:	9f 1f       	adc	r25, r31
 d88:	08 95       	ret

00000d8a <fputc>:
 d8a:	0f 93       	push	r16
 d8c:	1f 93       	push	r17
 d8e:	cf 93       	push	r28
 d90:	df 93       	push	r29
 d92:	fb 01       	movw	r30, r22
 d94:	23 81       	ldd	r18, Z+3	; 0x03
 d96:	21 fd       	sbrc	r18, 1
 d98:	03 c0       	rjmp	.+6      	; 0xda0 <fputc+0x16>
 d9a:	8f ef       	ldi	r24, 0xFF	; 255
 d9c:	9f ef       	ldi	r25, 0xFF	; 255
 d9e:	2c c0       	rjmp	.+88     	; 0xdf8 <fputc+0x6e>
 da0:	22 ff       	sbrs	r18, 2
 da2:	16 c0       	rjmp	.+44     	; 0xdd0 <fputc+0x46>
 da4:	46 81       	ldd	r20, Z+6	; 0x06
 da6:	57 81       	ldd	r21, Z+7	; 0x07
 da8:	24 81       	ldd	r18, Z+4	; 0x04
 daa:	35 81       	ldd	r19, Z+5	; 0x05
 dac:	42 17       	cp	r20, r18
 dae:	53 07       	cpc	r21, r19
 db0:	44 f4       	brge	.+16     	; 0xdc2 <fputc+0x38>
 db2:	a0 81       	ld	r26, Z
 db4:	b1 81       	ldd	r27, Z+1	; 0x01
 db6:	9d 01       	movw	r18, r26
 db8:	2f 5f       	subi	r18, 0xFF	; 255
 dba:	3f 4f       	sbci	r19, 0xFF	; 255
 dbc:	31 83       	std	Z+1, r19	; 0x01
 dbe:	20 83       	st	Z, r18
 dc0:	8c 93       	st	X, r24
 dc2:	26 81       	ldd	r18, Z+6	; 0x06
 dc4:	37 81       	ldd	r19, Z+7	; 0x07
 dc6:	2f 5f       	subi	r18, 0xFF	; 255
 dc8:	3f 4f       	sbci	r19, 0xFF	; 255
 dca:	37 83       	std	Z+7, r19	; 0x07
 dcc:	26 83       	std	Z+6, r18	; 0x06
 dce:	14 c0       	rjmp	.+40     	; 0xdf8 <fputc+0x6e>
 dd0:	8b 01       	movw	r16, r22
 dd2:	ec 01       	movw	r28, r24
 dd4:	fb 01       	movw	r30, r22
 dd6:	00 84       	ldd	r0, Z+8	; 0x08
 dd8:	f1 85       	ldd	r31, Z+9	; 0x09
 dda:	e0 2d       	mov	r30, r0
 ddc:	09 95       	icall
 dde:	89 2b       	or	r24, r25
 de0:	e1 f6       	brne	.-72     	; 0xd9a <fputc+0x10>
 de2:	d8 01       	movw	r26, r16
 de4:	16 96       	adiw	r26, 0x06	; 6
 de6:	8d 91       	ld	r24, X+
 de8:	9c 91       	ld	r25, X
 dea:	17 97       	sbiw	r26, 0x07	; 7
 dec:	01 96       	adiw	r24, 0x01	; 1
 dee:	17 96       	adiw	r26, 0x07	; 7
 df0:	9c 93       	st	X, r25
 df2:	8e 93       	st	-X, r24
 df4:	16 97       	sbiw	r26, 0x06	; 6
 df6:	ce 01       	movw	r24, r28
 df8:	df 91       	pop	r29
 dfa:	cf 91       	pop	r28
 dfc:	1f 91       	pop	r17
 dfe:	0f 91       	pop	r16
 e00:	08 95       	ret

00000e02 <__ultoa_invert>:
 e02:	fa 01       	movw	r30, r20
 e04:	aa 27       	eor	r26, r26
 e06:	28 30       	cpi	r18, 0x08	; 8
 e08:	51 f1       	breq	.+84     	; 0xe5e <__ultoa_invert+0x5c>
 e0a:	20 31       	cpi	r18, 0x10	; 16
 e0c:	81 f1       	breq	.+96     	; 0xe6e <__ultoa_invert+0x6c>
 e0e:	e8 94       	clt
 e10:	6f 93       	push	r22
 e12:	6e 7f       	andi	r22, 0xFE	; 254
 e14:	6e 5f       	subi	r22, 0xFE	; 254
 e16:	7f 4f       	sbci	r23, 0xFF	; 255
 e18:	8f 4f       	sbci	r24, 0xFF	; 255
 e1a:	9f 4f       	sbci	r25, 0xFF	; 255
 e1c:	af 4f       	sbci	r26, 0xFF	; 255
 e1e:	b1 e0       	ldi	r27, 0x01	; 1
 e20:	3e d0       	rcall	.+124    	; 0xe9e <__ultoa_invert+0x9c>
 e22:	b4 e0       	ldi	r27, 0x04	; 4
 e24:	3c d0       	rcall	.+120    	; 0xe9e <__ultoa_invert+0x9c>
 e26:	67 0f       	add	r22, r23
 e28:	78 1f       	adc	r23, r24
 e2a:	89 1f       	adc	r24, r25
 e2c:	9a 1f       	adc	r25, r26
 e2e:	a1 1d       	adc	r26, r1
 e30:	68 0f       	add	r22, r24
 e32:	79 1f       	adc	r23, r25
 e34:	8a 1f       	adc	r24, r26
 e36:	91 1d       	adc	r25, r1
 e38:	a1 1d       	adc	r26, r1
 e3a:	6a 0f       	add	r22, r26
 e3c:	71 1d       	adc	r23, r1
 e3e:	81 1d       	adc	r24, r1
 e40:	91 1d       	adc	r25, r1
 e42:	a1 1d       	adc	r26, r1
 e44:	20 d0       	rcall	.+64     	; 0xe86 <__ultoa_invert+0x84>
 e46:	09 f4       	brne	.+2      	; 0xe4a <__ultoa_invert+0x48>
 e48:	68 94       	set
 e4a:	3f 91       	pop	r19
 e4c:	2a e0       	ldi	r18, 0x0A	; 10
 e4e:	26 9f       	mul	r18, r22
 e50:	11 24       	eor	r1, r1
 e52:	30 19       	sub	r19, r0
 e54:	30 5d       	subi	r19, 0xD0	; 208
 e56:	31 93       	st	Z+, r19
 e58:	de f6       	brtc	.-74     	; 0xe10 <__ultoa_invert+0xe>
 e5a:	cf 01       	movw	r24, r30
 e5c:	08 95       	ret
 e5e:	46 2f       	mov	r20, r22
 e60:	47 70       	andi	r20, 0x07	; 7
 e62:	40 5d       	subi	r20, 0xD0	; 208
 e64:	41 93       	st	Z+, r20
 e66:	b3 e0       	ldi	r27, 0x03	; 3
 e68:	0f d0       	rcall	.+30     	; 0xe88 <__ultoa_invert+0x86>
 e6a:	c9 f7       	brne	.-14     	; 0xe5e <__ultoa_invert+0x5c>
 e6c:	f6 cf       	rjmp	.-20     	; 0xe5a <__ultoa_invert+0x58>
 e6e:	46 2f       	mov	r20, r22
 e70:	4f 70       	andi	r20, 0x0F	; 15
 e72:	40 5d       	subi	r20, 0xD0	; 208
 e74:	4a 33       	cpi	r20, 0x3A	; 58
 e76:	18 f0       	brcs	.+6      	; 0xe7e <__ultoa_invert+0x7c>
 e78:	49 5d       	subi	r20, 0xD9	; 217
 e7a:	31 fd       	sbrc	r19, 1
 e7c:	40 52       	subi	r20, 0x20	; 32
 e7e:	41 93       	st	Z+, r20
 e80:	02 d0       	rcall	.+4      	; 0xe86 <__ultoa_invert+0x84>
 e82:	a9 f7       	brne	.-22     	; 0xe6e <__ultoa_invert+0x6c>
 e84:	ea cf       	rjmp	.-44     	; 0xe5a <__ultoa_invert+0x58>
 e86:	b4 e0       	ldi	r27, 0x04	; 4
 e88:	a6 95       	lsr	r26
 e8a:	97 95       	ror	r25
 e8c:	87 95       	ror	r24
 e8e:	77 95       	ror	r23
 e90:	67 95       	ror	r22
 e92:	ba 95       	dec	r27
 e94:	c9 f7       	brne	.-14     	; 0xe88 <__ultoa_invert+0x86>
 e96:	00 97       	sbiw	r24, 0x00	; 0
 e98:	61 05       	cpc	r22, r1
 e9a:	71 05       	cpc	r23, r1
 e9c:	08 95       	ret
 e9e:	9b 01       	movw	r18, r22
 ea0:	ac 01       	movw	r20, r24
 ea2:	0a 2e       	mov	r0, r26
 ea4:	06 94       	lsr	r0
 ea6:	57 95       	ror	r21
 ea8:	47 95       	ror	r20
 eaa:	37 95       	ror	r19
 eac:	27 95       	ror	r18
 eae:	ba 95       	dec	r27
 eb0:	c9 f7       	brne	.-14     	; 0xea4 <__ultoa_invert+0xa2>
 eb2:	62 0f       	add	r22, r18
 eb4:	73 1f       	adc	r23, r19
 eb6:	84 1f       	adc	r24, r20
 eb8:	95 1f       	adc	r25, r21
 eba:	a0 1d       	adc	r26, r0
 ebc:	08 95       	ret

00000ebe <eeprom_read_byte>:
 ebe:	e1 99       	sbic	0x1c, 1	; 28
 ec0:	fe cf       	rjmp	.-4      	; 0xebe <eeprom_read_byte>
 ec2:	9f bb       	out	0x1f, r25	; 31
 ec4:	8e bb       	out	0x1e, r24	; 30
 ec6:	e0 9a       	sbi	0x1c, 0	; 28
 ec8:	99 27       	eor	r25, r25
 eca:	8d b3       	in	r24, 0x1d	; 29
 ecc:	08 95       	ret

00000ece <eeprom_write_byte>:
 ece:	26 2f       	mov	r18, r22

00000ed0 <eeprom_write_r18>:
 ed0:	e1 99       	sbic	0x1c, 1	; 28
 ed2:	fe cf       	rjmp	.-4      	; 0xed0 <eeprom_write_r18>
 ed4:	9f bb       	out	0x1f, r25	; 31
 ed6:	8e bb       	out	0x1e, r24	; 30
 ed8:	2d bb       	out	0x1d, r18	; 29
 eda:	0f b6       	in	r0, 0x3f	; 63
 edc:	f8 94       	cli
 ede:	e2 9a       	sbi	0x1c, 2	; 28
 ee0:	e1 9a       	sbi	0x1c, 1	; 28
 ee2:	0f be       	out	0x3f, r0	; 63
 ee4:	01 96       	adiw	r24, 0x01	; 1
 ee6:	08 95       	ret

00000ee8 <__prologue_saves__>:
 ee8:	2f 92       	push	r2
 eea:	3f 92       	push	r3
 eec:	4f 92       	push	r4
 eee:	5f 92       	push	r5
 ef0:	6f 92       	push	r6
 ef2:	7f 92       	push	r7
 ef4:	8f 92       	push	r8
 ef6:	9f 92       	push	r9
 ef8:	af 92       	push	r10
 efa:	bf 92       	push	r11
 efc:	cf 92       	push	r12
 efe:	df 92       	push	r13
 f00:	ef 92       	push	r14
 f02:	ff 92       	push	r15
 f04:	0f 93       	push	r16
 f06:	1f 93       	push	r17
 f08:	cf 93       	push	r28
 f0a:	df 93       	push	r29
 f0c:	cd b7       	in	r28, 0x3d	; 61
 f0e:	de b7       	in	r29, 0x3e	; 62
 f10:	ca 1b       	sub	r28, r26
 f12:	db 0b       	sbc	r29, r27
 f14:	0f b6       	in	r0, 0x3f	; 63
 f16:	f8 94       	cli
 f18:	de bf       	out	0x3e, r29	; 62
 f1a:	0f be       	out	0x3f, r0	; 63
 f1c:	cd bf       	out	0x3d, r28	; 61
 f1e:	09 94       	ijmp

00000f20 <__epilogue_restores__>:
 f20:	2a 88       	ldd	r2, Y+18	; 0x12
 f22:	39 88       	ldd	r3, Y+17	; 0x11
 f24:	48 88       	ldd	r4, Y+16	; 0x10
 f26:	5f 84       	ldd	r5, Y+15	; 0x0f
 f28:	6e 84       	ldd	r6, Y+14	; 0x0e
 f2a:	7d 84       	ldd	r7, Y+13	; 0x0d
 f2c:	8c 84       	ldd	r8, Y+12	; 0x0c
 f2e:	9b 84       	ldd	r9, Y+11	; 0x0b
 f30:	aa 84       	ldd	r10, Y+10	; 0x0a
 f32:	b9 84       	ldd	r11, Y+9	; 0x09
 f34:	c8 84       	ldd	r12, Y+8	; 0x08
 f36:	df 80       	ldd	r13, Y+7	; 0x07
 f38:	ee 80       	ldd	r14, Y+6	; 0x06
 f3a:	fd 80       	ldd	r15, Y+5	; 0x05
 f3c:	0c 81       	ldd	r16, Y+4	; 0x04
 f3e:	1b 81       	ldd	r17, Y+3	; 0x03
 f40:	aa 81       	ldd	r26, Y+2	; 0x02
 f42:	b9 81       	ldd	r27, Y+1	; 0x01
 f44:	ce 0f       	add	r28, r30
 f46:	d1 1d       	adc	r29, r1
 f48:	0f b6       	in	r0, 0x3f	; 63
 f4a:	f8 94       	cli
 f4c:	de bf       	out	0x3e, r29	; 62
 f4e:	0f be       	out	0x3f, r0	; 63
 f50:	cd bf       	out	0x3d, r28	; 61
 f52:	ed 01       	movw	r28, r26
 f54:	08 95       	ret

00000f56 <_exit>:
 f56:	f8 94       	cli

00000f58 <__stop_program>:
 f58:	ff cf       	rjmp	.-2      	; 0xf58 <__stop_program>
